/*
 * API de Artículos
 *
 * API de administración de Articulos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jegiraldo@porcicarnes.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using EVO_PV_BusinessLogic;
using EVO_PV_BusinessObjects;
using EVO_PV_WebApi.Models.ArticulosApi;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.Swagger.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

namespace EVO_PV_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class ArticulosApiController : BaseController
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        #endregion

        /// <summary>
        /// Obtiene el artículo en el punto de venta filtrado por código y/o nombre
        /// </summary>
        /// <param name="codigoCliente">Indica el código del cliente</param>
        /// <param name="codigo">Indica el código</param>
        /// <param name="nombre">Indica el nombre</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/articulo/puntoventa/filtrar")]
        [SwaggerOperation("ObtenerArticuloPuntoVentaxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticuloPuntoVentaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerArticuloPuntoVentaxFiltro([FromQuery][Required()] string codigoCliente, [FromQuery] string codigo, [FromQuery] string nombre)
        {
            logger.Info($"Entró al método ObtenerArticuloPuntoVentaxFiltro en ArticulosApi EVO_PV_WebApi con los parámetros codigoCliente = {codigoCliente} , codigo = {codigo} , nombre {nombre}");

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticuloPuntoVentaResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"precioUnitario\" : 123,\n  \"cantidadMinimaDescuentoPorMayor\" : 4,\n  \"unidadMedida\" : \"Kg\",\n  \"lote\" : \"123\",\n  \"codigoArticulo\" : \"PT-1485\",\n  \"ingredientesSinStock\" : [ \"ingredientesSinStock\", \"ingredientesSinStock\" ],\n  \"descuentoPorMayor\" : true,\n  \"codigoBodega\" : \"PV-PRA\",\n  \"IVA\" : 123,\n  \"retencion\" : 123,\n  \"stock\" : 123,\n  \"nombreArticulo\" : \"Lomo\",\n  \"precioDescuentoPorMayor\" : 345\n}";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticuloPuntoVentaResponse>(exampleJson)
            : default(ArticuloPuntoVentaResponse);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtiene los artículos en el punto de venta
        /// </summary>
        /// <param name="codigoCliente">Indica el código del cliente</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/articulos/puntoventa")]
        [SwaggerOperation("ObtenerArticulosPuntoVenta")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ArticuloPuntoVentaResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerArticulosPuntoVenta([FromQuery][Required()] string codigoCliente)
        {
            logger.Info($"Entró al método ObtenerArticulosPuntoVenta en ArticulosApi EVO_PV_WebApi con el parámetro codigoCliente = {codigoCliente}");

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ArticuloPuntoVentaResponse>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"precioUnitario\" : 123,\n  \"cantidadMinimaDescuentoPorMayor\" : 4,\n  \"unidadMedida\" : \"Kg\",\n  \"lote\" : \"123\",\n  \"codigoArticulo\" : \"PT-1485\",\n  \"ingredientesSinStock\" : [ \"ingredientesSinStock\", \"ingredientesSinStock\" ],\n  \"descuentoPorMayor\" : true,\n  \"codigoBodega\" : \"PV-PRA\",\n  \"IVA\" : 123,\n  \"retencion\" : 123,\n  \"stock\" : 123,\n  \"nombreArticulo\" : \"Lomo\",\n  \"precioDescuentoPorMayor\" : 345\n}, {\n  \"precioUnitario\" : 123,\n  \"cantidadMinimaDescuentoPorMayor\" : 4,\n  \"unidadMedida\" : \"Kg\",\n  \"lote\" : \"123\",\n  \"codigoArticulo\" : \"PT-1485\",\n  \"ingredientesSinStock\" : [ \"ingredientesSinStock\", \"ingredientesSinStock\" ],\n  \"descuentoPorMayor\" : true,\n  \"codigoBodega\" : \"PV-PRA\",\n  \"IVA\" : 123,\n  \"retencion\" : 123,\n  \"stock\" : 123,\n  \"nombreArticulo\" : \"Lomo\",\n  \"precioDescuentoPorMayor\" : 345\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ArticuloPuntoVentaResponse>>(exampleJson)
            : default(List<ArticuloPuntoVentaResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Obtiene todos los Articulos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/articulos/bodega")]
        [SwaggerOperation("ObtenerTodosArticulosxBodega")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerTodosArticulosResponse>), description: "Operación realizada con éxito")]
        public async Task<ObtenerTodosArticulosResponse> ObtenerTodosArticulosxBodega(int desde, int hasta, string whsCodePuntoVenta, string whsCodePlanta)
        {
            ArticuloBL articuloBL = new ArticuloBL();
            var respuesta = await articuloBL.ObtenerTodosArticulosxBodega(desde, hasta, whsCodePuntoVenta, whsCodePlanta);

            return this.mapper.Map<ObtenerArticulos, ObtenerTodosArticulosResponse>(respuesta);
        }

        /// <summary>
        /// Obtiene todos los artículos aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de Auditoria. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("api/articulos/obtenerTodosArticulosBodegaxFiltro")]
        [SwaggerOperation("ObtenerTodosArticulosBodegaxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosArticulosResponse), description: "Operación realizada con éxito")]
        public async Task<ObtenerTodosArticulosResponse> ObtenerTodosArticulosBodegaxFiltro([FromBody] FiltrarArticuloRequest body)
        {
            try
            {
                ArticuloBL articuloBL = new ArticuloBL();

                ArticuloBodega articuloBodega = this.mapper.Map<FiltrarArticuloRequest, ArticuloBodega>(body);

                ObtenerTodosArticulosResponse obtenerTodosArticulosResponse = this.mapper.Map<ArticuloBodega, ObtenerTodosArticulosResponse>(articuloBodega);

                return obtenerTodosArticulosResponse;
            }
            catch (Exception)
            {
                throw;
            }
        }

        [HttpPost]
        [Route("api/articulos/bodega/buscar")]
        public List<ArticuloResponse> BuscarArticulosBodega([FromBody] BuscarArticuloRequest body)
        {
            ArticuloBL articuloBL = new ArticuloBL();

            BuscarArticuloSolicitud buscarArticuloSolicitud = this.mapper.Map<BuscarArticuloRequest, BuscarArticuloSolicitud>(body);

            List<ArticuloBodega> articulosBodega = articuloBL.ObtenerArticulosBodega(buscarArticuloSolicitud);

            List<ArticuloResponse> articulosResponse = this.mapper.Map<List<ArticuloBodega>, List<ArticuloResponse>>(articulosBodega);

            return articulosResponse;
        }


        /// <summary>
        /// Obtiene los estados del artículo
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/articulos/obtenerTodosEstados")]
        [SwaggerOperation("ObtenerTodosEstados")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EstadoArticuloResponse>), description: "Operación realizada con éxito")]
        public async Task<List<EstadoArticuloResponse>> ObtenerTodosEstados()
        {
            ArticuloBL articuloBL = new ArticuloBL();

            var obtenerEstado = await articuloBL.ObtenerTodosEstados();

            var estadoResponse = this.mapper.Map<List<EstadoArticulo>, List<EVO_PV_WebApi.Models.ArticulosApi.EstadoArticuloResponse>>(obtenerEstado);

            return estadoResponse;
        }

        /// <summary>
        /// Obtiene las unidades de medida
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("Antioquena/Auditoria/obtenerTodasUnidadesMedida")]
        [SwaggerOperation("ObtenerTodosUnidadesMedida")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<UnidadMedidaResponse>), description: "Operación realizada con éxito")]
        public async Task<List<UnidadMedidaResponse>> ObtenerTodosUnidadesMedida()
        {
            ArticuloBL articuloBL = new ArticuloBL();

            var obtenerUnidad = await articuloBL.ObtenerTodosUnidadesMedida();

            var unidadResponse = this.mapper.Map<List<UnidadMedida>, List<EVO_PV_WebApi.Models.ArticulosApi.UnidadMedidaResponse>>(obtenerUnidad);

            return unidadResponse;

        }

        /// <summary>
        /// Obtiene los Empaques
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/articulos/empaques")]
        [SwaggerOperation("ObtenerEmpaques")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EmpaqueResponse>), description: "Operación realizada con éxito")]
        public async Task<List<EmpaqueResponse>> ObtenerEmpaques()
        {
            logger.Info("Entró al método ObtenerEmpaques en EVO_PV_WebApi - Api Artículos sin parámetros");

            ArticuloBL bLArticulos = new ArticuloBL();

            List<BOEmpaque> empaques = await bLArticulos.ObtenerEmpaques();

            List<EmpaqueResponse> empaquesResponse =

            this.mapper.Map<List<BOEmpaque>, List<EmpaqueResponse>>(empaques);

            return empaquesResponse;

        }
    }
}