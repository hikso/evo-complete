/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using EVO_PV_BusinessLogic;
using EVO_PV_BusinessObjects;
using EVO_PV_WebApi.Models.PedidoApi;
using EVO_PV_WebApi.Models.PedidosApi;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.Swagger.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;

namespace EVO_PV_WebApi.Controllers
{

    public class PedidosApiController : BaseController
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        #endregion

        /// <summary>
        /// Obtener Consulta Pedido x Id
        /// </summary>
        /// <param name="id">Id del pedido</param>        
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos/consulta")]
        [SwaggerOperation("ObtenerConsultaPedidoxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosResponse), description: "Operación realizada con éxito")]
        public async Task<ConsultaPedidoResponse> ObtenerConsultaPedidoxId(int id)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                ConsultaPedidoRespuesta pedido = await pedidoBL.ObtenerConsultaPedidoId(id);

                ConsultaPedidoResponse respuesta = this.mapper.Map<ConsultaPedidoRespuesta, ConsultaPedidoResponse>(pedido);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Verifica que actualmente existan solicitudes en estado borrador en cada planta
        /// </summary>
        /// <param name="codigoPuntoVenta">PV-PRA</param>        
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos/solicitud/borradores")]
        [SwaggerOperation("ExisteSolicitudPlantasBorrador")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public bool ExisteSolicitudPlantasBorrador(string codigoPuntoVenta)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                return pedidoBL.ExisteSolicitudPlantasBorrador(codigoPuntoVenta);
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Verifica si se puede solicitar pedidos a las plantas
        /// </summary>
        /// <param name="codigoCliente">Indica el código del cliente que realizó la solicitud</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos/solicitud/habilitar")]
        [SwaggerOperation("HabilitarSolicitudPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public bool HabilitarSolicitudPedido(string codigoCliente)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                bool respuesta = pedidoBL.HabilitarSolicitudPedido(codigoCliente);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Obtiene los registros de pedidos en distribución
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos/distribucion")]
        [SwaggerOperation("ObtenerTodosPedidosDistribucion")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosDistribucionResponse), description: "Operación realizada con éxito")]
        public ObtenerTodosPedidosDistribucionResponse ObtenerTodosPedidosDistribucion(int desde, int hasta)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                ObtenerTodosPedidosDistribucion pedidos = pedidoBL.ObtenerTodosPedidosADistribucion(desde, hasta);

                ObtenerTodosPedidosDistribucionResponse respuesta =
                    this.mapper.Map<ObtenerTodosPedidosDistribucion, ObtenerTodosPedidosDistribucionResponse>(pedidos);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }

        }

        /// <summary>
        /// Actualizar un pedido
        /// </summary>
        /// <param name="body">Solicitud de pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("api/pedidos/actualizar")]
        [SwaggerOperation("ActualiPedido")]
        public async Task<bool> ActualiPedido([FromBody] PedidoRequest body)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                Pedido pedido = this.mapper.Map<PedidoRequest, Pedido>(body);

                bool respuesta = await pedidoBL.ActualizaPedido(pedido);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }

        }

        /// <summary>
        /// Retorna un booleano si existen 1 solicitud de pedido en estado "Borrador" de este cliente a esta planta 
        /// </summary>
        /// <param name="obtenerPedidoBorradorRequest">Contiene el código del cliente y la planta</param>
        /// <response>Boolean</response>
        [HttpPost]
        [Route("api/pedidos/borrador")]
        [SwaggerOperation("ObtenerPedidoBorradorRequest")]
        public bool ObtenerPedidoBorradorRequest([FromBody] ObtenerPedidoBorradorRequest obtenerPedidoBorradorRequest)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                ObtenerPedidoBorrador obtenerPedidoBorrador = this.mapper.Map<ObtenerPedidoBorradorRequest, ObtenerPedidoBorrador>(obtenerPedidoBorradorRequest);

                bool respuesta = pedidoBL.ObtenerPedidoBorradorRequest(obtenerPedidoBorrador);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }

        }

        /// <summary>
        /// Crea un pedido
        /// </summary>
        /// <param name="body">Solicitud de pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("api/pedidos")]
        [SwaggerOperation("CrearPedido")]
        public bool CrearPedido([FromBody]PedidoRequest body)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                Pedido pedido = this.mapper.Map<PedidoRequest, Pedido>(body);

                bool respuesta = pedidoBL.CrearPedido(pedido);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Obtiene el pedido por el id
        /// </summary>
        /// <param name="id">Indica el pedido ID</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos/obtener")]
        [SwaggerOperation("ObtenerPedidoxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerPedidoResponse), description: "Operación realizada con éxito")]
        public async Task<ObtenerPedidoResponse> ObtenerPedidoxId([Required()] int id)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                Pedido boPedido = pedidoBL.ObtenerPedidoPorId(id);

                ObtenerPedidoResponse obtenerPedidoResponse = this.mapper.Map<Pedido, ObtenerPedidoResponse>(boPedido);

                return obtenerPedidoResponse;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Obtiene los registros de Pedidos
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <param name="whsCode">Indica el código de la bodega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos")]
        [SwaggerOperation("ObtenerTodosPedidos")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosResponse), description: "Operación realizada con éxito")]
        public async Task<ObtenerTodosPedidosResponse> ObtenerTodosPedidos(int desde, int hasta, string whsCode)
        {
            try
            {

                PedidoBL pedidoBL = new PedidoBL();

                ObtenerPedidos BOobtenerTodosPedidos = pedidoBL.ObtenerTodosPedidos(desde, hasta, whsCode);

                ObtenerTodosPedidosResponse ObtenerTodosPedidos = this.mapper.Map<ObtenerPedidos, ObtenerTodosPedidosResponse>(BOobtenerTodosPedidos);

                return ObtenerTodosPedidos;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Obtiene por estado la cantidad de pedidos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>

        [HttpGet]
        [Route("api/pedidos/cantidadxestados")]
        [SwaggerOperation("ObtenerTodosCantidadPedidosxEstado")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerEstadoPedidoResponse>), description: "Operación realizada con éxito")]
        public List<ObtenerEstadoPedidoResponse> ObtenerTodosCantidadPedidosxEstado()
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();
                List<EstadoPedido> boEstados = pedidoBL.ObtenerCantidadxEstadosPedido();
                List<ObtenerEstadoPedidoResponse> obtenerEstadoPedidoResponse = this.mapper.Map<List<EstadoPedido>, List<ObtenerEstadoPedidoResponse>>(boEstados);
                return obtenerEstadoPedidoResponse;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Obtiene los estados de los Pedidos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("api/pedidos/estados")]
        [SwaggerOperation("ObtenerTodosEstadosPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerEstadoPedidoResponse>), description: "Operación realizada con éxito")]
        public List<ObtenerEstadoPedidoResponse> ObtenerTodosEstadosPedido()
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();
                List<EstadoPedido> boEstados = pedidoBL.ObtenerTodosEstadosPedido();
                List<ObtenerEstadoPedidoResponse> obtenerEstadoPedidoResponse = this.mapper.Map<List<EstadoPedido>, List<ObtenerEstadoPedidoResponse>>(boEstados);
                return obtenerEstadoPedidoResponse;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Obtiene todos los registros de Pedidos aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de Pedidos. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("api/pedidos/filtrar")]
        [SwaggerOperation("ObtenerTodosPedidosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosResponse), description: "Operación realizada con éxito")]
        public bool ObtenerTodosPedidosxFiltro([FromBody] FiltrarPedidoRequest body)
        {
            try
            {
                PedidoBL pedidoBL = new PedidoBL();

                Pedido pedido = this.mapper.Map<FiltrarPedidoRequest, Pedido>(body);

                bool respuesta = pedidoBL.CrearPedido(pedido);

                return respuesta;
            }
            catch (Exception e)
            {
                throw e;
            }
        }



    }
}