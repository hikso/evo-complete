/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_PV_WebApi.Models.PedidosApi
{ 
    /// <summary>
    /// Objeto que contiene la consulta del pedido
    /// </summary>
    [DataContract]
    public partial class ConsultaPedidoResponse : IEquatable<ConsultaPedidoResponse>
    { 
        /// <summary>
        /// Número del pedido
        /// </summary>
        /// <value>Número del pedido</value>
        [DataMember(Name="NumeroPedido")]
        public string NumeroPedido { get; set; }

        /// <summary>
        /// Estado del pedido
        /// </summary>
        /// <value>Estado del pedido</value>
        [DataMember(Name="EstadoPedido")]
        public string EstadoPedido { get; set; }

        /// <summary>
        /// Fecha de la solicitud del pedido
        /// </summary>
        /// <value>Fecha de la solicitud del pedido</value>
        [DataMember(Name="FechaSolicitud")]
        public string FechaSolicitud { get; set; }

        /// <summary>
        /// Fecha cuando se envíó el pedido
        /// </summary>
        /// <value>Fecha cuando se envíó el pedido</value>
        [DataMember(Name="FechaEnvio")]
        public string FechaEnvio { get; set; }

        /// <summary>
        /// Fecha cuando el pedido fué recibído en el punto de venta
        /// </summary>
        /// <value>Fecha cuando el pedido fué recibído en el punto de venta</value>
        [DataMember(Name="FechaRecibido")]
        public string FechaRecibido { get; set; }

        /// <summary>
        /// Fecha de cargue en vehículo
        /// </summary>
        /// <value>Fecha de cargue en vehículo</value>
        [DataMember(Name="FechaCargueEnVehiculo")]
        public string FechaCargueEnVehiculo { get; set; }

        /// <summary>
        /// Nombre del conductor del vehículo
        /// </summary>
        /// <value>Nombre del conductor del vehículo</value>
        [DataMember(Name="NombreConductor")]
        public string NombreConductor { get; set; }

        /// <summary>
        /// Placa del vehículo
        /// </summary>
        /// <value>Placa del vehículo</value>
        [DataMember(Name="PlacaVehiculo")]
        public string PlacaVehiculo { get; set; }

        /// <summary>
        /// Nombre del auxiliar
        /// </summary>
        /// <value>Nombre del auxiliar</value>
        [DataMember(Name="NombreAuxiliar")]
        public string NombreAuxiliar { get; set; }

        /// <summary>
        /// Nombre de la planta
        /// </summary>
        /// <value>Nombre de la planta</value>
        [DataMember(Name="Planta")]
        public string Planta { get; set; }

        /// <summary>
        /// Lista de detalles del Pedido
        /// </summary>
        /// <value>Lista de detalles del Pedido</value>
        [DataMember(Name="Detalles")]
        public List<ConsultaPedidoResponseDetalles> Detalles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsultaPedidoResponse {\n");
            sb.Append("  NumeroPedido: ").Append(NumeroPedido).Append("\n");
            sb.Append("  EstadoPedido: ").Append(EstadoPedido).Append("\n");
            sb.Append("  FechaSolicitud: ").Append(FechaSolicitud).Append("\n");
            sb.Append("  FechaEnvio: ").Append(FechaEnvio).Append("\n");
            sb.Append("  FechaRecibido: ").Append(FechaRecibido).Append("\n");
            sb.Append("  FechaCargueEnVehiculo: ").Append(FechaCargueEnVehiculo).Append("\n");
            sb.Append("  NombreConductor: ").Append(NombreConductor).Append("\n");
            sb.Append("  PlacaVehiculo: ").Append(PlacaVehiculo).Append("\n");
            sb.Append("  NombreAuxiliar: ").Append(NombreAuxiliar).Append("\n");
            sb.Append("  Planta: ").Append(Planta).Append("\n");
            sb.Append("  Detalles: ").Append(Detalles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConsultaPedidoResponse)obj);
        }

        /// <summary>
        /// Returns true if ConsultaPedidoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ConsultaPedidoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsultaPedidoResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumeroPedido == other.NumeroPedido ||
                    NumeroPedido != null &&
                    NumeroPedido.Equals(other.NumeroPedido)
                ) && 
                (
                    EstadoPedido == other.EstadoPedido ||
                    EstadoPedido != null &&
                    EstadoPedido.Equals(other.EstadoPedido)
                ) && 
                (
                    FechaSolicitud == other.FechaSolicitud ||
                    FechaSolicitud != null &&
                    FechaSolicitud.Equals(other.FechaSolicitud)
                ) && 
                (
                    FechaEnvio == other.FechaEnvio ||
                    FechaEnvio != null &&
                    FechaEnvio.Equals(other.FechaEnvio)
                ) && 
                (
                    FechaRecibido == other.FechaRecibido ||
                    FechaRecibido != null &&
                    FechaRecibido.Equals(other.FechaRecibido)
                ) && 
                (
                    FechaCargueEnVehiculo == other.FechaCargueEnVehiculo ||
                    FechaCargueEnVehiculo != null &&
                    FechaCargueEnVehiculo.Equals(other.FechaCargueEnVehiculo)
                ) && 
                (
                    NombreConductor == other.NombreConductor ||
                    NombreConductor != null &&
                    NombreConductor.Equals(other.NombreConductor)
                ) && 
                (
                    PlacaVehiculo == other.PlacaVehiculo ||
                    PlacaVehiculo != null &&
                    PlacaVehiculo.Equals(other.PlacaVehiculo)
                ) && 
                (
                    NombreAuxiliar == other.NombreAuxiliar ||
                    NombreAuxiliar != null &&
                    NombreAuxiliar.Equals(other.NombreAuxiliar)
                ) && 
                (
                    Planta == other.Planta ||
                    Planta != null &&
                    Planta.Equals(other.Planta)
                ) && 
                (
                    Detalles == other.Detalles ||
                    Detalles != null &&
                    Detalles.SequenceEqual(other.Detalles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NumeroPedido != null)
                    hashCode = hashCode * 59 + NumeroPedido.GetHashCode();
                    if (EstadoPedido != null)
                    hashCode = hashCode * 59 + EstadoPedido.GetHashCode();
                    if (FechaSolicitud != null)
                    hashCode = hashCode * 59 + FechaSolicitud.GetHashCode();
                    if (FechaEnvio != null)
                    hashCode = hashCode * 59 + FechaEnvio.GetHashCode();
                    if (FechaRecibido != null)
                    hashCode = hashCode * 59 + FechaRecibido.GetHashCode();
                    if (FechaCargueEnVehiculo != null)
                    hashCode = hashCode * 59 + FechaCargueEnVehiculo.GetHashCode();
                    if (NombreConductor != null)
                    hashCode = hashCode * 59 + NombreConductor.GetHashCode();
                    if (PlacaVehiculo != null)
                    hashCode = hashCode * 59 + PlacaVehiculo.GetHashCode();
                    if (NombreAuxiliar != null)
                    hashCode = hashCode * 59 + NombreAuxiliar.GetHashCode();
                    if (Planta != null)
                    hashCode = hashCode * 59 + Planta.GetHashCode();
                    if (Detalles != null)
                    hashCode = hashCode * 59 + Detalles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConsultaPedidoResponse left, ConsultaPedidoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConsultaPedidoResponse left, ConsultaPedidoResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
