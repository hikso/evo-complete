/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_PV_Proxy.Models.PedidoAPI
{ 
    /// <summary>
    /// Objeto que contiene el pedido
    /// </summary>
    [DataContract]
    public partial class ObtenerPedidoEnPlantaResponse : IEquatable<ObtenerPedidoEnPlantaResponse>
    { 
        /// <summary>
        /// Fecha solicitud del pedido
        /// </summary>
        /// <value>Fecha solicitud del pedido</value>
        [DataMember(Name="FechaSolicitud")]
        public DateTime? FechaSolicitud { get; set; }

        /// <summary>
        /// Fecha entrega del pedido
        /// </summary>
        /// <value>Fecha entrega del pedido</value>
        [DataMember(Name="FechaEntrega")]
        public DateTime? FechaEntrega { get; set; }

        /// <summary>
        /// Fecha aporbación del pedido
        /// </summary>
        /// <value>Fecha aporbación del pedido</value>
        [DataMember(Name="FechaAprobacion")]
        public DateTime? FechaAprobacion { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>
        [DataMember(Name="Cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// Nombre del usuario que registró la solicitud
        /// </summary>
        /// <value>Nombre del usuario que registró la solicitud</value>
        [DataMember(Name="Usuario")]
        public string Usuario { get; set; }

        /// <summary>
        /// Código del pedido
        /// </summary>
        /// <value>Código del pedido</value>
        [DataMember(Name="Codigo")]
        public string Codigo { get; set; }

        /// <summary>
        /// Nombre del estado del pedido
        /// </summary>
        /// <value>Nombre del estado del pedido</value>
        [DataMember(Name="Estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Lista de detalles del Pedido
        /// </summary>
        /// <value>Lista de detalles del Pedido</value>
        [DataMember(Name="PedidoDetallesRespuesta")]
        public List<ObtenerPedidoEnPlantaResponsePedidoDetallesRespuesta> PedidoDetallesRespuesta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObtenerPedidoEnPlantaResponse {\n");
            sb.Append("  FechaSolicitud: ").Append(FechaSolicitud).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  FechaAprobacion: ").Append(FechaAprobacion).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  PedidoDetallesRespuesta: ").Append(PedidoDetallesRespuesta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObtenerPedidoEnPlantaResponse)obj);
        }

        /// <summary>
        /// Returns true if ObtenerPedidoEnPlantaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ObtenerPedidoEnPlantaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObtenerPedidoEnPlantaResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FechaSolicitud == other.FechaSolicitud ||
                    FechaSolicitud != null &&
                    FechaSolicitud.Equals(other.FechaSolicitud)
                ) && 
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) && 
                (
                    FechaAprobacion == other.FechaAprobacion ||
                    FechaAprobacion != null &&
                    FechaAprobacion.Equals(other.FechaAprobacion)
                ) && 
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) && 
                (
                    Usuario == other.Usuario ||
                    Usuario != null &&
                    Usuario.Equals(other.Usuario)
                ) && 
                (
                    Codigo == other.Codigo ||
                    Codigo != null &&
                    Codigo.Equals(other.Codigo)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) && 
                (
                    PedidoDetallesRespuesta == other.PedidoDetallesRespuesta ||
                    PedidoDetallesRespuesta != null &&
                    PedidoDetallesRespuesta.SequenceEqual(other.PedidoDetallesRespuesta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FechaSolicitud != null)
                    hashCode = hashCode * 59 + FechaSolicitud.GetHashCode();
                    if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                    if (FechaAprobacion != null)
                    hashCode = hashCode * 59 + FechaAprobacion.GetHashCode();
                    if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                    if (Usuario != null)
                    hashCode = hashCode * 59 + Usuario.GetHashCode();
                    if (Codigo != null)
                    hashCode = hashCode * 59 + Codigo.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                    if (PedidoDetallesRespuesta != null)
                    hashCode = hashCode * 59 + PedidoDetallesRespuesta.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ObtenerPedidoEnPlantaResponse left, ObtenerPedidoEnPlantaResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObtenerPedidoEnPlantaResponse left, ObtenerPedidoEnPlantaResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
