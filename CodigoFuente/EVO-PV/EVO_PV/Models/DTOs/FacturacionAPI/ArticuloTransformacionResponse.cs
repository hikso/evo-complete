/*
 * API de Artículos
 *
 * API de administración de Articulos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_PV.Models.ArticulosApi
{
    /// <summary>
    /// Representa un artículo de transformación
    /// </summary>
    [DataContract]
    public partial class ArticuloTransformacionResponse : IEquatable<ArticuloTransformacionResponse>
    {
        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [DataMember(Name = "codigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Nombre del artículo
        /// </summary>
        /// <value>Nombre del artículo</value>
        [DataMember(Name = "nombreArticulo")]
        public string NombreArticulo { get; set; }

        /// <summary>
        /// Cantidad Mínima
        /// </summary>
        /// <value>Cantidad Mínima</value>
        [DataMember(Name = "cantidadMinima")]
        public decimal CantidadMinima { get; set; }

        /// <summary>
        /// Stock
        /// </summary>
        /// <value>Stock</value>
        [DataMember(Name = "stock")]
        public decimal Stock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticuloPuntoVentaResponse {\n");
            sb.Append("  CodigoArticulo: ").Append(CodigoArticulo).Append("\n");
            sb.Append("  NombreArticulo: ").Append(NombreArticulo).Append("\n");
            sb.Append("  CantidadMinima: ").Append(CantidadMinima).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticuloTransformacionResponse)obj);
        }

        /// <summary>
        /// Returns true if ArticuloTransformacionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticuloTransformacionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticuloTransformacionResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CodigoArticulo == other.CodigoArticulo ||
                    CodigoArticulo != null &&
                    CodigoArticulo.Equals(other.CodigoArticulo)
                ) &&
                (
                    NombreArticulo == other.NombreArticulo ||
                    NombreArticulo != null &&
                    NombreArticulo.Equals(other.NombreArticulo)
                ) &&
                (
                    CantidadMinima == other.CantidadMinima ||
                    CantidadMinima != null &&
                    CantidadMinima.Equals(other.CantidadMinima)
                )
                &&
                (
                    Stock == other.Stock ||
                    Stock != null &&
                    Stock.Equals(other.Stock)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CodigoArticulo != null)
                    hashCode = hashCode * 59 + CodigoArticulo.GetHashCode();
                if (NombreArticulo != null)
                    hashCode = hashCode * 59 + NombreArticulo.GetHashCode();
                if (CantidadMinima != null)
                    hashCode = hashCode * 59 + CantidadMinima.GetHashCode();
                if (Stock != null)
                    hashCode = hashCode * 59 + Stock.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ArticuloTransformacionResponse left, ArticuloTransformacionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticuloTransformacionResponse left, ArticuloTransformacionResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
