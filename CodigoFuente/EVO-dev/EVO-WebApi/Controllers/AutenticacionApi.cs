/*
 * API de Autenticación de Usuario
 *
 * API de administración de autenticación de usuario
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models;
using EVO_WebApi.Models.AutenticarApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class AutenticacionApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion
        
        #region Métodos Públicos

        /// <summary>
        /// Autentifica al usuario en el sistema
        /// </summary>
        /// <param name="body">Solicititud de autenticación del usuario</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/autenticar")]
        [ValidateModelState]
        [SwaggerOperation("Autenticar")]
        [SwaggerResponse(statusCode: 200, type: typeof(AutenticarResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult Autenticar([FromBody]AutenticarRequest body)
        {
            try
            {
                AutenticarSolicitud autenticarSolicitud = this.mapper.Map<AutenticarRequest, AutenticarSolicitud>(body);

                BLAutenticacion blAutenticacion = new BLAutenticacion();

                string IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (IP.Equals("::1"))
                {
                    IP = "127.0.0.1";
                }

                autenticarSolicitud.IP = IP;

                AutenticarRespuesta autenticarRespuesta = blAutenticacion.Autenticar(autenticarSolicitud);

                AutenticarResponse autenticarResponse = this.mapper.Map<AutenticarRespuesta, AutenticarResponse>(autenticarRespuesta);

                if (autenticarResponse.Token == null)
                {
                    return StatusCode(StatusCodes.Status401Unauthorized, "Usuario no autorizado");
                }

                return Ok(autenticarResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de Sesiones aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de Sesiones. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/sesion/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosRegistrosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosSesionesResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosRegistrosxFiltro([FromBody]FiltrarSesionRequest body)
        {
            try
            {
                BLAutenticacion bLAutenticacion = new BLAutenticacion();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosSesionesResponse sesionesResponse = new ObtenerTodosSesionesResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                sesionesResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosSesionesResponseRegistros> sesionesResponseRegistros = new List<ObtenerTodosSesionesResponseRegistros>();

                FiltroSesion filtroSesion = this.mapper.Map<FiltrarSesionRequest, FiltroSesion>(body);

                List<SesionRespuesta> listaRegistrosSesionesRespuestas = bLAutenticacion.ObtenerTodosRegistrosxFiltro(filtroSesion);

                int numeroTotalRegistros = 0;

                if (listaRegistrosSesionesRespuestas != null)
                {
                    //Se implementa el automapeo
                    sesionesResponseRegistros =
                        this.mapper.Map<List<SesionRespuesta>, List<ObtenerTodosSesionesResponseRegistros>>(listaRegistrosSesionesRespuestas);

                    // Para el conteo no se toman los parámetros desde y hasta del filtro
                    numeroTotalRegistros = bLAutenticacion.ObtenerConteoTodosRegistrosxFiltro(filtroSesion);
                }

                sesionesResponse.NumeroTotalRegistros = numeroTotalRegistros;
                sesionesResponse.Registros = sesionesResponseRegistros;

                return Ok(sesionesResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los registros de las sesiones
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/sesion")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosSesiones")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosSesionesResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosSesiones([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta)
        {
            try
            {
                BLAutenticacion bLAutenticacion = new BLAutenticacion();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosSesionesResponse obtenerTodosSesionesResponse = new ObtenerTodosSesionesResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch (Exception)
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<SesionRespuesta> listaRegistrosSesiones = bLAutenticacion.ObtenerTodosRegistros(desde, hasta);

                int numeroTotalRegistros = bLAutenticacion.ObtenerConteoTodosRegistros();

                obtenerTodosSesionesResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosSesionesResponse.TamanhoPaginacion = tamanhoPaginacion;

                //Se implementa el automapeo
                obtenerTodosSesionesResponse.Registros = this.mapper.Map<List<SesionRespuesta>, List<ObtenerTodosSesionesResponseRegistros>>(listaRegistrosSesiones);

                return Ok(obtenerTodosSesionesResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public AutenticacionApiController(IMapper mapper)
        {
            
           

            this.mapper = mapper;

        }
        #endregion
    }
}
