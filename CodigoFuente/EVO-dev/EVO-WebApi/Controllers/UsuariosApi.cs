/*
 * API de Usuarios
 *
 * API de administración de Usuarios
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.UsuariosApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class UsuariosApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos Públicos    

        /// <summary>
        /// Retorna el usuario si tiene accesso al punto de venta en el cual está registrado(caso especial punto de venta comercial) .
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/usuarios/puntoventa/")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerUsuarioPuntoVenta")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsuarioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerUsuarioPuntoVenta()
        {
            logger.Info($"Entró al método ObtenerUsuarioPuntoVenta");

            try
            {
                BLUsuario bLUsuarios = new BLUsuario();

                string userName = null;
                string IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (IP.Equals("::1"))
                {
                    IP = "127.0.0.1";
                }

                if (HttpContext.User.Identity != null)
                {
                    userName = HttpContext.User.Identity.Name;
                }

                Usuario usuario = bLUsuarios.ObtenerUsuarioPuntoVenta(userName, IP);

                UsuarioResponse usuarioResponse = this.mapper.Map<Usuario, UsuarioResponse>(usuario);

                return Ok(usuarioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch (Exception e)
            {
                logger.Error(e);

                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Retorna el objeto necesario para gestionar la paginación y la información a mostrar.
        /// </summary>
        /// <param name="id">Indica el id del rol por el cual se van a encontrar los usuarios de dicho rol.</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/usuarios/grupodominiomenosrol/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosUsuariosGrupoDominioMenosRol")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosUsuariosGrupoDominioMenosRolResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosUsuariosGrupoDominioMenosRol([FromRoute][Required] int id)
        {
            logger.Info($"Entró al método ObtenerTodosUsuariosGrupoDominioMenosRol en Api con el parametro id = {id}");

            try
            {
                BLUsuario bLUsuarios = new BLUsuario();

                List<Usuario> usuariosGrupoDominioMenosRol = bLUsuarios.ObtenerTodosUsuariosGrupoDominioMenosRol(id);

                List<ObtenerTodosUsuariosGrupoDominioMenosRolResponseRegistros>
                    usuariosGrupoDominioMenosRolResponseRegistros = this.mapper.
                    Map<List<Usuario>, List<ObtenerTodosUsuariosGrupoDominioMenosRolResponseRegistros>>(usuariosGrupoDominioMenosRol);

                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch (EVOException e)
                {
                    e = new EVOException(string.Format(errores.errParametroNumeroEntero, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }
                catch (Exception e)
                {
                    logger.Error(e);
                    throw e;
                }

                ObtenerTodosUsuariosGrupoDominioMenosRolResponse usuariosGrupoDominioMenosRolResponse =
                    new ObtenerTodosUsuariosGrupoDominioMenosRolResponse()
                    {
                        NumeroTotalRegistros = usuariosGrupoDominioMenosRolResponseRegistros.Count,
                        Registros = usuariosGrupoDominioMenosRolResponseRegistros,
                        TamanhoPaginacion = tamanhoPaginacion
                    };

                return Ok(usuariosGrupoDominioMenosRolResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch (Exception e)
            {
                logger.Error(e);

                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Retorna el usuario de EVO.
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/usuarios/obtenerusuario/")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerUsuario")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsuarioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerUsuario()
        {
            logger.Info($"Entró al método ObtenerUsuario");

            try
            {
                BLUsuario bLUsuarios = new BLUsuario();

                string userName = null;

                if (HttpContext.User.Identity != null)
                {
                    userName = HttpContext.User.Identity.Name;
                }

                Usuario usuario = bLUsuarios.ObtenerUsuario(userName);

                UsuarioResponse usuarioResponse = this.mapper.Map<Usuario, UsuarioResponse>(usuario);

                return Ok(usuarioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch (Exception e)
            {
                logger.Error(e);

                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Retorna los usuarios del directorio activo.
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/usuarios")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerUsuarios")]
        [SwaggerResponse(statusCode: 200, type: typeof(UsuarioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerUsuarios()
        {
            logger.Info($"Entró al método ObtenerUsuarios en UsuariosApi - EVO_WebApi");

            try
            {
                BLUsuario bLUsuarios = new BLUsuario();

                List<Usuario> usuarios = bLUsuarios.ObtenerTodosUsuariosDominio();

                List<UsuarioResponse> usuarioResponse = this.mapper.Map<List<Usuario>, List<UsuarioResponse>>(usuarios);

                return Ok(usuarioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public UsuariosApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion

    }
}

