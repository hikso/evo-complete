/*
 * API de Contenedores
 *
 * API de administración de Contenedores
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.ContenedoresApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContenedoresApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos Públicos

        /// <summary>
        /// Registra el código de barras
        /// </summary>
        /// <param name="pesajeId">Indica el id del pesaje</param>
        /// <param name="codigoBarras">Indica código de barras</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/tipocontenedores/codigobarras")]
        [ValidateModelState]
        [SwaggerOperation("AsignarCodigoBarras")]
        [SwaggerResponse(statusCode: 200, type: typeof(CodigoBarrasResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult AsignarCodigoBarras([FromQuery][Required()]int pesajeId, [FromQuery][Required()]string codigoBarras)
        {
            logger.Info($"Entró al método AsignarCodigoBarras en ContenedoresApi con los parámetros pesajeId = {pesajeId} , codigoBarras = {codigoBarras}");

            try
            {  
                BLContenedor blContenedor = new BLContenedor();

                string user = string.Empty;

                if (HttpContext.User.Identity != null)
                {
                    user = HttpContext.User.Identity.Name;
                }

                BOCodigoBarras bOCodigoBarras =
                    blContenedor.AsignarCodigoBarras(pesajeId,codigoBarras,user);

                CodigoBarrasResponse respuestaCodigoBarrasResponse =
                    this.mapper.Map<BOCodigoBarras,CodigoBarrasResponse>(bOCodigoBarras);

                return Ok(respuestaCodigoBarrasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los codigos de barras contenedores usados en el pesaje
        /// </summary>        
        /// <param name="pesajeId">Indica el id del pesaje</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/tipocontenedores/codigobarras")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerContenedoresCodigoBarras")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<CodigoBarrasResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerContenedoresCodigoBarras([FromQuery][Required()]int pesajeId)
        {
            logger.Info($"Entró al método ObtenerContenedoresCodigoBarras en ContenedoresApi con el parámetro pesajeId = {pesajeId}");

            try
            {
                BLContenedor blContenedores = new BLContenedor();

                List<BOCodigoBarrasResponse> bOCodigosBarrasResponse = blContenedores.ObtenerContenedoresCodigoBarras(pesajeId);

                List<CodigoBarrasResponse> codigosBarrasResponse = this.mapper.Map<List<BOCodigoBarrasResponse>, List<CodigoBarrasResponse>>(bOCodigosBarrasResponse);

                return Ok(codigosBarrasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los contenedores usados en el pesaje
        /// </summary>
        /// <param name="pesajeId">Indica el id del pesaje</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/tipocontenedores/pesaje")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerContenedoresPesaje")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PesajeContenedorResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerContenedoresPesaje([FromQuery][Required()]int pesajeId)
        {
            logger.Info($"Entró al método ObtenerContenedoresPesaje en ContenedoresApi con el parámetro pesajeId = {pesajeId}");

            try
            {
                BLContenedor blContenedores = new BLContenedor();

                List<BOPesajeContenedorResponse> bOPesajeContenedoresResponse = blContenedores.ObtenerContenedoresPesaje(pesajeId);

                List<PesajeContenedorResponse> pesajeContenedoresResponse = this.mapper.Map<List<BOPesajeContenedorResponse>,List<PesajeContenedorResponse>>(bOPesajeContenedoresResponse);

                return Ok(pesajeContenedoresResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }       

        /// <summary>
        /// Obtiene todos los tipos de contenedores
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/tipocontenedores/")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTipoContenedores")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<TipoContenedorResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTipoContenedores()
        {
            logger.Info($"Entró al método ObtenerTipoContenedores en Api Contenedores");

            try
            {
                BLContenedor blContenedores = new BLContenedor();

                List<BOTipoContenedorRespuesta> tiposContenedoresRespuestas = blContenedores.ObtenerTipoContenedores();

                List<TipoContenedorResponse> tiposContenedoresResponses = this.mapper.Map<List<BOTipoContenedorRespuesta>, List<TipoContenedorResponse>>(tiposContenedoresRespuestas);

                return Ok(tiposContenedoresRespuestas);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        } 
        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public ContenedoresApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion

    }
}
