/*
 * API de Pedidos
 *
 * API de administraci√≥n de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using EVO_WebApi.Models.VehiculosApi;
using IO.Swagger.Models.VehiculosApi;
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Obtiene el estado actual del encabezado de enrutamiento
    /// </summary>
    [DataContract]
    public partial class EnrutamientoResponse : IEquatable<EnrutamientoResponse>
    {
        /// <summary>
        /// Id del viaje
        /// </summary>
        /// <value>Id del viaje</value>
        [DataMember(Name = "vehiculoEntregaId")]
        public int VehiculoEntregaId { get; set; }

        /// <summary>
        /// Peso de la entrega
        /// </summary>
        /// <value>Peso de la entrega</value>
        [DataMember(Name = "totalPeso")]
        public decimal TotalPeso { get; set; }

        /// <summary>
        /// cantidad de entregas
        /// </summary>
        /// <value>cantidad de entregas</value>
        [DataMember(Name = "cantidadEntregas")]
        public int CantidadEntregas { get; set; }

        /// <summary>
        /// Gets or Sets TipoVehiculo
        /// </summary>
        [DataMember(Name = "tipoVehiculo")]
        public TipoVehiculoResponse TipoVehiculo { get; set; }

        /// <summary>
        /// Gets or Sets Vehiculo
        /// </summary>
        [DataMember(Name = "vehiculo")]
        public VehiculoResponse Vehiculo { get; set; }

        /// <summary>
        /// Gets or Sets Muelle
        /// </summary>
        [DataMember(Name = "muelle")]
        public MuelleResponse Muelle { get; set; }

        /// <summary>
        /// Gets or Sets Conductor
        /// </summary>
        [DataMember(Name = "conductor")]
        public EmpleadoResponse Conductor { get; set; }

        /// <summary>
        /// Gets or Sets Auxiliar
        /// </summary>
        [DataMember(Name = "auxiliar")]
        public EmpleadoResponse Auxiliar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnrutamientoResponse {\n");
            sb.Append("  TipoVehiculo: ").Append(TipoVehiculo).Append("\n");
            sb.Append("  Vehiculo: ").Append(Vehiculo).Append("\n");
            sb.Append("  Muelle: ").Append(Muelle).Append("\n");
            sb.Append("  Conductor: ").Append(Conductor).Append("\n");
            sb.Append("  Auxiliar: ").Append(Auxiliar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnrutamientoResponse)obj);
        }

        /// <summary>
        /// Returns true if EnrutamientoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EnrutamientoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnrutamientoResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    TipoVehiculo == other.TipoVehiculo ||
                    TipoVehiculo != null &&
                    TipoVehiculo.Equals(other.TipoVehiculo)
                ) &&
                (
                    Vehiculo == other.Vehiculo ||
                    Vehiculo != null &&
                    Vehiculo.Equals(other.Vehiculo)
                ) &&
                (
                    Muelle == other.Muelle ||
                    Muelle != null &&
                    Muelle.Equals(other.Muelle)
                ) &&
                (
                    Conductor == other.Conductor ||
                    Conductor != null &&
                    Conductor.Equals(other.Conductor)
                ) &&
                (
                    Auxiliar == other.Auxiliar ||
                    Auxiliar != null &&
                    Auxiliar.Equals(other.Auxiliar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (TipoVehiculo != null)
                    hashCode = hashCode * 59 + TipoVehiculo.GetHashCode();
                if (Vehiculo != null)
                    hashCode = hashCode * 59 + Vehiculo.GetHashCode();
                if (Muelle != null)
                    hashCode = hashCode * 59 + Muelle.GetHashCode();
                if (Conductor != null)
                    hashCode = hashCode * 59 + Conductor.GetHashCode();
                if (Auxiliar != null)
                    hashCode = hashCode * 59 + Auxiliar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EnrutamientoResponse left, EnrutamientoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnrutamientoResponse left, EnrutamientoResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
