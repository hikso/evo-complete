/*
 * API de Pesaje
 *
 * API de administración de Pesaje 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PesajeApi
{
    /// <summary>
    /// Representa un pesaje
    /// </summary>
    [DataContract]
    public partial class PesajeResponse : IEquatable<PesajeResponse>
    {
        /// <summary>
        /// Id del pesaje
        /// </summary>
        /// <value>Id del pesaje</value>
        [DataMember(Name = "PesajeId")]
        public int PesajeId { get; set; }

        /// <summary>
        /// Peso de la báscula
        /// </summary>
        /// <value>Peso de la báscula</value>
        [DataMember(Name = "pesoBascula")]
        public decimal PesoBascula { get; set; }

        /// <summary>
        /// Peso del artículo
        /// </summary>
        /// <value>Peso del artículo</value>
        [DataMember(Name = "pesoArticulo")]
        public decimal PesoArticulo { get; set; }

        /// <summary>
        /// Cantidad de contenedores máxima por pesaje
        /// </summary>
        /// <value>Cinco</value>
        [DataMember(Name = "pesajeAl")]
        public string PesajeAl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PesajeResponse {\n");
            sb.Append("  PesajeId: ").Append(PesajeId).Append("\n");
            sb.Append("  PesoBascula: ").Append(PesoBascula).Append("\n");
            sb.Append("  PesoArticulo: ").Append(PesoArticulo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PesajeResponse)obj);
        }

        /// <summary>
        /// Returns true if PesajeResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PesajeResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PesajeResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PesajeId == other.PesajeId ||
                    PesajeId != null &&
                    PesajeId.Equals(other.PesajeId)
                ) &&
                (
                    PesoBascula == other.PesoBascula ||
                    PesoBascula != null &&
                    PesoBascula.Equals(other.PesoBascula)
                ) &&
                (
                    PesoArticulo == other.PesoArticulo ||
                    PesoArticulo != null &&
                    PesoArticulo.Equals(other.PesoArticulo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PesajeId != null)
                    hashCode = hashCode * 59 + PesajeId.GetHashCode();
                if (PesoBascula != null)
                    hashCode = hashCode * 59 + PesoBascula.GetHashCode();
                if (PesoArticulo != null)
                    hashCode = hashCode * 59 + PesoArticulo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PesajeResponse left, PesajeResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PesajeResponse left, PesajeResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
