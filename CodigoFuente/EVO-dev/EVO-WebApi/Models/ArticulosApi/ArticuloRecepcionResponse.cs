/*
 * API de Artículos
 *
 * API de administración de Articulos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.ArticulosApi
{
    /// <summary>
    /// Representa un artículo en recepción
    /// </summary>
    [DataContract]
    public partial class ArticuloRecepcionResponse : IEquatable<ArticuloRecepcionResponse>
    {
        /// <summary>
        /// Id del Artículo Pesaje
        /// </summary>
        /// <value>1</value>
        [DataMember(Name = "pesajeArticuloId")]
        public int PesajeArticuloId { get; set; }

        /// <summary>
        /// Id del detalle de la entrega
        /// </summary>
        /// <value>Id del detalle de la entrega</value>
        [DataMember(Name = "detalleEntregaId")]
        public int DetalleEntregaId { get; set; }

        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [DataMember(Name = "codigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Nombre del artículo
        /// </summary>
        /// <value>Nombre del artículo</value>
        [DataMember(Name = "nombreArticulo")]
        public string NombreArticulo { get; set; }

        /// <summary>
        /// Estado del artículo
        /// </summary>
        /// <value>Estado del artículo</value>
        [DataMember(Name = "estadoArticulo")]
        public string EstadoArticulo { get; set; }

        /// <summary>
        /// Cantidad solicitada
        /// </summary>
        /// <value>Cantidad solicitada</value>
        [DataMember(Name = "cantidadSolicitada")]
        public decimal CantidadSolicitada { get; set; }

        /// <summary>
        /// Cantidad aprobada
        /// </summary>
        /// <value>Cantidad aprobada</value>
        [DataMember(Name = "cantidadAprobada")]
        public decimal CantidadAprobada { get; set; }

        /// <summary>
        /// Cantidad enviada
        /// </summary>
        /// <value>Cantidad enviada</value>
        [DataMember(Name = "cantidadEnviada")]
        public decimal CantidadEnviada { get; set; }

        /// <summary>
        /// Cantidad recibida
        /// </summary>
        /// <value>Cantidad recibida</value>
        [DataMember(Name = "cantidadRecibida")]
        public decimal CantidadRecibida { get; set; }

        /// <summary>
        /// Unidad de medida
        /// </summary>
        /// <value>Unidad de medida</value>
        [DataMember(Name = "unidadMedida")]
        public string UnidadMedida { get; set; }        

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticuloRecepcionResponse {\n");
            sb.Append("  DetalleEntregaId: ").Append(DetalleEntregaId).Append("\n");
            sb.Append("  CodigoArticulo: ").Append(CodigoArticulo).Append("\n");
            sb.Append("  NombreArticulo: ").Append(NombreArticulo).Append("\n");
            sb.Append("  EstadoArticulo: ").Append(EstadoArticulo).Append("\n");
            sb.Append("  CantidadSolicitada: ").Append(CantidadSolicitada).Append("\n");
            sb.Append("  CantidadAprobada: ").Append(CantidadAprobada).Append("\n");
            sb.Append("  CantidadEnviada: ").Append(CantidadEnviada).Append("\n");
            sb.Append("  CantidadRecibida: ").Append(CantidadRecibida).Append("\n");
            sb.Append("  UnidadMedida: ").Append(UnidadMedida).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticuloRecepcionResponse)obj);
        }

        /// <summary>
        /// Returns true if ArticuloRecepcionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticuloRecepcionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticuloRecepcionResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    DetalleEntregaId == other.DetalleEntregaId ||
                    DetalleEntregaId != null &&
                    DetalleEntregaId.Equals(other.DetalleEntregaId)
                ) &&
                (
                    CodigoArticulo == other.CodigoArticulo ||
                    CodigoArticulo != null &&
                    CodigoArticulo.Equals(other.CodigoArticulo)
                ) &&
                (
                    NombreArticulo == other.NombreArticulo ||
                    NombreArticulo != null &&
                    NombreArticulo.Equals(other.NombreArticulo)
                ) &&
                (
                    EstadoArticulo == other.EstadoArticulo ||
                    EstadoArticulo != null &&
                    EstadoArticulo.Equals(other.EstadoArticulo)
                ) &&
                (
                    CantidadSolicitada == other.CantidadSolicitada ||
                    CantidadSolicitada != null &&
                    CantidadSolicitada.Equals(other.CantidadSolicitada)
                ) &&
                (
                    CantidadAprobada == other.CantidadAprobada ||
                    CantidadAprobada != null &&
                    CantidadAprobada.Equals(other.CantidadAprobada)
                ) &&
                (
                    CantidadEnviada == other.CantidadEnviada ||
                    CantidadEnviada != null &&
                    CantidadEnviada.Equals(other.CantidadEnviada)
                ) &&
                (
                    CantidadRecibida == other.CantidadRecibida ||
                    CantidadRecibida != null &&
                    CantidadRecibida.Equals(other.CantidadRecibida)
                ) &&
                (
                    UnidadMedida == other.UnidadMedida ||
                    UnidadMedida != null &&
                    UnidadMedida.Equals(other.UnidadMedida)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DetalleEntregaId != null)
                    hashCode = hashCode * 59 + DetalleEntregaId.GetHashCode();
                if (CodigoArticulo != null)
                    hashCode = hashCode * 59 + CodigoArticulo.GetHashCode();
                if (NombreArticulo != null)
                    hashCode = hashCode * 59 + NombreArticulo.GetHashCode();
                if (EstadoArticulo != null)
                    hashCode = hashCode * 59 + EstadoArticulo.GetHashCode();
                if (CantidadSolicitada != null)
                    hashCode = hashCode * 59 + CantidadSolicitada.GetHashCode();
                if (CantidadAprobada != null)
                    hashCode = hashCode * 59 + CantidadAprobada.GetHashCode();
                if (CantidadEnviada != null)
                    hashCode = hashCode * 59 + CantidadEnviada.GetHashCode();
                if (CantidadRecibida != null)
                    hashCode = hashCode * 59 + CantidadRecibida.GetHashCode();
                if (UnidadMedida != null)
                    hashCode = hashCode * 59 + UnidadMedida.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ArticuloRecepcionResponse left, ArticuloRecepcionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticuloRecepcionResponse left, ArticuloRecepcionResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
