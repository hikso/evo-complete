/*
 * API de Artículos
 *
 * API de administración de Articulos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.ArticulosApi
{
    /// <summary>
    /// Representa un artículo en el punto de venta para (facturación)
    /// </summary>
    [DataContract]
    public partial class ArticuloPuntoVentaResponse : IEquatable<ArticuloPuntoVentaResponse>
    {
        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [DataMember(Name = "codigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Nombre del artículo
        /// </summary>
        /// <value>Nombre del artículo</value>
        [DataMember(Name = "nombreArticulo")]
        public string NombreArticulo { get; set; }

        /// <summary>
        /// Stock
        /// </summary>
        /// <value>Stock</value>
        [DataMember(Name = "stock")]
        public decimal? Stock { get; set; }

        /// <summary>
        /// Unidad de medida
        /// </summary>
        /// <value>Unidad de medida</value>
        [DataMember(Name = "unidadMedida")]
        public string UnidadMedida { get; set; }

        /// <summary>
        /// Lote
        /// </summary>
        /// <value>Lote</value>
        [DataMember(Name = "lote")]
        public string Lote { get; set; }

        /// <summary>
        /// Precio unitario
        /// </summary>
        /// <value>Precio unitario</value>
        [DataMember(Name = "precioUnitario")]
        public decimal PrecioUnitario { get; set; }

        /// <summary>
        /// Código del IVA
        /// </summary>
        /// <value>Código del IVA</value>
        [DataMember(Name = "codigoIVA")]
        public string CodigoIVA { get; set; }

        /// <summary>
        /// Valor del IVA
        /// </summary>
        /// <value>Valor del IVA</value>
        [DataMember(Name = "valorIVA")]
        public decimal? ValorIVA { get; set; }

        /// <summary>
        /// Incida el código de la retención
        /// </summary>
        /// <value>Retencion</value>
        [DataMember(Name = "codigoRetencion")]
        public string CodigoRetencion { get; set; }

        /// <summary>
        /// Retencion
        /// </summary>
        /// <value>Retencion</value>
        [DataMember(Name = "retencion")]
        public decimal? ValorRetencion { get; set; }

        /// <summary>
        /// Indica la cantidad mínima para obtener el precio unitario al por mayor
        /// </summary>
        /// <value>Indica la cantidad mínima para obtener el precio unitario al por mayor</value>
        [DataMember(Name = "cantidadMinimaPrecioPorMayor")]
        public decimal? CantidadMinimaPrecioPorMayor { get; set; }

        /// <summary>
        /// Indica el precio unitario por mayor
        /// </summary>
        /// <value>Indica el precio unitario por mayor</value>
        [DataMember(Name = "precioUnitarioPorMayor")]
        public decimal? PrecioUnitarioPorMayor { get; set; }

        /// <summary>
        /// Indica los artículos que hacen parte de la transformación
        /// </summary>
        [DataMember(Name = "articulosTransformacionResponse")]
        public List<ArticuloTransformacionResponse> ArticulosTransformacionResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticuloPuntoVentaResponse {\n");
            sb.Append("  CodigoArticulo: ").Append(CodigoArticulo).Append("\n");
            sb.Append("  NombreArticulo: ").Append(NombreArticulo).Append("\n");
            sb.Append("  Stock: ").Append(Stock).Append("\n");
            sb.Append("  UnidadMedida: ").Append(UnidadMedida).Append("\n");
            sb.Append("  Lote: ").Append(Lote).Append("\n");
            sb.Append("  PrecioUnitario: ").Append(PrecioUnitario).Append("\n");
            sb.Append("  CodigoIVA: ").Append(CodigoIVA).Append("\n");
            sb.Append("  ValorIVA: ").Append(ValorIVA).Append("\n");
            sb.Append("  CodigoRetencion: ").Append(CodigoRetencion).Append("\n");
            sb.Append("  ValorRetencion: ").Append(ValorRetencion).Append("\n");
            sb.Append("  CantidadMinimaPrecioPorMayor: ").Append(CantidadMinimaPrecioPorMayor).Append("\n");
            sb.Append("  PrecioUnitarioPorMayor: ").Append(PrecioUnitarioPorMayor).Append("\n");
            sb.Append("  ArticulosTransformacionResponse: ").Append(JsonConvert.SerializeObject(ArticulosTransformacionResponse)).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticuloPuntoVentaResponse)obj);
        }

        /// <summary>
        /// Returns true if ArticuloPuntoVentaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticuloPuntoVentaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticuloPuntoVentaResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CodigoArticulo == other.CodigoArticulo ||
                    CodigoArticulo != null &&
                    CodigoArticulo.Equals(other.CodigoArticulo)
                ) &&
                (
                    NombreArticulo == other.NombreArticulo ||
                    NombreArticulo != null &&
                    NombreArticulo.Equals(other.NombreArticulo)
                ) &&
                (
                    Stock == other.Stock ||
                    Stock != null &&
                    Stock.Equals(other.Stock)
                ) &&
                (
                    UnidadMedida == other.UnidadMedida ||
                    UnidadMedida != null &&
                    UnidadMedida.Equals(other.UnidadMedida)
                ) &&
                (
                    Lote == other.Lote ||
                    Lote != null &&
                    Lote.Equals(other.Lote)
                ) &&
                (
                    PrecioUnitario == other.PrecioUnitario ||
                    PrecioUnitario != null &&
                    PrecioUnitario.Equals(other.PrecioUnitario)
                ) &&
                (
                    CodigoIVA == other.CodigoIVA ||
                    CodigoIVA != null &&
                    CodigoIVA.Equals(other.CodigoIVA)
                ) &&
                (
                    ValorIVA == other.ValorIVA ||
                    ValorIVA != null &&
                    ValorIVA.Equals(other.ValorIVA)
                ) &&
                (
                    CodigoRetencion == other.CodigoRetencion ||
                    CodigoRetencion != null &&
                    CodigoRetencion.Equals(other.CodigoRetencion)
                ) &&
                (
                    ValorRetencion == other.ValorRetencion ||
                    ValorRetencion != null &&
                    ValorRetencion.Equals(other.ValorRetencion)
                ) &&
                (
                    CantidadMinimaPrecioPorMayor == other.CantidadMinimaPrecioPorMayor ||
                    CantidadMinimaPrecioPorMayor != null &&
                    CantidadMinimaPrecioPorMayor.Equals(other.CantidadMinimaPrecioPorMayor)
                ) &&
                (
                    PrecioUnitarioPorMayor == other.PrecioUnitarioPorMayor ||
                    PrecioUnitarioPorMayor != null &&
                    PrecioUnitarioPorMayor.Equals(other.PrecioUnitarioPorMayor)
                ) &&
                (
                    ArticulosTransformacionResponse == other.ArticulosTransformacionResponse ||
                    ArticulosTransformacionResponse != null &&
                    ArticulosTransformacionResponse.Equals(other.ArticulosTransformacionResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CodigoArticulo != null)
                    hashCode = hashCode * 59 + CodigoArticulo.GetHashCode();
                if (NombreArticulo != null)
                    hashCode = hashCode * 59 + NombreArticulo.GetHashCode();
                if (Stock != null)
                    hashCode = hashCode * 59 + Stock.GetHashCode();
                if (UnidadMedida != null)
                    hashCode = hashCode * 59 + UnidadMedida.GetHashCode();
                if (Lote != null)
                    hashCode = hashCode * 59 + Lote.GetHashCode();
                if (PrecioUnitario != null)
                    hashCode = hashCode * 59 + PrecioUnitario.GetHashCode();
                if (CodigoIVA != null)
                    hashCode = hashCode * 59 + CodigoIVA.GetHashCode();
                if (ValorIVA != null)
                    hashCode = hashCode * 59 + ValorIVA.GetHashCode();
                if (CodigoRetencion != null)
                    hashCode = hashCode * 59 + CodigoRetencion.GetHashCode();
                if (ValorRetencion != null)
                    hashCode = hashCode * 59 + ValorRetencion.GetHashCode();
                if (CantidadMinimaPrecioPorMayor != null)
                    hashCode = hashCode * 59 + CantidadMinimaPrecioPorMayor.GetHashCode();
                if (PrecioUnitarioPorMayor != null)
                    hashCode = hashCode * 59 + PrecioUnitarioPorMayor.GetHashCode();
                if (ArticulosTransformacionResponse != null)
                    hashCode = hashCode * 59 + ArticulosTransformacionResponse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ArticuloPuntoVentaResponse left, ArticuloPuntoVentaResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticuloPuntoVentaResponse left, ArticuloPuntoVentaResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
