/*
 * API de Autenticación de Usuario
 *
 * API de administración de autenticación de usuario
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_WebApi.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ObtenerTodosSesionesResponseRegistros : IEquatable<ObtenerTodosSesionesResponseRegistros>
    { 
        /// <summary>
        /// Id de la sesión
        /// </summary>
        /// <value>Id de la sesión</value>
        [DataMember(Name="sesionId")]
        public string SesionId { get; set; }

        /// <summary>
        /// Indica la IP de donde se solicitó iniciar sesión
        /// </summary>
        /// <value>Indica la IP de donde se solicitó iniciar sesión</value>
        [DataMember(Name="ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Indica el token generado en el servidor
        /// </summary>
        /// <value>Indica el token generado en el servidor</value>
        [DataMember(Name="token")]
        public string Token { get; set; }

        /// <summary>
        /// Inidica el usuario al cual se le asignó la sesión
        /// </summary>
        /// <value>Inidica el usuario al cual se le asignó la sesión</value>
        [DataMember(Name="usuario")]
        public string Usuario { get; set; }

        /// <summary>
        /// Indica la fecha de inicio de la sesión del usuario
        /// </summary>
        /// <value>Indica la fecha de inicio de la sesión del usuario</value>
        [DataMember(Name="fechaInicio")]
        public string FechaInicio { get; set; }

        /// <summary>
        /// Indica la fecha de expiración de la sesión del usuario
        /// </summary>
        /// <value>Indica la fecha de expiración de la sesión del usuario</value>
        [DataMember(Name="fechaExpiracion")]
        public string FechaExpiracion { get; set; }

        /// <summary>
        /// Indica si la sesion está o no está activa
        /// </summary>
        /// <value>Indica si la sesion está o no está activa</value>
        [DataMember(Name="activa")]
        public bool Activa { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObtenerTodosSesionesResponseRegistros {\n");
            sb.Append("  SesionId: ").Append(SesionId).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  FechaInicio: ").Append(FechaInicio).Append("\n");
            sb.Append("  FechaExpiracion: ").Append(FechaExpiracion).Append("\n");
            sb.Append("  Activa: ").Append(Activa).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObtenerTodosSesionesResponseRegistros)obj);
        }

        /// <summary>
        /// Returns true if ObtenerTodosSesionesResponseRegistros instances are equal
        /// </summary>
        /// <param name="other">Instance of ObtenerTodosSesionesResponseRegistros to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObtenerTodosSesionesResponseRegistros other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SesionId == other.SesionId ||
                    SesionId != null &&
                    SesionId.Equals(other.SesionId)
                ) && 
                (
                    Ip == other.Ip ||
                    Ip != null &&
                    Ip.Equals(other.Ip)
                ) && 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) && 
                (
                    Usuario == other.Usuario ||
                    Usuario != null &&
                    Usuario.Equals(other.Usuario)
                ) && 
                (
                    FechaInicio == other.FechaInicio ||
                    FechaInicio != null &&
                    FechaInicio.Equals(other.FechaInicio)
                ) && 
                (
                    FechaExpiracion == other.FechaExpiracion ||
                    FechaExpiracion != null &&
                    FechaExpiracion.Equals(other.FechaExpiracion)
                ) && 
                (
                    Activa == other.Activa &&
                    Activa.Equals(other.Activa)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SesionId != null)
                    hashCode = hashCode * 59 + SesionId.GetHashCode();
                    if (Ip != null)
                    hashCode = hashCode * 59 + Ip.GetHashCode();
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                    if (Usuario != null)
                    hashCode = hashCode * 59 + Usuario.GetHashCode();
                    if (FechaInicio != null)
                    hashCode = hashCode * 59 + FechaInicio.GetHashCode();
                    if (FechaExpiracion != null)
                    hashCode = hashCode * 59 + FechaExpiracion.GetHashCode();                   
                    hashCode = hashCode * 59 + Activa.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ObtenerTodosSesionesResponseRegistros left, ObtenerTodosSesionesResponseRegistros right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObtenerTodosSesionesResponseRegistros left, ObtenerTodosSesionesResponseRegistros right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
