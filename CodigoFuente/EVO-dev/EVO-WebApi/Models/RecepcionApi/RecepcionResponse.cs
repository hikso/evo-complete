/*
 * API de Recepción
 *
 * API de administración de Recepción 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.RecepcionApi
{
    /// <summary>
    /// Representa la respuesta de una recepción de mercancia
    /// </summary>
    [DataContract]
    public partial class RecepcionResponse : IEquatable<RecepcionResponse>
    {
        /// <summary>
        /// Indica si existe alguna inconsistencia entre pesaje de código de barras y báscula
        /// </summary>
        /// <value>Indica si existe alguna inconsistencia entre pesaje de código de barras y báscula</value>
        [DataMember(Name = "inconsistenciaCodigoBarras")]
        public bool? InconsistenciaCodigoBarras { get; set; }

        /// <summary>
        /// Gets or Sets Documentos
        /// </summary>
        [DataMember(Name = "documentos")]
        public List<ArticuloDocumentoResponse> Documentos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecepcionResponse {\n");
            sb.Append("  InconsistenciaCodigoBarras: ").Append(InconsistenciaCodigoBarras).Append("\n");
            sb.Append("  Documentos: ").Append(Documentos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RecepcionResponse)obj);
        }

        /// <summary>
        /// Returns true if RecepcionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RecepcionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecepcionResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    InconsistenciaCodigoBarras == other.InconsistenciaCodigoBarras ||
                    InconsistenciaCodigoBarras != null &&
                    InconsistenciaCodigoBarras.Equals(other.InconsistenciaCodigoBarras)
                ) &&
                (
                    Documentos == other.Documentos ||
                    Documentos != null &&
                    Documentos.SequenceEqual(other.Documentos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (InconsistenciaCodigoBarras != null)
                    hashCode = hashCode * 59 + InconsistenciaCodigoBarras.GetHashCode();
                if (Documentos != null)
                    hashCode = hashCode * 59 + Documentos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RecepcionResponse left, RecepcionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RecepcionResponse left, RecepcionResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
