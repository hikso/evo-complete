/*
 * API de Parametrización de Clientes
 *
 * API de administración de Parametrización de Clientes 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.ClientesParametrizacionApi
{
    /// <summary>
    /// Representa las parametrizaciones del cliente
    /// </summary>
    [DataContract]
    public partial class ParametrizacionResponse : IEquatable<ParametrizacionResponse>
    {
        /// <summary>
        /// Representa la tolerancia inferior en recepción
        /// </summary>
        /// <value>Representa la tolerancia inferior en recepción</value>
        [DataMember(Name = "RecepcionToleranciaInferior")]
        public decimal? RecepcionToleranciaInferior { get; set; }

        /// <summary>
        /// Representa la tolerancia superior en recepción
        /// </summary>
        /// <value>Representa la tolerancia superior en recepción</value>
        [DataMember(Name = "RecepcionToleranciaSuperior")]
        public decimal? RecepcionToleranciaSuperior { get; set; }

        /// <summary>
        /// Representa si se hace pesaje por código de barras
        /// </summary>
        /// <value>Representa si se hace pesaje por código de barras</value>
        [DataMember(Name = "RecepcionPesajeCodigoBarras")]
        public bool? RecepcionPesajeCodigoBarras { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParametrizacionResponse {\n");
            sb.Append("  RecepcionToleranciaInferior: ").Append(RecepcionToleranciaInferior).Append("\n");
            sb.Append("  RecepcionToleranciaSuperior: ").Append(RecepcionToleranciaSuperior).Append("\n");
            sb.Append("  RecepcionPesajeCodigoBarras: ").Append(RecepcionPesajeCodigoBarras).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ParametrizacionResponse)obj);
        }

        /// <summary>
        /// Returns true if ParametrizacionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ParametrizacionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParametrizacionResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    RecepcionToleranciaInferior == other.RecepcionToleranciaInferior ||
                    RecepcionToleranciaInferior != null &&
                    RecepcionToleranciaInferior.Equals(other.RecepcionToleranciaInferior)
                ) &&
                (
                    RecepcionToleranciaSuperior == other.RecepcionToleranciaSuperior ||
                    RecepcionToleranciaSuperior != null &&
                    RecepcionToleranciaSuperior.Equals(other.RecepcionToleranciaSuperior)
                ) &&
                (
                    RecepcionPesajeCodigoBarras == other.RecepcionPesajeCodigoBarras ||
                    RecepcionPesajeCodigoBarras != null &&
                    RecepcionPesajeCodigoBarras.Equals(other.RecepcionPesajeCodigoBarras)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (RecepcionToleranciaInferior != null)
                    hashCode = hashCode * 59 + RecepcionToleranciaInferior.GetHashCode();
                if (RecepcionToleranciaSuperior != null)
                    hashCode = hashCode * 59 + RecepcionToleranciaSuperior.GetHashCode();
                if (RecepcionPesajeCodigoBarras != null)
                    hashCode = hashCode * 59 + RecepcionPesajeCodigoBarras.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ParametrizacionResponse left, ParametrizacionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ParametrizacionResponse left, ParametrizacionResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
