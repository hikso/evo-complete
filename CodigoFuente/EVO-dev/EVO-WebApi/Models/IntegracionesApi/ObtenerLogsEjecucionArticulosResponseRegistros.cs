/*
 * API de Integraciones
 *
 * API de administración de integraciones
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.IntegracionesApi
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ObtenerLogsEjecucionArticulosResponseRegistros : IEquatable<ObtenerLogsEjecucionArticulosResponseRegistros>
    {
        /// <summary>
        /// Estado de la integración
        /// </summary>
        /// <value>Estado de la integración</value>
        [DataMember(Name = "estado")]
        public bool Estado { get; set; }

        /// <summary>
        /// Indica la fecha de inicio de la integración de artículos
        /// </summary>
        /// <value>Indica la fecha de inicio de la integración de artículos</value>
        [DataMember(Name = "fechaInicio")]
        public string FechaInicio { get; set; }

        /// <summary>
        /// Indica la fecha de finalización de la integración de artículos
        /// </summary>
        /// <value>Indica la fecha de finalización de la integración de artículos</value>
        [DataMember(Name = "fechaFin")]
        public string FechaFin { get; set; }

        /// <summary>
        /// Indica el log del Job
        /// </summary>
        /// <value>Indica el log del Job</value>
        [DataMember(Name = "logJob")]
        public string LogJob { get; set; }

        /// <summary>
        /// Indica el log de la integración
        /// </summary>
        /// <value>Indica el log de la integración</value>
        [DataMember(Name = "logIntegracion")]
        public string LogIntegracion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObtenerLogsEjecucionArticulosResponseRegistros {\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  FechaInicio: ").Append(FechaInicio).Append("\n");
            sb.Append("  FechaFin: ").Append(FechaFin).Append("\n");
            sb.Append("  LogJob: ").Append(LogJob).Append("\n");
            sb.Append("  LogIntegracion: ").Append(LogIntegracion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObtenerLogsEjecucionArticulosResponseRegistros)obj);
        }

        /// <summary>
        /// Returns true if ObtenerLogsEjecucionArticulosResponseRegistros instances are equal
        /// </summary>
        /// <param name="other">Instance of ObtenerLogsEjecucionArticulosResponseRegistros to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObtenerLogsEjecucionArticulosResponseRegistros other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Estado == other.Estado &&
                    Estado.Equals(other.Estado)
                ) &&
                (
                    FechaInicio == other.FechaInicio ||
                    FechaInicio != null &&
                    FechaInicio.Equals(other.FechaInicio)
                ) &&
                (
                    FechaFin == other.FechaFin ||
                    FechaFin != null &&
                    FechaFin.Equals(other.FechaFin)
                ) &&
                (
                    LogJob == other.LogJob ||
                    LogJob != null &&
                    LogJob.Equals(other.LogJob)
                ) &&
                (
                    LogIntegracion == other.LogIntegracion ||
                    LogIntegracion != null &&
                    LogIntegracion.Equals(other.LogIntegracion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)              
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                if (FechaInicio != null)
                    hashCode = hashCode * 59 + FechaInicio.GetHashCode();
                if (FechaFin != null)
                    hashCode = hashCode * 59 + FechaFin.GetHashCode();
                if (LogJob != null)
                    hashCode = hashCode * 59 + LogJob.GetHashCode();
                if (LogIntegracion != null)
                    hashCode = hashCode * 59 + LogIntegracion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ObtenerLogsEjecucionArticulosResponseRegistros left, ObtenerLogsEjecucionArticulosResponseRegistros right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObtenerLogsEjecucionArticulosResponseRegistros left, ObtenerLogsEjecucionArticulosResponseRegistros right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
