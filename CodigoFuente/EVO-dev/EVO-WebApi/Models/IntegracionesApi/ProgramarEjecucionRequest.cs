/*
 * API de Integraciones
 *
 * API de administración de integraciones
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.IntegracionesApi
{
    /// <summary>
    /// Objeto de solicitud que contiene el estado de la programación de la integración
    /// </summary>
    [DataContract]
    public partial class ProgramarEjecucionRequest : IEquatable<ProgramarEjecucionRequest>
    {
        /// <summary>
        /// Describe el tipo de programación
        /// </summary>
        /// <value>Describe el tipo de programación</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TipoProgramacionEnum
        {
            /// <summary>
            /// Enum UnaVezADaEnum for Una_Vez_a_Día
            /// </summary>
            [EnumMember(Value = "Una_Vez_a_Día")]
            UnaVezADaEnum = 0,
            /// <summary>
            /// Enum FrecuenciaAlDaEnum for Frecuencia_al_Día
            /// </summary>
            [EnumMember(Value = "Frecuencia_al_Día")]
            FrecuenciaAlDaEnum = 1
        }

        /// <summary>
        /// Describe el tipo de programación
        /// </summary>
        /// <value>Describe el tipo de programación</value>
        [Required]
        [DataMember(Name = "tipoProgramacion")]
        public TipoProgramacionEnum TipoProgramacion { get; set; }

        /// <summary>
        /// Hora del día en que se ejecuta la integración en tipo programación una vez al día
        /// </summary>
        /// <value>Hora del día en que se ejecuta la integración en tipo programación una vez al día</value>
        [DataMember(Name = "horaEjecucionIntegracion")]
        public string HoraEjecucionIntegracion { get; set; }

        /// <summary>
        /// Minutos de frecuencia de la ejecución de la integración
        /// </summary>
        /// <value>Minutos de frecuencia de la ejecución de la integración</value>
        [DataMember(Name = "frecuencia")]
        public int? Frecuencia { get; set; }

        /// <summary>
        /// Hora del día en que se empieza la integración
        /// </summary>
        /// <value>Hora del día en que se empieza la integración</value>
        [DataMember(Name = "horaInicio")]
        public string HoraInicio { get; set; }

        /// <summary>
        /// Hora del día en que finaliza la integración
        /// </summary>
        /// <value>Hora del día en que finaliza la integración</value>
        [DataMember(Name = "horaFin")]
        public string HoraFin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProgramarEjecucionRequest {\n");
            sb.Append("  TipoProgramacion: ").Append(TipoProgramacion).Append("\n");
            sb.Append("  HoraEjecucionIntegracion: ").Append(HoraEjecucionIntegracion).Append("\n");
            sb.Append("  Frecuencia: ").Append(Frecuencia).Append("\n");
            sb.Append("  HoraInicio: ").Append(HoraInicio).Append("\n");
            sb.Append("  HoraFin: ").Append(HoraFin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProgramarEjecucionRequest)obj);
        }

        /// <summary>
        /// Returns true if ProgramarEjecucionRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ProgramarEjecucionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProgramarEjecucionRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    TipoProgramacion == other.TipoProgramacion &&
                    TipoProgramacion.Equals(other.TipoProgramacion)
                ) &&
                (
                    HoraEjecucionIntegracion == other.HoraEjecucionIntegracion ||
                    HoraEjecucionIntegracion != null &&
                    HoraEjecucionIntegracion.Equals(other.HoraEjecucionIntegracion)
                ) &&
                (
                    Frecuencia == other.Frecuencia ||
                    Frecuencia != null &&
                    Frecuencia.Equals(other.Frecuencia)
                ) &&
                (
                    HoraInicio == other.HoraInicio ||
                    HoraInicio != null &&
                    HoraInicio.Equals(other.HoraInicio)
                ) &&
                (
                    HoraFin == other.HoraFin ||
                    HoraFin != null &&
                    HoraFin.Equals(other.HoraFin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)               
                    hashCode = hashCode * 59 + TipoProgramacion.GetHashCode();
                if (HoraEjecucionIntegracion != null)
                    hashCode = hashCode * 59 + HoraEjecucionIntegracion.GetHashCode();
                if (Frecuencia != null)
                    hashCode = hashCode * 59 + Frecuencia.GetHashCode();
                if (HoraInicio != null)
                    hashCode = hashCode * 59 + HoraInicio.GetHashCode();
                if (HoraFin != null)
                    hashCode = hashCode * 59 + HoraFin.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ProgramarEjecucionRequest left, ProgramarEjecucionRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProgramarEjecucionRequest left, ProgramarEjecucionRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
