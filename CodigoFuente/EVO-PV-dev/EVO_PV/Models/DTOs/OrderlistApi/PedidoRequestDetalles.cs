/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_PV.Models.PedidosApi
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PedidoRequestDetalles : IEquatable<PedidoRequestDetalles>
    {
        /// <summary>
        /// Detalle Pedido Id
        /// </summary>
        /// <value>Detalle Pedido Id</value>      
        [DataMember(Name = "DetallePedidoId")]
        public int DetallePedidoId { get; set; }

        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [Required]
        [DataMember(Name = "ItemCode")]
        public string ItemCode { get; set; }

        /// <summary>
        /// Id del estado del pedido
        /// </summary>
        /// <value>Id del estado del pedido</value>
        [Required]
        [DataMember(Name = "EstadoArticuloId")]
        public int EstadoArticuloId { get; set; }

        /// <summary>
        /// Cantidad del artículo solicitada
        /// </summary>
        /// <value>Cantidad del artículo solicitada</value>
        [Required]
        [DataMember(Name = "Cantidad")]
        public decimal Cantidad { get; set; }

        /// <summary>
        /// Observación
        /// </summary>
        /// <value></value>      
        [DataMember(Name = "Observacion")]
        public string Observacion { get; set; }

        /// <summary>
        /// Id del empaque
        /// </summary>
        /// <value>1</value>
        [Required]
        [DataMember(Name = "EmpaqueId")]
        public int EmpaqueId { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PedidoRequestDetalles {\n");
            sb.Append("  ItemCode: ").Append(ItemCode).Append("\n");
            sb.Append("  EstadoArticuloId: ").Append(EstadoArticuloId).Append("\n");
            sb.Append("  Cantidad: ").Append(Cantidad).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PedidoRequestDetalles)obj);
        }

        /// <summary>
        /// Returns true if PedidoRequestDetalles instances are equal
        /// </summary>
        /// <param name="other">Instance of PedidoRequestDetalles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PedidoRequestDetalles other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ItemCode == other.ItemCode ||
                    ItemCode != null &&
                    ItemCode.Equals(other.ItemCode)
                ) &&
                (
                    EstadoArticuloId == other.EstadoArticuloId &&
                    EstadoArticuloId.Equals(other.EstadoArticuloId)
                ) &&
                (
                    Cantidad == other.Cantidad &&
                    Cantidad.Equals(other.Cantidad)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (ItemCode != null)
                    hashCode = hashCode * 59 + ItemCode.GetHashCode();
                hashCode = hashCode * 59 + EstadoArticuloId.GetHashCode();

                hashCode = hashCode * 59 + Cantidad.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PedidoRequestDetalles left, PedidoRequestDetalles right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PedidoRequestDetalles left, PedidoRequestDetalles right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
