/*
 * API de Alistamiento
 *
 * API de administración de Alistamiento 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_PV.Models.AlistamientosApi
{
    /// <summary>
    /// Representa una solicitud de pesaje de báscula
    /// </summary>
    [DataContract]
    public partial class PesajeBasculaRequest : IEquatable<PesajeBasculaRequest>
    {
        /// <summary>
        /// Id del detalle de la entrega
        /// </summary>
        /// <value>Id del detalle de la entrega</value>
        [DataMember(Name = "detalleEntregaId")]
        public int DetalleEntregaId { get; set; }

        /// <summary>
        /// Id del tipo de la báscula
        /// </summary>
        /// <value>Id del tipo de la báscula</value>
        [DataMember(Name = "tipoBasculaId")]
        public int TipoBasculaId { get; set; }

        /// <summary>
        /// Código de la bodega donde será sacado el artículo
        /// </summary>
        /// <value>Código de la bodega donde será sacado el artículo</value>
        [DataMember(Name = "codigoBodega")]
        public string CodigoBodega { get; set; }

        /// <summary>
        /// Peso de la báscula
        /// </summary>
        /// <value>Peso de la báscula</value>
        [DataMember(Name = "pesoBascula")]
        public decimal PesoBascula { get; set; }

        /// <summary>
        /// Peso de la báscula
        /// </summary>
        /// <value>Peso de la báscula</value>
        [DataMember(Name = "pesoArticulos")]
        public decimal PesoArticulos { get; set; }

        /// <summary>
        /// Gets or Sets ContenedoresRequest
        /// </summary>
        [DataMember(Name = "contenedoresRequest")]
        public List<PesajeContenedorRequest> ContenedoresRequest { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PesajeBasculaRequest {\n");
            sb.Append("  DetalleEntregaId: ").Append(DetalleEntregaId).Append("\n");
            sb.Append("  TipoBasculaId: ").Append(TipoBasculaId).Append("\n");
            sb.Append("  CodigoBodega: ").Append(CodigoBodega).Append("\n");
            sb.Append("  PesoArticulos: ").Append(PesoArticulos).Append("\n");
            sb.Append("  ContenedoresRequest: ").Append(ContenedoresRequest).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PesajeBasculaRequest)obj);
        }

        /// <summary>
        /// Returns true if PesajeBasculaRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PesajeBasculaRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PesajeBasculaRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    DetalleEntregaId == other.DetalleEntregaId ||
                    DetalleEntregaId != null &&
                    DetalleEntregaId.Equals(other.DetalleEntregaId)
                ) &&
                (
                    TipoBasculaId == other.TipoBasculaId ||
                    TipoBasculaId != null &&
                    TipoBasculaId.Equals(other.TipoBasculaId)
                ) &&
                (
                    CodigoBodega == other.CodigoBodega ||
                    CodigoBodega != null &&
                    CodigoBodega.Equals(other.CodigoBodega)
                ) &&
                (
                    PesoBascula == other.PesoBascula ||
                    PesoBascula != null &&
                    PesoBascula.Equals(other.PesoBascula)
                ) &&
                (
                    PesoArticulos == other.PesoArticulos ||
                    PesoArticulos != null &&
                    PesoArticulos.Equals(other.PesoArticulos)
                )
                &&
                (
                    ContenedoresRequest == other.ContenedoresRequest ||
                    ContenedoresRequest != null &&
                    ContenedoresRequest.SequenceEqual(other.ContenedoresRequest)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DetalleEntregaId != null)
                    hashCode = hashCode * 59 + DetalleEntregaId.GetHashCode();
                if (TipoBasculaId != null)
                    hashCode = hashCode * 59 + TipoBasculaId.GetHashCode();
                if (CodigoBodega != null)
                    hashCode = hashCode * 59 + CodigoBodega.GetHashCode();
                if (PesoArticulos != null)
                    hashCode = hashCode * 59 + PesoArticulos.GetHashCode();
                if (PesoBascula != null)
                    hashCode = hashCode * 59 + PesoBascula.GetHashCode();
                if (ContenedoresRequest != null)
                    hashCode = hashCode * 59 + ContenedoresRequest.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PesajeBasculaRequest left, PesajeBasculaRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PesajeBasculaRequest left, PesajeBasculaRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
