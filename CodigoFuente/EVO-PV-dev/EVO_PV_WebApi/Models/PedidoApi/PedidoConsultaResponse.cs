/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_PV_WebApi.Models.PedidoApi
{
    /// <summary>
    /// Detalle de un pedido
    /// </summary>B
    [DataContract]
    public partial class PedidoConsultaResponse : IEquatable<PedidoConsultaResponse>
    {
        /// <summary>
        /// Tipo de solicitud
        /// </summary>
        /// <value>Tipo de solicitud</value>
        [DataMember(Name = "tipoSolicitud")]
        public string TipoSolicitud { get; set; }

        /// <summary>
        /// Número pedido
        /// </summary>
        /// <value>Número pedido</value>
        [DataMember(Name = "numeroPedido")]
        public string NumeroPedido { get; set; }

        /// <summary>
        /// Estado pedido
        /// </summary>
        /// <value>Estado pedido</value>
        [DataMember(Name = "estadoPedido")]
        public string EstadoPedido { get; set; }

        /// <summary>
        /// Fecha Cargue Vehiculo
        /// </summary>
        /// <value>Fecha Cargue Vehiculo</value>
        [DataMember(Name = "fechaCargueVehiculo")]
        public string FechaCargueVehiculo { get; set; }

        /// <summary>
        /// Nombre del conductor
        /// </summary>
        /// <value>Nombre del conductor</value>
        [DataMember(Name = "nombreConductor")]
        public string NombreConductor { get; set; }

        /// <summary>
        /// Fecha de solicitud
        /// </summary>
        /// <value>Fecha de solicitud</value>
        [DataMember(Name = "fechaSolicitud")]
        public string FechaSolicitud { get; set; }

        /// <summary>
        /// Hora estimada entrega
        /// </summary>
        /// <value>Hora estimada entrega</value>
        [DataMember(Name = "horaEstimadaEntrega")]
        public string HoraEstimadaEntrega { get; set; }

        /// <summary>
        /// Placa del vehiculo
        /// </summary>
        /// <value>Placa del vehiculo</value>
        [DataMember(Name = "vehiculo")]
        public string Vehiculo { get; set; }

        /// <summary>
        /// nombre del auxiliar
        /// </summary>
        /// <value>nombre del auxiliar</value>
        [DataMember(Name = "auxiliar")]
        public string Auxiliar { get; set; }

        /// <summary>
        /// Fecha limite sugerida
        /// </summary>
        /// <value>Fecha limite sugerida</value>
        [DataMember(Name = "fechaLimiteSugerida")]
        public string FechaLimiteSugerida { get; set; }

        /// <summary>
        /// Planeación de entregas
        /// </summary>
        /// <value>Planeación de entregas</value>
        [DataMember(Name = "planeacionEntrega")]
        public string PlaneacionEntrega { get; set; }

        /// <summary>
        /// Fecha entrega
        /// </summary>
        /// <value>Fecha entrega</value>
        [DataMember(Name = "fechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Solicitud A
        /// </summary>
        /// <value>Solicitud A</value>
        [DataMember(Name = "solicitudA")]
        public string SolicitudA { get; set; }

        /// <summary>
        /// Cancelar pedido
        /// </summary>
        /// <value>true</value>
        [DataMember(Name = "cancelarPedido")]
        public bool CancelarPedido { get; set; }

        /// <summary>
        /// Lista de registros de Pedidos
        /// </summary>
        /// <value>Lista de registros de Pedidos</value>
        [DataMember(Name = "articulos")]
        public List<ArticuloConsultaResponse> Articulos { get; set; }

        /// <summary>
        /// Acciones de compras asociadas a los artículos del pedido
        /// </summary>
        /// <value>Acciones de compras asociadas a los artículos del pedido</value>
        [DataMember(Name = "acciones")]
        public List<AccionCompraResponse> Acciones { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PedidoConsultaResponse {\n");
            sb.Append("  TipoSolicitud: ").Append(TipoSolicitud).Append("\n");
            sb.Append("  NumeroPedido: ").Append(NumeroPedido).Append("\n");
            sb.Append("  EstadoPedido: ").Append(EstadoPedido).Append("\n");
            sb.Append("  FechaCargueVehiculo: ").Append(FechaCargueVehiculo).Append("\n");
            sb.Append("  NombreConductor: ").Append(NombreConductor).Append("\n");
            sb.Append("  FechaSolicitud: ").Append(FechaSolicitud).Append("\n");
            sb.Append("  HoraEstimadaEntrega: ").Append(HoraEstimadaEntrega).Append("\n");
            sb.Append("  Vehiculo: ").Append(Vehiculo).Append("\n");
            sb.Append("  Auxiliar: ").Append(Auxiliar).Append("\n");
            sb.Append("  FechaLimiteSugerida: ").Append(FechaLimiteSugerida).Append("\n");
            sb.Append("  PlaneacionEntrega: ").Append(PlaneacionEntrega).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  SolicitudA: ").Append(SolicitudA).Append("\n");
            sb.Append("  Articulos: ").Append(Articulos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PedidoConsultaResponse)obj);
        }

        /// <summary>
        /// Returns true if PedidoConsultaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PedidoConsultaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PedidoConsultaResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    TipoSolicitud == other.TipoSolicitud ||
                    TipoSolicitud != null &&
                    TipoSolicitud.Equals(other.TipoSolicitud)
                ) &&
                (
                    NumeroPedido == other.NumeroPedido ||
                    NumeroPedido != null &&
                    NumeroPedido.Equals(other.NumeroPedido)
                ) &&
                (
                    EstadoPedido == other.EstadoPedido ||
                    EstadoPedido != null &&
                    EstadoPedido.Equals(other.EstadoPedido)
                ) &&
                (
                    FechaCargueVehiculo == other.FechaCargueVehiculo ||
                    FechaCargueVehiculo != null &&
                    FechaCargueVehiculo.Equals(other.FechaCargueVehiculo)
                ) &&
                (
                    NombreConductor == other.NombreConductor ||
                    NombreConductor != null &&
                    NombreConductor.Equals(other.NombreConductor)
                ) &&
                (
                    FechaSolicitud == other.FechaSolicitud ||
                    FechaSolicitud != null &&
                    FechaSolicitud.Equals(other.FechaSolicitud)
                ) &&
                (
                    HoraEstimadaEntrega == other.HoraEstimadaEntrega ||
                    HoraEstimadaEntrega != null &&
                    HoraEstimadaEntrega.Equals(other.HoraEstimadaEntrega)
                ) &&
                (
                    Vehiculo == other.Vehiculo ||
                    Vehiculo != null &&
                    Vehiculo.Equals(other.Vehiculo)
                ) &&
                (
                    Auxiliar == other.Auxiliar ||
                    Auxiliar != null &&
                    Auxiliar.Equals(other.Auxiliar)
                ) &&
                (
                    FechaLimiteSugerida == other.FechaLimiteSugerida ||
                    FechaLimiteSugerida != null &&
                    FechaLimiteSugerida.Equals(other.FechaLimiteSugerida)
                ) &&
                (
                    PlaneacionEntrega == other.PlaneacionEntrega ||
                    PlaneacionEntrega != null &&
                    PlaneacionEntrega.Equals(other.PlaneacionEntrega)
                ) &&
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) &&
                (
                    SolicitudA == other.SolicitudA ||
                    SolicitudA != null &&
                    SolicitudA.Equals(other.SolicitudA)
                ) &&
                (
                    Articulos == other.Articulos ||
                    Articulos != null &&
                    Articulos.SequenceEqual(other.Articulos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (TipoSolicitud != null)
                    hashCode = hashCode * 59 + TipoSolicitud.GetHashCode();
                if (NumeroPedido != null)
                    hashCode = hashCode * 59 + NumeroPedido.GetHashCode();
                if (EstadoPedido != null)
                    hashCode = hashCode * 59 + EstadoPedido.GetHashCode();
                if (FechaCargueVehiculo != null)
                    hashCode = hashCode * 59 + FechaCargueVehiculo.GetHashCode();
                if (NombreConductor != null)
                    hashCode = hashCode * 59 + NombreConductor.GetHashCode();
                if (FechaSolicitud != null)
                    hashCode = hashCode * 59 + FechaSolicitud.GetHashCode();
                if (HoraEstimadaEntrega != null)
                    hashCode = hashCode * 59 + HoraEstimadaEntrega.GetHashCode();
                if (Vehiculo != null)
                    hashCode = hashCode * 59 + Vehiculo.GetHashCode();
                if (Auxiliar != null)
                    hashCode = hashCode * 59 + Auxiliar.GetHashCode();
                if (FechaLimiteSugerida != null)
                    hashCode = hashCode * 59 + FechaLimiteSugerida.GetHashCode();
                if (PlaneacionEntrega != null)
                    hashCode = hashCode * 59 + PlaneacionEntrega.GetHashCode();
                if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                if (SolicitudA != null)
                    hashCode = hashCode * 59 + SolicitudA.GetHashCode();
                if (Articulos != null)
                    hashCode = hashCode * 59 + Articulos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PedidoConsultaResponse left, PedidoConsultaResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PedidoConsultaResponse left, PedidoConsultaResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
