/*
 * API de Integraciones
 *
 * API de administración de integraciones
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.IntegracionesApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class IntegracionesApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        /// <summary>
        /// Ejecuta la integración de los artículos de SAP
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/sap/articulos/ejecutar")]
        [ValidateModelState]
        [SwaggerOperation("EjecutarSAPArticulos")]
        public virtual IActionResult EjecutarSAPArticulos()
        {
            try
            {
                BLIntegracion bLIntegraciones = new BLIntegracion();

                bLIntegraciones.IniciarSAPArticulos();

                return Ok();
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Habilita / deshabilta la integración de productos
        /// </summary>
        /// <param name="body">Solicitud de la habilitación / deshabilitación de la integración</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/sap/articulos/habilitar")]
        [ValidateModelState]
        [SwaggerOperation("HabilitarSAPArticulos")]
        public virtual IActionResult HabilitarSAPArticulos([FromBody]HabilitarIntegracionRequest body)
        {
            try
            {
                HabilitarEjecucionIntegracionSolicitud habilitarEjecucionIntegracionSolicitud =
                    this.mapper.Map<HabilitarIntegracionRequest, HabilitarEjecucionIntegracionSolicitud>(body);

                BLIntegracion bLIntegraciones = new BLIntegracion();

                bLIntegraciones.HabilitarSAPArticulos(habilitarEjecucionIntegracionSolicitud);

                return Ok();
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene el estado de la ejecución de la integraciónes de artículos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/sap/articulos/estado")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEstadoEjecucionArticulos")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerEstadoEjecucionArticulosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEstadoEjecucionArticulos()
        {
            try
            {
                BLIntegracion bLIntegraciones = new BLIntegracion();

                EstadoEjecucionIntegracionRespuesta estadoEjecucionIntegracionRespuesta =
                     bLIntegraciones.ObtenerEstadoEjecucionArticulos();

                ObtenerEstadoEjecucionArticulosResponse obtenerEstadoEjecucionArticulosResponse =
                    this.mapper.Map<EstadoEjecucionIntegracionRespuesta, ObtenerEstadoEjecucionArticulosResponse>(estadoEjecucionIntegracionRespuesta);

                return Ok(obtenerEstadoEjecucionArticulosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los logs de ejecución de las integraciónes de artículos aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de integraciones de artículos. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/sap/log/articulos/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerLogsEjecucionArticulosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerLogsEjecucionArticulosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerLogsEjecucionArticulosxFiltro([FromBody]FiltrarLogsEjecucionArticulosRequest body)
        {
            try
            {
                BLIntegracion bLIntegraciones = new BLIntegracion();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerLogsEjecucionArticulosResponse obtenerLogsEjecucionArticulosResponse = new ObtenerLogsEjecucionArticulosResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerLogsEjecucionArticulosResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerLogsEjecucionArticulosResponseRegistros> logsEjecucionArticulosResponseRegistros = new List<ObtenerLogsEjecucionArticulosResponseRegistros>();

                FiltroIntegracion filtroIntegracion = this.mapper.Map<FiltrarLogsEjecucionArticulosRequest, FiltroIntegracion>(body);

                List<LogIntegracionRespuesta> logIntegracionesRespuestas = bLIntegraciones.ObtenerLogsEjecucionArticulosxFiltro(filtroIntegracion);

                if (logIntegracionesRespuestas != null)
                {
                    //Se implementa el automapeo
                    logsEjecucionArticulosResponseRegistros =
                        this.mapper.Map<List<LogIntegracionRespuesta>, List<ObtenerLogsEjecucionArticulosResponseRegistros>>(logIntegracionesRespuestas);

                }

                obtenerLogsEjecucionArticulosResponse.NumeroTotalRegistros = logsEjecucionArticulosResponseRegistros.Count;
                obtenerLogsEjecucionArticulosResponse.Registros = logsEjecucionArticulosResponseRegistros;

                return Ok(obtenerLogsEjecucionArticulosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los logs de ejecución de las integraciónes de artículos
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/sap/log/articulos")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerlogsEjecucionArticulos")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerLogsEjecucionArticulosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerlogsEjecucionArticulos([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta)
        {
            try
            {
                BLIntegracion bLIntegraciones = new BLIntegracion();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerLogsEjecucionArticulosResponse obtenerLogsEjecucionArticulosResponse = new ObtenerLogsEjecucionArticulosResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<LogIntegracionRespuesta> logsIntegracionesRespuestas = bLIntegraciones.ObtenerlogsEjecucionArticulos(desde, hasta);

                int numeroTotalRegistros = bLIntegraciones.ObtenerConteoTodosRegistros();

                obtenerLogsEjecucionArticulosResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerLogsEjecucionArticulosResponse.TamanhoPaginacion = tamanhoPaginacion;

                obtenerLogsEjecucionArticulosResponse.Registros = this.mapper.Map<List<LogIntegracionRespuesta>, List<ObtenerLogsEjecucionArticulosResponseRegistros>>(logsIntegracionesRespuestas);

                return Ok(obtenerLogsEjecucionArticulosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch (Exception e)
            {
                logger.Error(e.Message);

                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Programa la ejecucion diaria de la integración de artículos de SAP a EVO
        /// </summary>
        /// <param name="body">Solicitud de la programación de la integración</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/sap/articulos/programar")]
        [ValidateModelState]
        [SwaggerOperation("ProgramarArticulos")]
        public virtual IActionResult ProgramarArticulos([FromBody]ProgramarEjecucionRequest body)
        {
            try
            {
                ProgramarEjecucionIntegracionSolicitud programarEjecucionIntegracionSolicitud =
                    this.mapper.Map<ProgramarEjecucionRequest, ProgramarEjecucionIntegracionSolicitud>(body);

                BLIntegracion bLIntegraciones = new BLIntegracion();

                bLIntegraciones.ProgramarSAPArticulos(programarEjecucionIntegracionSolicitud);

                return Ok(StatusCodes.Status200OK);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public IntegracionesApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion

    }
}
