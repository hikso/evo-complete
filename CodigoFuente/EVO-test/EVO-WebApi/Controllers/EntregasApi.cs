/*
 * API de Entregas
 *
 * API de administración de Entregas 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.EntregasApi;
using EVO_WebApi.Models.PedidosApi;  
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class EntregasApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos
        /// <summary>
        /// Obtiene las entregas por pedidoId
        /// </summary>
        /// <param name="pedidoId">Indica el id del pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/entregas/pedidoid")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEntregasxPedidoId")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Models.EntregasApi.EntregaResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEntregasxPedidoId([FromQuery][Required()]int pedidoId)
        {
            logger.Info($"Entró al método ObtenerEntregasxPedidoId en Api Pedidos con el parámetro pedidoId = {pedidoId}");

            try
            {
                BLEntrega blEntregas = new BLEntrega();

                List<EntregaRespuesta> entregasRespuesta =
                    blEntregas.ObtenerEntregasxPedidoId(pedidoId);

                List<Models.EntregasApi.EntregaResponse> entregasResponse =
                    this.mapper.Map<List<EntregaRespuesta>, List<Models.EntregasApi.EntregaResponse>>(entregasRespuesta);

                return Ok(entregasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los registros de las entregas de los pedidos en enrutamiento
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/entregas/enrutamiento")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosEntregasEnrutamiento")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosEntregasEnrutamientoResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosEntregasEnrutamiento([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta)
        {
            logger.Info($"Entró al método ObtenerTodosEntregasEnrutamiento con los parámetros Desde: {desde} Hasta: {hasta}");

            try
            {
                var userName = HttpContext.User.Identity.Name;

                BLEntrega bLEntregas = new BLEntrega();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosEntregasEnrutamientoResponse entregasResponse = new ObtenerTodosEntregasEnrutamientoResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<EntregaEnrutamientoRespuesta> entregas = bLEntregas.ObtenerTodosEntregasEnrutamiento(desde, hasta);

                int numeroTotalRegistros = bLEntregas.ObtenerConteoTodosEntregasEnrutamiento();

                entregasResponse.NumeroTotalRegistros = numeroTotalRegistros;
                entregasResponse.TamanhoPaginacion = tamanhoPaginacion;

                entregasResponse.Registros = this.mapper.Map<List<EntregaEnrutamientoRespuesta>, List<ObtenerTodosEntregasEnrutamientoResponseRegistros>>(entregas);

                return Ok(entregasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// edita un artículo asociado a una entrega en el módulo de distribución
        /// </summary>
        /// <param name="body">Referencia del body al modelo EliminarArticuloDistribucionRequest</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPut]
        [Route("/api/entregas/articulos/eliminar")]
        [ValidateModelState]
        [SwaggerOperation("EliminarArticuloDistribucion")]
        public virtual IActionResult EliminarArticuloDistribucion([FromBody]EliminarArticuloDistribucionRequest body)
        {
            logger.Info($"Entró al método EliminarArticuloDistribucion en Api EntregasApi con los parámetros {JsonConvert.SerializeObject(body)}");

            try
            {
                EliminarArticuloDistribucion eliminarArticuloDistribucion = this.mapper.Map<EliminarArticuloDistribucionRequest, EliminarArticuloDistribucion>(body);

                BLEntrega bLEntregas = new BLEntrega();

                return Ok(bLEntregas.EliminarArticuloDistribucion(eliminarArticuloDistribucion));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los artículos que no están en esta entrega
        /// </summary>
        /// <param name="entregaId">Indica el id de la entrega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/entregas/articulos/pendientes")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerArticulosPendientes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ArticuloPendienteResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerArticulosPendientes([FromQuery][Required()]int entregaId)
        {
            logger.Info($"Entró al método ObtenerArticulosPendientes en Api Pedidos con el parámetro entregaId = {entregaId}");

            try
            {
                BLEntrega blEntregas = new BLEntrega();

                List<ArticuloPendienteRespuesta> articulosPendientesRespuesta =
                    blEntregas.ObtenerArticulosPendientes(entregaId);

                List<ArticuloPendienteResponse> respuesta =
                    this.mapper.Map<List<ArticuloPendienteRespuesta>, List<ArticuloPendienteResponse>>(articulosPendientesRespuesta);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        } 
        #endregion

        #region Constructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public EntregasApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion
    }

}
