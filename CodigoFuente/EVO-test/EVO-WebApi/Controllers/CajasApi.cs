/*
 * API de    API de administración de Cajas
 *
 * API de administración de Cajas 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.CajasApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CajasApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos
        /// <summary>
        /// Registrar la apertura de caja
        /// </summary>
        /// <param name="body">Solicitud para el registro de la apertura de caja</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/caja/apertura")]
        [ValidateModelState]
        [SwaggerOperation("AsignarAperturaCaja")]
        public virtual IActionResult AsignarAperturaCaja([FromBody]AperturaCajaRequest body)
        {
            logger.Info($"Entró al método AsignarAperturaCaja en CajasApi con los parámetros = {JsonConvert.SerializeObject(body)}");

            try
            {
                BOAperturaCajaRequest bOAperturaCajaRequest = this.mapper.Map<AperturaCajaRequest, BOAperturaCajaRequest>(body);

                if (HttpContext.User.Identity != null)
                {
                    bOAperturaCajaRequest.Usuario = HttpContext.User.Identity.Name;
                }

                string IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (IP.Equals("::1"))
                {
                    IP = "127.0.0.1";
                }

                bOAperturaCajaRequest.IP = IP;

                BLCajas bLCajas = new BLCajas();

                return Ok(bLCajas.AsignarAperturaCaja(bOAperturaCajaRequest));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene el estado de la apertura de caja por punto de venta
        /// </summary>
        /// <param name="codigoPuntoVenta">Indica el código del punto de venta</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/caja/apertura")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerAperturaCaja")]
        [SwaggerResponse(statusCode: 200, type: typeof(AperturaCajaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerAperturaCaja([FromQuery][Required()]string codigoPuntoVenta)
        {
            logger.Info($"Entró al método ObtenerAperturaCaja en CajasApi con el parámetro = {codigoPuntoVenta}");

            try
            {
                string IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (IP.Equals("::1"))
                {
                    IP = "127.0.0.1";
                }

                BLCajas bLCajas = new BLCajas();

                BOAperturaCajaResponse bOAperturaCajaResponse = bLCajas.ObtenerAperturaCaja(codigoPuntoVenta, IP);

                AperturaCajaResponse aperturaCajaResponse = this.mapper.Map<BOAperturaCajaResponse, AperturaCajaResponse>(bOAperturaCajaResponse);

                return Ok(aperturaCajaResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene el estado de caja por punto de venta
        /// </summary>
        /// <param name="codigoPuntoVenta">Indica el código del punto de venta</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/caja/estadocaja")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEstadoCaja")]
        [SwaggerResponse(statusCode: 200, type: typeof(EstadoCajaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEstadoCaja([FromQuery][Required()]string codigoPuntoVenta)
        {
            logger.Info($"Entró al método ObtenerEstadoCaja en CajasApi con el parámetro = {codigoPuntoVenta}");

            try
            {
                string IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (IP.Equals("::1"))
                {
                    IP = "127.0.0.1";
                }

                BLCajas bLCajas = new BLCajas();

                BOEstadoCajaResponse bOEstadoCajaResponse = bLCajas.ObtenerEstadoCaja(codigoPuntoVenta, IP);

                EstadoCajaResponse aperturaCajaResponse = this.mapper.Map<BOEstadoCajaResponse, EstadoCajaResponse>(bOEstadoCajaResponse);

                return Ok(aperturaCajaResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public CajasApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }

        #endregion
    }
}
