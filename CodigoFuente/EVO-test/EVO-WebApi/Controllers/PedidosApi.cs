/*;
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.PedidosApi;
using EVO_WebApi.Resources;
using IO.Swagger.Models.PedidosApi;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class PedidosApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos Públicos


        /// <summary>
        /// cargar archivos
        /// </summary>
        /// <param name="body">Solicitud para el registro de la evidencia</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/cargarArchivo")]
        [ValidateModelState]
        [SwaggerOperation("CargarArchivo")]
        public virtual IActionResult CargarArchivo([FromBody]CargarArchivoRequest body)
        {
            logger.Info($"Entró al método CargarArchivo en PedidoApi con los parámetros = {JsonConvert.SerializeObject(body)}");

            try
            {
                BOCargarArchivoRequest bOArchivoRequest = this.mapper.Map<CargarArchivoRequest, BOCargarArchivoRequest>(body);               

                BLPedido bLPedido = new BLPedido();

                return Ok(bLPedido.CargarArchivoCanales(bOArchivoRequest));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// eliminar archivos
        /// </summary>
        /// <param name="body">Solicitud para el eliminar el archivo de carga</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]       
        [Route("/api/pedidos/eliminarArchivo")]
        [ValidateModelState]
        [SwaggerOperation("EliminarArchivo")]
        public virtual IActionResult EliminarArchivo([FromBody]EliminarArchivoRequest body)
        {
            logger.Info($"Entró al método eliminar Archivo en PedidoApi con los parámetros = {JsonConvert.SerializeObject(body)}");

            try
            {
                BOCargarArchivoRequest bOEliminarRequest = this.mapper.Map<EliminarArchivoRequest, BOCargarArchivoRequest>(body);

                BLPedido bLPedido = new BLPedido();

                return Ok(bLPedido.EliminarArchivoCanales(bOEliminarRequest));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }


        /// <summary>
        /// Asigna un pedido en comercial como borrador(Abierto).
        /// </summary>
        /// <param name="body">Solicitud de una actualización a pedido en comercial traslado</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/comercial/traslado/borrador")]
        [ValidateModelState]
        [SwaggerOperation("AsignarComercialTrasladoBorrado")]
        public virtual IActionResult AsignarComercialTrasladoBorrado([FromBody] PedidoTrasladoRequest body)
        {
            logger.Info(string.Format("Entró al método AsignarComercialTrasladoBorrado - EVO - Api - con los parámetros {0}",
            JsonConvert.SerializeObject(body)));

            try
            {                

                BOPedidoTrasladoRequest pedido = this.mapper.Map<PedidoTrasladoRequest, BOPedidoTrasladoRequest>(body);

                BLPedido bLPedidos = new BLPedido();

                if (HttpContext.User.Identity != null)
                {
                    pedido.Usuario = HttpContext.User.Identity.Name;
                }

                return Ok(bLPedidos.AsignarComercialTrasladoBorrado(pedido));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Retorna el detalle del pedido de tipo compra a gestionar
        /// </summary>
        /// <param name="pedidoId">Indica el id del pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/compra/gestion")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidoCompraGestion")]
        [SwaggerResponse(statusCode: 200, type: typeof(PedidoCompraGestionResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidoCompraGestion([FromQuery][Required()] int pedidoId)
        {
            logger.Info($"Entró al método ObtenerPedidoCompraGestion con el parámetro pedidoId = {pedidoId}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                BOPedidoCompraGestionResponse pedido = bLPedidos.ObtenerPedidoCompraGestion(pedidoId);

                pedido.Articulos = pedido.Articulos.Where(a => a.Incluir).ToList();

                PedidoCompraGestionResponse pedidoCompraGestionResponse =               
                    this.mapper.Map<BOPedidoCompraGestionResponse, PedidoCompraGestionResponse>(pedido);
                
                return Ok(pedidoCompraGestionResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de pedidos de tipo solicitud compra con o sin filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de pedidos compra . Si no se ingresa ninguno de los criterios del filtro retorna todo</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/compra/abierto/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidosCompraAbiertoxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerPedidosCompraResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidosCompraAbiertoxFiltro([FromBody] FiltrarPedidoCompraRequest body)
        {
            logger.Info(string.Format("Entró al método ObtenerPedidosCompraAbiertoxFiltro con los parámetros {0}",
             JsonConvert.SerializeObject(body)));

            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerPedidosCompraResponse obtenerPedidosCompraResponse = new ObtenerPedidosCompraResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerPedidosCompraResponse.TamanhoPaginacion = tamanhoPaginacion;

                BOFiltrarPedidoCompraRequest filtro = this.mapper.Map<FiltrarPedidoCompraRequest, BOFiltrarPedidoCompraRequest>(body);

                List<BOObtenerPedidosCompraResponseRegistros> pedidos = bLPedidos.ObtenerPedidosCompraAbiertoxFiltro(filtro);

                List<ObtenerPedidosCompraResponseRegistros> obtenerPedidosCompraResponseRegistros =
                    new List<ObtenerPedidosCompraResponseRegistros>();              

                if (pedidos != null)
                {
                    obtenerPedidosCompraResponseRegistros =
                        this.mapper.Map<List<BOObtenerPedidosCompraResponseRegistros>, List<ObtenerPedidosCompraResponseRegistros>>(pedidos);
                }

                obtenerPedidosCompraResponse.NumeroTotalRegistros = bLPedidos.ObtenerConteoPedidosCompraAbiertoxFiltro(filtro);
                obtenerPedidosCompraResponse.Registros = obtenerPedidosCompraResponseRegistros;

                return Ok(obtenerPedidosCompraResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Cancelar un pedido
        /// </summary>
        /// <param name="body">Solicitud de cancelación de pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/pedido/cancelar")]
        [ValidateModelState]
        [SwaggerOperation("CancelarPedido")]
        public virtual IActionResult CancelarPedido([FromBody]CancelarPedidoRequest body)
        {
            logger.Info($"Entró al método CancelarPedido en EVO_WebApi con los parametros body = {JsonConvert.SerializeObject(body)}");

            try
            {
                BLPedido pedidoBL = new BLPedido();

                BOCancelarPedidoRequest cancelar = this.mapper.Map<CancelarPedidoRequest, BOCancelarPedidoRequest>(body);

                bool respuesta = pedidoBL.CancelarPedido(cancelar);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Editar un pedido
        /// </summary>
        /// <param name="body">Solicitud de edición de pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/pedido/editar")]
        [ValidateModelState]
        [SwaggerOperation("EditarPedido")]
        public virtual IActionResult EditarPedido([FromBody] EditarPedidoRequest body)
        {
            logger.Info($"Entró al método EditarPedido en EVO_WebApi con los parametros body = {JsonConvert.SerializeObject(body)}");

            try
            {
                BLPedido bLPedido = new BLPedido();

                BOEditarPedidoRequest boPedido = this.mapper.Map<EditarPedidoRequest, BOEditarPedidoRequest>(body);

                string respuesta = bLPedido.EditarPedido(boPedido);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Retorna el detalle del pedido
        /// </summary>
        /// <param name="pedidoId"></param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/consulta/pedido")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerConsultaPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(PedidoConsultaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerConsultaPedido([FromQuery][Required()] int pedidoId)
        {
            try
            {
                logger.Info($"Entró el método ObtenerConsultaPedido en EVO-WebApi con el parametro pedidoId = {pedidoId}");

                BLPedido bLPedido = new BLPedido();

                BOPedidoConsultaResponse boPedido = bLPedido.ObtenerConsultaPedido(pedidoId);

                PedidoConsultaResponse pedido = this.mapper.Map<BOPedidoConsultaResponse, PedidoConsultaResponse>(boPedido);

                return Ok(pedido);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        //TODO:Implementar el .yaml
        /// <summary>
        /// Indica si es posible gestionar solicitudes de pedido a un tipo de bodega
        /// </summary>
        /// <param name="codigoBodegaDe">Indica el código de donde se realizará el pedido</param>
        /// <param name="prefijoBodega">Indica de la bodega al cual se le hará el pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/realizar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerRealizarPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerRealizarPedido([FromQuery][Required()] string codigoBodegaDe, [FromQuery][Required()] string prefijoBodega)
        {
            logger.Info($"Entró al método ObtenerRealizarPedido en Api Pedidos con los parámetros codigoBodegaDe = {codigoBodegaDe} , prefijoBodega={prefijoBodega}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                bool respuesta = bLPedidos.ObtenerRealizarPedido(codigoBodegaDe, prefijoBodega);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los tipos de solicitud de un pedido
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/tipos/solicitud")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTiposSolicitudPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerTipoSolicitudPedidoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTiposSolicitudPedido()
        {
            logger.Info("Entró al método ObtenerTiposSolicitudPedido en EVO-WebApi - PedidosApi sin parámetros");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<BOObtenerTipoSolicitudPedidoResponse> tiposSolicitud = blPedidos.ObtenerTiposSolicitudPedido();

                List<ObtenerTipoSolicitudPedidoResponse> tiposSolicitudResponse =

                this.mapper.Map<List<BOObtenerTipoSolicitudPedidoResponse>, List<ObtenerTipoSolicitudPedidoResponse>>(tiposSolicitud);

                return Ok(tiposSolicitudResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }

        }

        /// <summary>
        /// Obtiene las solicitudes de un pedido en estado borrador
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/estado/borrador")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerSolicitudPedidoBorrador")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerSolicitudPedidoBorradorResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerSolicitudPedidoBorrador([FromQuery][Required()] string solicitudPara)
        {
            logger.Info($"Entró al método ObtenerSolicitudPedidoBorrador en EVO-WebApi - PedidosApi con el parámetro solicitudPara = {solicitudPara} ");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<BOObtenerSolicitudPedidoBorradorResponse> solicitudes = blPedidos.ObtenerSolicitudPedidoBorrador(solicitudPara);

                List<ObtenerSolicitudPedidoBorradorResponse> solicitudesResponse =

                this.mapper.Map<List<BOObtenerSolicitudPedidoBorradorResponse>, List<ObtenerSolicitudPedidoBorradorResponse>>(solicitudes);

                return Ok(solicitudesResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }


        /// <summary>
        /// Obtiene los pedidos en recepción con entregas en estado \&quot;Programado\&quot;
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/recepcion/")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidosRecepcion")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PedidoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidosRecepcion()
        {
            logger.Info("Entró al método ObtenerPedidosRecepcion en Api Pedidos");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<PedidoRespuesta> pedidos = blPedidos.ObtenerPedidosRecepcion();

                List<PedidoResponse> pedidosResponse = this.mapper.Map<List<PedidoRespuesta>, List<PedidoResponse>>(pedidos);

                return Ok(pedidosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los pedidos que tiene entregas en estado alistamiento
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/alistamiento/")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidosAlistamiento")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PedidoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidosAlistamiento()
        {
            logger.Info("Entró al método ObtenerPedidosAlistamiento en Api Pedidos");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<PedidoRespuesta> pedidos = blPedidos.ObtenerPedidosAlistamiento();

                List<PedidoResponse> pedidosResponse = this.mapper.Map<List<PedidoRespuesta>, List<PedidoResponse>>(pedidos);

                return Ok(pedidosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }


        /// <summary>
        /// Obtiene los artículos que no existen en la entrega
        /// </summary>
        /// <param name="entregaId">Indica el id de la entrega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/entrega/articulos")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerArticulosPendientes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ArticuloPendienteResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerArticulosPendientes([FromQuery][Required()] int entregaId)
        {
            logger.Info($"Entró al método ObtenerArticulosPendientes en Api Pedidos con el parámetro entregaId = {entregaId}");

            try
            {
                BLPedido blPedidos = new BLPedido();

                return Ok(blPedidos.ObtenerArticulosPendientes(entregaId));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }



        /// <summary>
        /// Actualiza una entrega en distribución
        /// </summary>
        /// <param name="body">Referencia del body al modelo request</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/distribucion/actualizar")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarEntregaDistribucion")]
        public virtual IActionResult ActualizarEntregaDistribucion([FromBody] EntregaDistribucionRequest body)
        {
            logger.Info($"Entró al método ActualizarEntregaDistribucion en Api Pedidos con el parámetro body = {JsonConvert.SerializeObject(body)}");

            try
            {
                EntregaSolicitud entregaSolicitud = this.mapper.Map<EntregaDistribucionRequest, EntregaSolicitud>(body);

                BLPedido blPedidos = new BLPedido();

                return Ok(blPedidos.ActualizarEntregaDistribucion(entregaSolicitud));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }



        /// <summary>
        /// Actualiza una entrega
        /// </summary>
        /// <param name="body">Referencia del body al modelo request</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/entrega/actualizar")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarEntrega")]
        public virtual IActionResult ActualizarEntrega([FromBody] EntregaRequest body)
        {
            logger.Info($"Entró al método ActualizarEntrega en Api Pedidos con el parámetro body = {JsonConvert.SerializeObject(body)}");

            try
            {
                EntregaSolicitud entregaSolicitud = this.mapper.Map<EntregaRequest, EntregaSolicitud>(body);

                BLPedido blPedidos = new BLPedido();

                return Ok(blPedidos.ActualizarEntrega(entregaSolicitud));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Elimina un artículo asociado a una entrega
        /// </summary>
        /// <param name="id">Id del detalle entrega</param>
        /// <response code="200">Operación realizada con éxito</response>   
        /// 

        [HttpDelete]
        [Route("/api/pedidos/entregas/articulo/eliminar")]
        [ValidateModelState]
        [SwaggerOperation("EliminarArticuloEntrega")]
        public virtual IActionResult EliminarArticuloEntrega([FromQuery][Required()] int id)
        {
            logger.Info($"Entró al método EliminarArticuloEntrega en Api Pedidos con el parámetro id = {id}");

            try
            {
                BLPedido blPedidos = new BLPedido();

                return Ok(blPedidos.EliminarArticuloEntrega(id));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los detalles del viaje entregas
        /// </summary>
        /// <param name="vehiculoEntregaId">Indica el id del viaje</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/viajes/entregas")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerViajeEntregas")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerViajeEntregasResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerViajeEntregas([FromQuery][Required()] int vehiculoEntregaId)
        {
            logger.Info($"Entró al método ObtenerViajeEntregas en Api Pedidos con el parámetro {vehiculoEntregaId}");

            try
            {
                BLPedido blPedidos = new BLPedido();

                ObtenerViajeEntregasRespuesta obtenerViajeEntregasRespuesta = blPedidos.ObtenerViajeEntregas(vehiculoEntregaId);

                ObtenerViajeEntregasResponse obtenerViajeEntregasResponse = this.mapper.Map<ObtenerViajeEntregasRespuesta, ObtenerViajeEntregasResponse>(obtenerViajeEntregasRespuesta);

                return Ok(obtenerViajeEntregasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Verifica que actualmente existan solicitudes en estado borrador en cada planta
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/solicitud/borradores")]
        [ValidateModelState]
        [SwaggerOperation("ExisteSolicitudPlantasBorrador")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult ExisteSolicitudPlantasBorrador([FromQuery][Required()] string codigoPuntoVenta)
        {
            logger.Info($"Entró al método ExisteSolicitudPlantasBorrador en Api Pedidos con el parámetro {codigoPuntoVenta}");

            try
            {
                BLPedido blPedidos = new BLPedido();

                return Ok(blPedidos.ExisteSolicitudPlantasBorrador(codigoPuntoVenta));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }


        /// <summary>
        /// Obtiene los vehiculos con entregas pendientes finalizar
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/distribucion/vehiculos")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerVehiculosConEntregas")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EnrutamientoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerVehiculosConEntregas()
        {
            logger.Info("Entró al método ObtenerVehiculosConEntregas sin parámetros");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<EnrutamientoRespuesta> enrutamientos = blPedidos.ObtenerVehiculosConEntregas();

                List<EnrutamientoResponse> enrutamientosResponse =

                this.mapper.Map<List<EnrutamientoRespuesta>, List<EnrutamientoResponse>>(enrutamientos);

                return Ok(enrutamientosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Asignar Vehiculo
        /// </summary>
        /// <param name="body">Solicitud para generar una relación entre el vehiculo,conductor y entregas</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/distribucion/asignarvehiculo")]
        [ValidateModelState]
        [SwaggerOperation("AsignarVehiculo")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult AsignarVehiculo([FromBody] AsignarDistribucionRequest body)
        {
            logger.Info($"Entró al método AsignarDistribucion en Api Pedidos con los parámetros {JsonConvert.SerializeObject(body)}");

            try
            {
                DistribucionSolicitud distribucion = this.mapper.Map<AsignarDistribucionRequest, DistribucionSolicitud>(body);

                BLPedido bLPedidos = new BLPedido();

                if (HttpContext.User.Identity != null)
                {
                    distribucion.Usuario = HttpContext.User.Identity.Name;
                }

                return Ok(bLPedidos.AsignarAlistamiento(distribucion));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }


        /// <summary>
        /// Obtiene entrega por id
        /// </summary>
        /// <param name="id">Indica el id de entrega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/entregas/id")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEntregaxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntregaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEntregaxId([FromQuery][Required()] int id)
        {
            //TODO: Agregar idarticulo , nombre , cantidad aprobada y cantidad en entregas de cada artículo en las demas entregas
            logger.Info($"Entró al método ObtenerEntregaxId en Api Pedidos con el parámetro id = {id}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                EntregaBO entrega = bLPedidos.ObtenerEntregaxId(id);

                EntregaResponse entregaRespuesta =
                    this.mapper.Map<EntregaBO, EntregaResponse>(entrega);

                return Ok(entregaRespuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Actualiza el pedido y las entregas al estado programado;
        /// </summary>
        /// <param name="body">Id del pedido</param>
        /// <response code="200">Operación realizada con éxito</response>

        [HttpPost]
        [Route("/api/pedidos/entregas/estado/programado")]
        [ValidateModelState]
        [SwaggerOperation("PedidoEntregasEnrutamiento")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult PedidoEntregasEnrutamiento([FromBody] int body)
        {
            logger.Info($"Entró al método PedidoEntregasEnrutamiento en Api Pedidos con el parámetro id = {body}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                return Ok(bLPedidos.PedidoEntregasEnrutamiento(body));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene las entregas en pedido por el id
        /// </summary>
        /// <param name="id">Indica el pedido id</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/entregas/obtener")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEntregasPedidoxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntregasResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEntregasPedidoxId([FromQuery][Required()] int id)
        {
            logger.Info($"Entró al método ObtenerEntregasPedidoxId en Api Pedidos con el parámetro id = {id}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                EntregaRespuesta entregas = bLPedidos.ObtenerEntregasPedidoxId(id);

                EntregasResponse entregasRespuesta =
                    this.mapper.Map<EntregaRespuesta, EntregasResponse>(entregas);

                return Ok(entregasRespuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Actualiza entrega
        /// </summary>
        /// <param name="body">Solicitud de actualización de entrega de un pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/entregas/actualizar")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarEntrega")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult ActualizarEntrega([FromBody] ActualizarEntregaRequest body)
        {
            logger.Info($"Entró al método ActualizarEntrega en Api Pedidos con los parámetros {JsonConvert.SerializeObject(body)}");

            try
            {
                ActualizarEntrega entrega = this.mapper.Map<ActualizarEntregaRequest, ActualizarEntrega>(body);
                BLPedido bLPedidos = new BLPedido();
                string usuario = string.Empty;
                if (HttpContext.User.Identity != null)
                {
                    usuario = HttpContext.User.Identity.Name;
                }
                return Ok(bLPedidos.ActualizarEntrega(entrega, usuario));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Agrega entregas
        /// </summary>
        /// <param name="body">Solicitud de entregas de un pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/entregas/agregar")]
        [ValidateModelState]
        [SwaggerOperation("AgregarEntregas")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult AgregarEntregas([FromBody] List<EntregasRequest> body)
        {
            logger.Info($"Entró al método AgregarEntregas en Api Pedidos con los parámetros {JsonConvert.SerializeObject(body)}");

            try
            {
                List<EntregaPedido> entregas = this.mapper.Map<List<EntregasRequest>, List<EntregaPedido>>(body);

                BLPedido bLPedidos = new BLPedido();

                string usuario = string.Empty;

                if (HttpContext.User.Identity != null)
                {
                    usuario = HttpContext.User.Identity.Name;
                }

                return Ok(bLPedidos.AgregarEntregas(entregas, usuario));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }

        }

        /// <summary>
        /// Eliminar entregas
        /// </summary>
        /// <param name="body">Solicitud de actualización de entregas de un pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/entregas/eliminar")]
        [ValidateModelState]
        [SwaggerOperation("EliminarEntregas")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Operación realizada con éxito")]
        public virtual IActionResult EliminarEntregas([FromBody] List<int> body)
        {
            logger.Info($"Entró al método EliminarEntregas en Api Pedidos con los parámetros  {JsonConvert.SerializeObject(body)}");

            try
            {
                BLPedido bLPedidos = new BLPedido();
                return Ok(bLPedidos.EliminarEntregas(body));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene el pedido en distribución por el id
        /// </summary>
        /// <param name="id">Indica el pedido id</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/distribucion/obtener")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidoDistribucionxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerPedidoDistribucionResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidoDistribucionxId([FromQuery][Required()] int id)
        {
            logger.Info($"Entró al método ObtenerPedidoDistribucionxId en Api Pedidos con el parámetro {id}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                ObtenerPedidoDistribucion pedidoEnDistribucionRespuesta = bLPedidos.ObtenerPedidoDistribucionxId(id);

                ObtenerPedidoDistribucionResponse pedidoResponse =
                 this.mapper.Map<ObtenerPedidoDistribucion, ObtenerPedidoDistribucionResponse>(pedidoEnDistribucionRespuesta);

                return Ok(pedidoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Verifica si se puede solicitar pedidos a las plantas
        /// </summary>
        /// <param name="codigoCliente">Indica el código del cliente que realizó la solicitud</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/solicitud/habilitar")]
        [ValidateModelState]
        [SwaggerOperation("HabilitarSolicitudPedido")]
        public virtual IActionResult HabilitarSolicitudPedido([FromQuery][Required()] string codigoCliente)
        {
            logger.Info($"Entró al método HabilitarSolicitudPedido con el parámetro codigoCliente = {codigoCliente}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                bool respuesta = bLPedidos.HabilitarSolicitudPedido(codigoCliente);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de Pedidos en distribución aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de entregas a distribución. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/distribucion/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosEntregasDistribucionxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosEntregasDistribucionResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosEntregasDistribucionxFiltro([FromBody] FiltrarEntregasDistribucionRequest body)
        {
            logger.Info(string.Format("Entró al método ObtenerTodosPedidosDistribucionxFiltro con los parámetros {0}",
              JsonConvert.SerializeObject(body)));

            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosDistribucionResponse obtenerTodosPedidosDistribucionResponse = new ObtenerTodosPedidosDistribucionResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerTodosPedidosDistribucionResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosPedidosDistribucionResponseRegistros> obtenerTodosPedidosDistribucionResponseRegistros =
                    new List<ObtenerTodosPedidosDistribucionResponseRegistros>();

                FiltroPedidoDistribucion filtroPedido = this.mapper.Map<FiltrarEntregasDistribucionRequest, FiltroPedidoDistribucion>(body);

                List<PedidoDistribucionRespuesta> pedidosRespuesta = bLPedidos.ObtenerTodosPedidosADistribucionxFiltro(filtroPedido);

                int numeroTotalRegistros = 0;

                if (pedidosRespuesta != null)
                {

                    obtenerTodosPedidosDistribucionResponseRegistros =
                        this.mapper.Map<List<PedidoDistribucionRespuesta>, List<ObtenerTodosPedidosDistribucionResponseRegistros>>(pedidosRespuesta);

                    numeroTotalRegistros = pedidosRespuesta.Count;

                }

                obtenerTodosPedidosDistribucionResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosPedidosDistribucionResponse.Registros = obtenerTodosPedidosDistribucionResponseRegistros;

                return Ok(obtenerTodosPedidosDistribucionResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los códigos de los pedidos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/codigos/beneficio")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerCodigosPedidosBeneficio")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerCodigosPedidosBeneficio()
        {
            logger.Info("Entró al método ObtenerCodigosPedidosBeneficio sin parámetros");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<string> codigos = blPedidos.ObtenerCodigosPedidosBeneficio();

                return Ok(codigos);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Actualiza un pedido desde Planta Beneficio
        /// </summary>
        /// <param name="body">Solicitud de actualización de Pedidos a planta beneficio.</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/plantabeneficio/actualizar")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarPedidoPlantaBeneficio")]
        public virtual IActionResult ActualizarPedidoPlantaBeneficio([FromBody] ActualizarPedidoPlantaBeneficioRequest body)
        {
            logger.Info(string.Format("Entró al método ActualizarPedidoPlantaBeneficio con los parámetros {0}", JsonConvert.SerializeObject(body)));

            try
            {
                PedidoPlantaBeneficio pedido = new PedidoPlantaBeneficio();

                pedido = this.mapper.Map<ActualizarPedidoPlantaBeneficioRequest, PedidoPlantaBeneficio>(body);

                BLPedido bLPedidos = new BLPedido();

                if (HttpContext.User.Identity != null)
                {
                    pedido.Usuario = HttpContext.User.Identity.Name;
                }

                return Ok(bLPedidos.ActualizarPedidoPlantaBeneficio(pedido));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene una solicitud del pedido de un punto de venta o cliente externo desde la planta
        /// </summary>
        /// <param name="id">Pedido Id</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/plantabeneficio/solicitud")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerSolicitudPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerPedidoEnPlantaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerSolicitudPedido([FromQuery][Required()] int id)
        {
            logger.Info($"Entró al método ObtenerSolicitudPedido en Api Pedidos con el parámetro {id}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                PedidoEnPlantaRespuesta pedidoEnPlantaRespuesta = bLPedidos.ObtenerSolicitudPedidoEnPlanta(id);

                ObtenerPedidoEnPlantaResponse obtenerPedidoEnPlantaResponse =
                    this.mapper.Map<PedidoEnPlantaRespuesta, ObtenerPedidoEnPlantaResponse>(pedidoEnPlantaRespuesta);

                return Ok(obtenerPedidoEnPlantaResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Actualizar un pedido
        /// </summary>
        /// <param name="body">Solicitud de pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/actualizar")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarPedido")]
        public virtual IActionResult ActualizarPedido([FromBody] PedidoRequest body)
        {
            logger.Info(string.Format("Entró al método ActualizarPedido con los parámetros {0}",
             JsonConvert.SerializeObject(body)));

            try
            {
                Pedido pedido = new Pedido();

                pedido = this.mapper.Map<PedidoRequest, Pedido>(body);

                if (HttpContext.User.Identity != null)
                {
                    pedido.Usuario = HttpContext.User.Identity.Name;
                }

                BLPedido bLPedidos = new BLPedido();

                return Ok(bLPedidos.ActualizarPedido(pedido));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los registros de pedidos hacia planta beneficio
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/plantabeneficio")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosPedidosABeneficio")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosBeneficioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosPedidosABeneficio([FromQuery][Required()] int desde, [FromQuery][Required()] int hasta)
        {
            logger.Info($"Entró al método ObtenerTodosPedidosABeneficio en Api Pedidos con los parámetros desde = {desde} hasta = {hasta}");

            try
            {
                var userName = HttpContext.User.Identity.Name;

                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosBeneficioResponse obtenerTodoPedidoBeneficioResponse = new ObtenerTodosPedidosBeneficioResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<PedidoBeneficioRespuesta> pedidosBeneficioRespuestas = bLPedidos.ObtenerTodosPedidosABeneficio(desde, hasta);

                int numeroTotalRegistros = bLPedidos.ObtenerConteoTodosPedidosABeneficio();

                obtenerTodoPedidoBeneficioResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodoPedidoBeneficioResponse.TamanhoPaginacion = tamanhoPaginacion;

                obtenerTodoPedidoBeneficioResponse.Registros = this.mapper.Map<List<PedidoBeneficioRespuesta>, List<ObtenerTodosPedidosBeneficioResponseRegistros>>(pedidosBeneficioRespuestas);

                return Ok(obtenerTodoPedidoBeneficioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de pedidos hacia planta beneficio aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de Pedidos a planta beneficio. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/plantabeneficio")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosPedidosABenficioxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosBeneficioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosPedidosABenficioxFiltro([FromBody] FiltrarPedidoBeneficioRequest body)
        {

            logger.Info(string.Format("Entró al método ObtenerTodosPedidosABenficioxFiltro con los parámetros {0}",
            JsonConvert.SerializeObject(body)));

            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosBeneficioResponse obtenerTodosPedidosBeneficioResponse = new ObtenerTodosPedidosBeneficioResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerTodosPedidosBeneficioResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosPedidosBeneficioResponseRegistros> obtenerTodosPedidosBeneficioResponseRegistros =
                    new List<ObtenerTodosPedidosBeneficioResponseRegistros>();

                FiltroPedidoBeneficio filtroPedido = this.mapper.Map<FiltrarPedidoBeneficioRequest, FiltroPedidoBeneficio>(body);

                List<PedidoBeneficioRespuesta> pedidosRespuesta = bLPedidos.ObtenerTodosPedidosABenficioxFiltro(filtroPedido);

                int numeroTotalRegistros = 0;

                if (pedidosRespuesta != null)
                {

                    obtenerTodosPedidosBeneficioResponseRegistros =
                        this.mapper.Map<List<PedidoBeneficioRespuesta>, List<ObtenerTodosPedidosBeneficioResponseRegistros>>(pedidosRespuesta);

                    numeroTotalRegistros = pedidosRespuesta.Count;

                }

                obtenerTodosPedidosBeneficioResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosPedidosBeneficioResponse.Registros = obtenerTodosPedidosBeneficioResponseRegistros;

                return Ok(obtenerTodosPedidosBeneficioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene por estado la cantidad de pedidos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/cantidadxestados")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosCantidadPedidosxEstado")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerEstadoPedidoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosCantidadPedidosxEstado()
        {
            logger.Info("Entró al método ObtenerTodosCantidadPedidosxEstado");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<EstadoPedido> estadosPedido = blPedidos.ObtenerTodosCantidadPedidosxEstado();

                List<ObtenerEstadoPedidoResponse> obtenerEstadosPedidoResponse =

                this.mapper.Map<List<EstadoPedido>, List<ObtenerEstadoPedidoResponse>>(estadosPedido);

                return Ok(obtenerEstadosPedidoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene si actualmente existe un pedido en estado \&quot;Borrador\&quot;
        /// </summary>
        /// <param name="body">Solicitud obtener si actualmente existe un pedido en borrado</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/borrador")]
        [ValidateModelState]
        [SwaggerOperation("ExistePedidoBorrador")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "Operación realizada con éxito")]
        public virtual IActionResult ExistePedidoBorrador([FromBody] ObtenerPedidoBorradorRequest body)
        {

            logger.Info(string.Format("Entró al método ExistePedidoBorrador con los parámetros {0}",
            JsonConvert.SerializeObject(body)));

            try
            {
                ObtenerPedidoBorradorPeticion obtenerPedidoBorradorPeticion = new ObtenerPedidoBorradorPeticion();

                obtenerPedidoBorradorPeticion = this.mapper.Map<ObtenerPedidoBorradorRequest, ObtenerPedidoBorradorPeticion>(body);

                BLPedido bLPedidos = new BLPedido();

                bool respuesta = bLPedidos.ExistePedidoBorrador(obtenerPedidoBorradorPeticion);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los estados de los Pedidos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/estados")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosEstadosPedido")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ObtenerEstadoPedidoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosEstadosPedido()
        {
            logger.Info("Entró al método ObtenerTodosEstadosPedido sin parámetros");

            try
            {
                BLPedido blPedidos = new BLPedido();

                List<EstadoPedido> estadosPedido = blPedidos.ObtenerTodosEstadosPedido();

                List<ObtenerEstadoPedidoResponse> obtenerEstadosPedidoResponse =

                this.mapper.Map<List<EstadoPedido>, List<ObtenerEstadoPedidoResponse>>(estadosPedido);

                return Ok(obtenerEstadosPedidoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Crea un pedido
        /// </summary>
        /// <param name="body">Solicitud de pedido</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos")]
        [ValidateModelState]
        [SwaggerOperation("CrearPedido")]
        public virtual IActionResult CrearPedido([FromBody] PedidoRequest body)
        {
            logger.Info(string.Format("Entró al método CrearPedido con los parámetros {0}",
            JsonConvert.SerializeObject(body)));

            try
            {
                Pedido pedido = new Pedido();
                pedido.Detalles = new List<DetallePedido>();

                pedido = this.mapper.Map<PedidoRequest, Pedido>(body);

                BLPedido bLPedidos = new BLPedido();

                if (HttpContext.User.Identity != null)
                {
                    pedido.Usuario = HttpContext.User.Identity.Name;
                }

                return Ok(bLPedidos.CrearPedido(pedido));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los registros de series
        /// </summary>
        /// <param name="codigoBodega">Indica el código de bodega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/series")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerSerie")]
        [SwaggerResponse(statusCode: 200, type: typeof(SerieResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerSerie([FromQuery][Required()]string codigoBodega)
        {
            logger.Info($"Entró al método ObtenerSerie con el parámetro {codigoBodega}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                SerieRespuesta serie = bLPedidos.ObtenerSerie(codigoBodega);

                SerieResponse consultaSerieResponse = this.mapper.Map<SerieRespuesta, SerieResponse>(serie);
               
                return Ok(consultaSerieResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los registros de Pedidos
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <param name="whsCode">Indica el código del punto de venta</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosPedidos")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosPedidos([FromQuery][Required()] int desde, [FromQuery][Required()] int hasta, [FromQuery][Required()] string whsCode)
        {
            logger.Info($"Entró al método CrearPedido en Api Pedidos con los parámetros desde : {desde}  hasta : {hasta}");

            try
            {
                var userName = HttpContext.User.Identity.Name;

                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosResponse obtenerTodosPedidosResponse = new ObtenerTodosPedidosResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<PedidoRespuesta> pedidosRespuesta = bLPedidos.ObtenerTodosRegistros(desde, hasta, whsCode);

                int numeroTotalRegistros = bLPedidos.ObtenerConteoTodosPedidos(whsCode);

                obtenerTodosPedidosResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosPedidosResponse.TamanhoPaginacion = tamanhoPaginacion;

                obtenerTodosPedidosResponse.Registros = this.mapper.Map<List<PedidoRespuesta>, List<ObtenerTodosPedidosResponseRegistros>>(pedidosRespuesta);

                return Ok(obtenerTodosPedidosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de Pedidos aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de Pedidos. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosPedidosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosPedidosxFiltro([FromBody] FiltrarPedidoRequest body)
        {
            logger.Info(string.Format("Entró al método ObtenerTodosPedidosxFiltro con los parámetros {0}",
            JsonConvert.SerializeObject(body)));

            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosResponse obtenerTodosPedidosResponse = new ObtenerTodosPedidosResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerTodosPedidosResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosPedidosResponseRegistros> obtenerTodosPedidosResponseRegistros =
                    new List<ObtenerTodosPedidosResponseRegistros>();

                FiltroPedido filtroPedido = this.mapper.Map<FiltrarPedidoRequest, FiltroPedido>(body);

                List<PedidoRespuesta> pedidosRespuesta = bLPedidos.ObtenerTodosPedidosxFiltro(filtroPedido);

                int numeroTotalRegistros = 0;

                if (pedidosRespuesta != null)
                {
                    obtenerTodosPedidosResponseRegistros =
                        this.mapper.Map<List<PedidoRespuesta>, List<ObtenerTodosPedidosResponseRegistros>>(pedidosRespuesta);

                    numeroTotalRegistros = pedidosRespuesta.Count;
                    //bLPedidos.ObtenerConteoTodosPedidosxFiltro(filtroPedido);
                }

                obtenerTodosPedidosResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosPedidosResponse.Registros = obtenerTodosPedidosResponseRegistros;

                return Ok(obtenerTodosPedidosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los archivos de canales filtrados
        /// </summary>
        /// <param name="body">Solicitud de filtro de Archivos. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/cargaArchivos/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosArchivosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosArchivosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosArchivosxFiltro([FromBody]FiltrarArchivoRequest body)
        {
            logger.Info(string.Format("Entró al método ObtenerTodosArchivosxFiltro con los parámetros {0}", JsonConvert.SerializeObject(body)));
            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();
                ObtenerTodosArchivosResponse obtenerTodosArchivosResponse = new ObtenerTodosArchivosResponse();
                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));
                    logger.Error(e);
                    throw e;
                }
                int tamanhoPaginacion = 0;
                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));
                    logger.Error(e);
                    throw e;
                }

                obtenerTodosArchivosResponse.TamanhoPaginacion = tamanhoPaginacion;
                List<ObtenerTodosArchivosResponseRegistros> obtenerTodosArchivosResponseRegistros = new List<ObtenerTodosArchivosResponseRegistros>();
                FiltroArchivo filtroArchivo = this.mapper.Map<FiltrarArchivoRequest, FiltroArchivo>(body);
                List<ArchivoRespuesta> lstArchivosRespuesta = bLPedidos.ObtenerTodosArchivosxFiltro(filtroArchivo);
                int numeroTotalRegistros = 0;
                if (lstArchivosRespuesta != null)
                {
                    obtenerTodosArchivosResponseRegistros = this.mapper.Map<List<ArchivoRespuesta>, List<ObtenerTodosArchivosResponseRegistros>>(lstArchivosRespuesta);
                    numeroTotalRegistros = lstArchivosRespuesta.Count;                   
                }
                obtenerTodosArchivosResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosArchivosResponse.Registros = obtenerTodosArchivosResponseRegistros;
                return Ok(obtenerTodosArchivosResponseRegistros);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }




        /// <summary>
        /// Consulta el pedido por el id
        /// </summary>
        /// <param name="id">Indica el pedido ID</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/consulta")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerConsultaPedidoxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConsultaPedidoResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerConsultaPedidoxId([FromQuery][Required()] int id)
        {
            logger.Info($"Entró al método ObtenerConsultaPedidoxId con el parámetro {id}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                ConsultaPedidoRespuesta ConsultaPedidoRespuesta = bLPedidos.ObtenerConsultaPedidoxId(id);

                ConsultaPedidoResponse consultaPedidoResponse = this.mapper.Map<ConsultaPedidoRespuesta, ConsultaPedidoResponse>(ConsultaPedidoRespuesta);

                if (consultaPedidoResponse == null)
                {
                    consultaPedidoResponse = new ConsultaPedidoResponse();
                }

                return Ok(consultaPedidoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene el pedido por el id
        /// </summary>
        /// <param name="id">Indica el pedido ID</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/obtener")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidoxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerPedidoResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidoxId([FromQuery][Required()] int id)
        {
            logger.Info($"Entró al método ObtenerPedidoxId con el parámetro {id}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                ObtenerPedidoRespuesta obtenerPedidoRespuesta = bLPedidos.ObtenerPedidoxId(id);

                ObtenerPedidoResponse obtenerPedidoResponse = this.mapper.Map<ObtenerPedidoRespuesta, ObtenerPedidoResponse>(obtenerPedidoRespuesta);

                if (obtenerPedidoResponse == null)
                {
                    obtenerPedidoResponse = new ObtenerPedidoResponse();
                }

                return Ok(obtenerPedidoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los pedidos con estado abierto
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/aprobar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidosAbiertos")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosBeneficioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidosAbiertos([FromQuery][Required()] int desde, [FromQuery][Required()] int hasta)
        {
            logger.Info($"Entró al método ObtenerPedidosAbiertos en Api Pedidos con los parámetros desde = {desde} hasta = {hasta}");

            try
            {

                BLPedido bLPedidos = new BLPedido();

                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosBeneficioResponse obtenerTodoPedidoBeneficioResponse = new ObtenerTodosPedidosBeneficioResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<PedidoBeneficioRespuesta> pedidosBeneficioRespuestas = bLPedidos.ObtenerPedidosAbiertos(desde, hasta);

                int numeroTotalRegistros = bLPedidos.ObtenerConteoTodosPedidosAbiertos();

                obtenerTodoPedidoBeneficioResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodoPedidoBeneficioResponse.TamanhoPaginacion = tamanhoPaginacion;

                obtenerTodoPedidoBeneficioResponse.Registros = this.mapper.Map<List<PedidoBeneficioRespuesta>, List<ObtenerTodosPedidosBeneficioResponseRegistros>>(pedidosBeneficioRespuestas);

                return Ok(obtenerTodoPedidoBeneficioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los pedidos con estado aceptado y aceptado parcial
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/pedidos/aceptados")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerPedidosAceptados")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosBeneficioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerPedidosAceptados([FromQuery][Required()] int desde, [FromQuery][Required()] int hasta)
        {
            logger.Info($"Entró al método ObtenerPedidosAceptados en Api Pedidos con los parámetros desde = {desde} hasta = {hasta}");

            try
            {
                BLPedido bLPedidos = new BLPedido();

                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosBeneficioResponse obtenerTodoPedidoBeneficioResponse = new ObtenerTodosPedidosBeneficioResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                List<PedidoBeneficioRespuesta> pedidosBeneficioRespuestas = bLPedidos.ObtenerPedidosAceptados(desde, hasta);

                int numeroTotalRegistros = bLPedidos.ObtenerConteoTodosPedidosAceptados();

                obtenerTodoPedidoBeneficioResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodoPedidoBeneficioResponse.TamanhoPaginacion = tamanhoPaginacion;

                obtenerTodoPedidoBeneficioResponse.Registros = this.mapper.Map<List<PedidoBeneficioRespuesta>, List<ObtenerTodosPedidosBeneficioResponseRegistros>>(pedidosBeneficioRespuestas);

                return Ok(obtenerTodoPedidoBeneficioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de pedidos en estado abierto con filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de pedidos en comerical. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/aprobar/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosPedidosAbiertosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosBeneficioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosPedidosAbiertosxFiltro([FromBody] FiltrarPedidoBeneficioRequest body)
        {
            logger.Info(string.Format("Entró al método ObtenerTodosPedidosAbiertosxFiltro con los parámetros {0}",
            JsonConvert.SerializeObject(body)));

            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosBeneficioResponse obtenerTodosPedidosBeneficioResponse = new ObtenerTodosPedidosBeneficioResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerTodosPedidosBeneficioResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosPedidosBeneficioResponseRegistros> obtenerTodosPedidosBeneficioResponseRegistros =
                    new List<ObtenerTodosPedidosBeneficioResponseRegistros>();

                FiltroPedidoBeneficio filtroPedido = this.mapper.Map<FiltrarPedidoBeneficioRequest, FiltroPedidoBeneficio>(body);

                List<PedidoBeneficioRespuesta> pedidosRespuesta = bLPedidos.ObtenerTodosPedidosAbiertosxFiltro(filtroPedido);

                int numeroTotalRegistros = 0;

                if (pedidosRespuesta != null)
                {

                    obtenerTodosPedidosBeneficioResponseRegistros =
                        this.mapper.Map<List<PedidoBeneficioRespuesta>, List<ObtenerTodosPedidosBeneficioResponseRegistros>>(pedidosRespuesta);

                    numeroTotalRegistros = pedidosRespuesta.Count;

                }

                obtenerTodosPedidosBeneficioResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosPedidosBeneficioResponse.Registros = obtenerTodosPedidosBeneficioResponseRegistros;

                return Ok(obtenerTodosPedidosBeneficioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de pedidos en estado aceptado y aceptado parcial con filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de pedidos en comerical. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/pedidos/aceptados/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosPedidosAceptadosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosPedidosBeneficioResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosPedidosAceptadosxFiltro([FromBody] FiltrarPedidoBeneficioRequest body)
        {
            logger.Info(string.Format("Entró al método ObtenerTodosPedidosAceptadosxFiltro con los parámetros {0}",
           JsonConvert.SerializeObject(body)));

            try
            {
                BLPedido bLPedidos = new BLPedido();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ObtenerTodosPedidosBeneficioResponse obtenerTodosPedidosBeneficioResponse = new ObtenerTodosPedidosBeneficioResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerTodosPedidosBeneficioResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosPedidosBeneficioResponseRegistros> obtenerTodosPedidosBeneficioResponseRegistros =
                    new List<ObtenerTodosPedidosBeneficioResponseRegistros>();

                FiltroPedidoBeneficio filtroPedido = this.mapper.Map<FiltrarPedidoBeneficioRequest, FiltroPedidoBeneficio>(body);

                List<PedidoBeneficioRespuesta> pedidosRespuesta = bLPedidos.ObtenerTodosPedidosAceptadosxFiltro(filtroPedido);

                int numeroTotalRegistros = 0;

                if (pedidosRespuesta != null)
                {

                    obtenerTodosPedidosBeneficioResponseRegistros =
                        this.mapper.Map<List<PedidoBeneficioRespuesta>, List<ObtenerTodosPedidosBeneficioResponseRegistros>>(pedidosRespuesta);

                    numeroTotalRegistros = pedidosRespuesta.Count;

                }

                obtenerTodosPedidosBeneficioResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosPedidosBeneficioResponse.Registros = obtenerTodosPedidosBeneficioResponseRegistros;

                return Ok(obtenerTodosPedidosBeneficioResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Constructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public PedidosApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion

    }
}
