/*
 * API de Auditoria
 *
 * API de administración de auditoria 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.AuditoriaApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class AuditoriaApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        private readonly IHostingEnvironment _appEnvironment;
        #endregion

        #region Métodos Públicos
        /// <summary>
        /// Crea un registro de Auditoria
        /// </summary>
        /// <param name="body">Solicitud de creación de un registro de Auditoria</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/auditoria")]
        [ValidateModelState]
        [SwaggerOperation("CrearRegistro")]
        public virtual IActionResult CrearRegistro([FromBody]RegistroAuditoriaRequest body)
        {
            try
            {
                //Se implementa el automapper en el registro de auditoria
                RegistroAuditoria boRegistroAuditoria = this.mapper.Map<RegistroAuditoriaRequest, RegistroAuditoria>(body);

                string IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (IP.Equals("::1"))
                {
                    IP = "127.0.0.1";
                }

                string userName = null;

                if (HttpContext.User.Identity != null)
                {
                    userName = HttpContext.User.Identity.Name;
                }

                boRegistroAuditoria.IP = IP;
                boRegistroAuditoria.Usuario = userName;

                BLAuditoria blAuditoria = new BLAuditoria();

                bool resultadoRegistro = blAuditoria.Registrar(boRegistroAuditoria);

                return Ok(resultadoRegistro);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch (Exception e)
            {
                logger.Error(e);

                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los registros de Auditoria
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/auditoria")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosRegistros")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosRegistrosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosRegistros([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta)
        {
            try
            {
                var userName = HttpContext.User.Identity.Name;

                BLAuditoria blAuditoria = new BLAuditoria();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosRegistrosResponse registrosAuditoriasResponse = new ObtenerTodosRegistrosResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch (Exception)
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }               

                List<RegistroAuditoria> listaRegistrosAuditorias = blAuditoria.ObtenerTodosRegistros(desde, hasta);

                int numeroTotalRegistros = blAuditoria.ObtenerConteoTodosRegistros();

                registrosAuditoriasResponse.NumeroTotalRegistros = numeroTotalRegistros;
                registrosAuditoriasResponse.TamanhoPaginacion = tamanhoPaginacion;

                //Se implementa el automapeo
                registrosAuditoriasResponse.Registros = this.mapper.Map<List<RegistroAuditoria>, List<ObtenerTodosRegistrosResponseRegistros>>(listaRegistrosAuditorias);

                return Ok(registrosAuditoriasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los registros de Auditoria aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicitud de filtro de Auditoria. Se debe ingresar al menos uno de los criterios del filtro</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/auditoria/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosRegistrosxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosRegistrosResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosRegistrosxFiltro([FromBody]FiltrarAuditoriaRequest body)
        {
            try
            {
                BLAuditoria blAuditoria = new BLAuditoria();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosRegistrosResponse registrosAuditoriasResponse = new ObtenerTodosRegistrosResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                registrosAuditoriasResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosRegistrosResponseRegistros> listaRegistrosAuditoriaResponse = new List<ObtenerTodosRegistrosResponseRegistros>();

                FiltroAuditoria filtroAuditoria = this.mapper.Map<FiltrarAuditoriaRequest, FiltroAuditoria>(body);

                //Se implementa el automapeo
                List<RegistroAuditoria> listaRegistrosAuditorias = blAuditoria.ObtenerTodosRegistrosxFiltro(filtroAuditoria);

                int numeroTotalRegistros = 0;

                if (listaRegistrosAuditorias != null)
                {
                    //Se implementa el automapeo
                    listaRegistrosAuditoriaResponse =
                        this.mapper.Map<List<RegistroAuditoria>, List<ObtenerTodosRegistrosResponseRegistros>>(listaRegistrosAuditorias);

                    // Para el conteo no se toman los parámetros desde y hasta del filtro
                    numeroTotalRegistros = blAuditoria.ObtenerConteoTodosRegistrosxFiltro(filtroAuditoria);
                }

                registrosAuditoriasResponse.NumeroTotalRegistros = numeroTotalRegistros;
                registrosAuditoriasResponse.Registros = listaRegistrosAuditoriaResponse;

                return Ok(registrosAuditoriasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Crea un registro de Log
        /// </summary>
        /// <param name="body">Solicitud de log.</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/auditoria/log")]
        [ValidateModelState]
        [SwaggerOperation("CrearLog")]
        public virtual IActionResult CrearLog([FromBody]RegistroLogRequest body)
        {
            try
            {
                //Obtenemos la ruta donde se creara nuestro archivo de logs - se creara un nuevo archivo por dia
                string path = Path.Combine(this._appEnvironment.WebRootPath,
                                           "Logs-Client/"
                                           + DateTime.Now.ToString("dddd, dd MMMM yyyy") + "-log.txt");

                var registroLOG = this.mapper.Map<RegistroLogRequest, RegistroLOG>(body);

                BLAuditoria blAuditoria = new BLAuditoria();

                blAuditoria.CrearLog(path, registroLOG);

                return Ok(200);
            }catch(EVOException e){

                return StatusCode(StatusCodes.Status400BadRequest,e.Message);

            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        /// <param name="appEnvironment"></param>
        public AuditoriaApiController(IMapper mapper, IHostingEnvironment appEnvironment)
        {
            this.mapper = mapper;
            this._appEnvironment = appEnvironment;
        }
        #endregion
    }

}

