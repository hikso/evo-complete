/*
 * API de Evidencia
 *
 * API de administración de Evidencia 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models;
using EVO_WebApi.Models.EvidenciaApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EvidenciaApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos

        /// <summary>
        /// Obtiene el archivo en base64
        /// </summary>
        /// <param name="GUID">Indica el número unico retornado en el detalle de evidencia</param>
        /// <param name="nombreArchivo">Indica el nombre del archivo</param>
        /// <param name="extensionArchivo">Indica la extensión del archivo</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/evidencia/archivo")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerArchivoEvidencia")]
        public virtual IActionResult ObtenerArchivoEvidencia([FromQuery][Required()]string GUID, [FromQuery][Required()]string nombreArchivo, [FromQuery][Required()]string extensionArchivo)
        {
            logger.Info($"Entró al método ObtenerArchivoEvidencia en EvidenciaApi con los parámetros GUID = {GUID} , nombreArchivo = {nombreArchivo} , extensionArchivo = {extensionArchivo}");

            try
            {
                BLEvidencia bLEvidencia = new BLEvidencia();

                string base64 = bLEvidencia.ObtenerArchivoEvidencia(GUID,nombreArchivo,extensionArchivo);               

                return Ok(base64);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Envía evidencias
        /// </summary>
        /// <param name="body">Solicitud para el registro de la evidencia</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/evidencia/enviar")]
        [ValidateModelState]
        [SwaggerOperation("EnviarEvidencia")]
        public virtual IActionResult EnviarEvidencia([FromBody]EvidenciaRequest body)
        {
            logger.Info($"Entró al método EnviarEvidencia en EvidenciaApi con los parámetros = {JsonConvert.SerializeObject(body)}");

            try
            {
                BOEvidenciaRequest bOEvidenciaRequest = this.mapper.Map<EvidenciaRequest, BOEvidenciaRequest>(body);

                if (HttpContext.User.Identity != null)
                {
                    bOEvidenciaRequest.Usuario = HttpContext.User.Identity.Name;
                }

                BLEvidencia bLEvidencia = new BLEvidencia();

                return Ok(bLEvidencia.EnviarEvidencia(bOEvidenciaRequest));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene del detalle de la evidencia
        /// </summary>
        /// <param name="evidenciaId">Indica de la evidencia</param>
        /// <param name="numeroEntrega">Número de la entrega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/evidencia/detalle")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerDetalleEvidencia")]
        [SwaggerResponse(statusCode: 200, type: typeof(DetalleEvidenciaResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerDetalleEvidencia([FromQuery][Required()]int evidenciaId,[FromQuery][Required()]string numeroEntrega)
        {
            logger.Info("Entró al método ObtenerDetalleEvidencia en EvidenciaApi sin parámetros");

            try
            {
                BLEvidencia bLEvidencia = new BLEvidencia();

                BODetalleEvidenciaResponse bODetalleEvidenciaResponse = bLEvidencia.ObtenerDetalleEvidencia(evidenciaId,numeroEntrega);

                DetalleEvidenciaResponse evidenciasResponse = this.mapper.Map<BODetalleEvidenciaResponse,DetalleEvidenciaResponse>(bODetalleEvidenciaResponse);

                return Ok(evidenciasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene las evidencias
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/evidencia/evidencias")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEvidencias")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EvidenciaResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEvidencias()
        {
            logger.Info($"Entró al método ObtenerEvidencias en EvidenciaApi sin parámetros");

            try
            {
                BLEvidencia bLEvidencia = new BLEvidencia();

                List<BOEvidenciaResponse> bOEvidenciasResponse = bLEvidencia.ObtenerEvidencias();

                List<EvidenciaResponse> evidenciasResponse = this.mapper.Map<List<BOEvidenciaResponse>,List<EvidenciaResponse>>(bOEvidenciasResponse);

                return Ok(evidenciasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene las evidencias filtradas
        /// </summary>
        /// <param name="fechaInicio">Indica la fecha de inicio de la evidencia(dd/mm/aaa)</param>
        /// <param name="fechaFin">Indica la fecha de fin de la evidencia(dd/mm/aaa)</param>
        /// <param name="puntoVenta">Indica el código del punto de venta</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/evidencia/evidencias/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEvidenciasxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<EvidenciaResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEvidenciasxFiltro([FromQuery]string fechaInicio,[FromQuery]string fechaFin,[FromQuery]string puntoVenta)
        {
            logger.Info($"Entró al método ObtenerEvidenciasxFiltro en EvidenciaApi con los parámetros fechaInicio = {fechaInicio} , fechaFin = {fechaFin} , puntoVenta = {puntoVenta}");

            try
            {
                BLEvidencia bLEvidencia = new BLEvidencia();

                List<BOEvidenciaResponse> bOEvidenciasResponse = bLEvidencia.ObtenerEvidenciasxFiltro(fechaInicio, fechaFin, puntoVenta);

                List<EvidenciaResponse> evidenciasResponse = this.mapper.Map<List<BOEvidenciaResponse>, List<EvidenciaResponse>>(bOEvidenciasResponse);

                return Ok(evidenciasResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public EvidenciaApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }

        #endregion

    }
}
