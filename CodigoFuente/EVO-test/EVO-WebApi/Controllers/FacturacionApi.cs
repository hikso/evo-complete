/*
 * API de administración de Facturación
 *
 * API de administración de facturación 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.FacturacionApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FacturacionApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos

        /// <summary>
        /// Obtiene las ultima de devuelta de una factura POS
        /// </summary>
        /// <param name="codigoPuntoVenta">Indica el código de punto de venta</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/facturacion/ultimadevuelta")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerUltimaDevuelta")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerUltimaDevuelta([FromQuery][Required()] string codigoPuntoVenta)
        {
            logger.Info($"Entró al método ObtenerUltimaDevuelta en FacturacionApi - EVO_WebApi con el parámetro codigoPuntoVenta = {codigoPuntoVenta}");

            try
            {

                BLFacturacion blFacturacion = new BLFacturacion();                         

                return Ok(blFacturacion.ObtenerUltimaDevuelta(codigoPuntoVenta));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Registra una factura
        /// </summary>
        /// <param name="body">Objeto de solicitud para registrar la factura</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/facturacion")]
        [ValidateModelState]
        [SwaggerOperation("AsignarFacturaPOS")]
        public virtual IActionResult AsignarFacturaPOS([FromBody]FacturaRequest body)
        {
            logger.Info($"Entró al método AsignarFactura en AsignarFacturaPOS - EVO_WebApi con los parametros body = {JsonConvert.SerializeObject(body)}");

            FacturaRequestBO facturaRequestBO = this.mapper.Map<FacturaRequest, FacturaRequestBO>(body);

            BLFacturacion bLFacturacion = new BLFacturacion();

            try
            {
                facturaRequestBO.IP = HttpContext.Connection.RemoteIpAddress.ToString();

                //Este comportamiento ocurre cuándo el RemoteIpAddress es el mismo equipo (localhost), por lo tanto se debe cambiar a 127.0.0.1, para que no fallen las validaciones sobre la estructura de la dirección IP
                if (facturaRequestBO.IP.Equals("::1"))
                {
                    facturaRequestBO.IP = "127.0.0.1";
                }

                facturaRequestBO.UserName = null;

                if (HttpContext.User.Identity != null)
                {
                    facturaRequestBO.UserName = HttpContext.User.Identity.Name;
                }

                bLFacturacion.AsignarFacturaPOS(facturaRequestBO);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }

            return Ok();
        }

        /// <summary>
        /// Obtiene las formas de pago
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/facturacion/formaspago")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerFormasPago")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FormaPagoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerFormasPago()
        {
            logger.Info($"Entró al método ObtenerFormasPago en FacturacionApi en EVO_WebApi");

            try
            {

                BLFacturacion blFacturacion = new BLFacturacion();

                List<FormaPagoBO> otrasFormaPago = blFacturacion.ObtenerFormasPago();

                List<FormaPagoResponse> otrasFormasPagoResponse = this.mapper.Map<List<FormaPagoBO>, List<FormaPagoResponse>>(otrasFormaPago);

                return Ok(otrasFormasPagoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }       

        /// <summary>
        /// Obtiene las bancos
        /// </summary>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/facturacion/bancos")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerBancos")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<BancoResponse>), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerBancos()
        {
            logger.Info($"Entró al método ObtenerBancos en FacturacionApi en EVO_WebApi");

            try
            {

                BLFacturacion blFacturacion = new BLFacturacion();

                List<BancoBO> bancos = blFacturacion.ObtenerBancos();

                List<BancoResponse> bancosResponse = this.mapper.Map<List<BancoBO>, List<BancoResponse>>(bancos);

                return Ok(bancosResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public FacturacionApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }

        #endregion
    }
}
