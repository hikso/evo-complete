/*
 * API de Roles de Usuario
 *
 * API de administración de Rol
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.RolesApi;
using EVO_WebApi.Models.UsuariosApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class RolesApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos Públicos
        /// <summary>
        /// Actualiza un Rol
        /// </summary>
        /// <param name="body">Solicititud de actualización de un Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        /// TODO: Para que angular pueda consumirlo momentaneamente en los ambientes de desarrolo y pruebas se cambio de PUT a Post y /api/roles a /api/rolesEdit , no se ha cambiado el yaml y  la documentación
        [HttpPost]
        [Route("/api/rolesEdit")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarRol")]
        public virtual IActionResult ActualizarRol([FromBody]ActualizarRolRequest body)
        {
            logger.Info("Entró al método ActualizarRol");
            try
            {
                Rol boRol = this.mapper.Map<ActualizarRolRequest, Rol>(body);

                if (body.FuncionalidadesIds != null)
                {
                    if (body.FuncionalidadesIds.Count > 0)
                    {
                        boRol.Funcionalidades = new List<Funcionalidad>();

                        foreach (int f in body.FuncionalidadesIds)
                        {
                            boRol.Funcionalidades.Add(new Funcionalidad()
                            {
                                FuncionalidadId = f
                            });
                        }
                    }
                }

                var blRol = new BLRol();

                return Ok(blRol.ActualizarRol(boRol));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Asocia los usuarios a un Rol
        /// </summary>
        /// <param name="body">Solicititud de asociación de un usuario a un rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/roles/usuarios/asociar")]
        [ValidateModelState]
        [SwaggerOperation("AsociarUsuariosARol")]
        public virtual IActionResult AsociarUsuariosARol([FromBody]AsociarUsuariosARolRequest body)
        {
            try
            {
                AsociarUsuariosARol asociarUsuariosARol = this.mapper.Map<AsociarUsuariosARolRequest, AsociarUsuariosARol>(body);

                BLRol blRoles = new BLRol();

                return Ok(blRoles.AsociarUsuariosARol(asociarUsuariosARol));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch(Exception e)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Crea un Rol
        /// </summary>
        /// <param name="body">Solicititud de creación de un Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/roles")]
        [ValidateModelState]
        [SwaggerOperation("CrearRol")]
        public virtual IActionResult CrearRol([FromBody]CrearRolRequest body)
        {
            try
            {               

                Rol boRol = this.mapper.Map<CrearRolRequest,Rol>(body);

                if (body.FuncionalidadesIds != null)
                {
                    if (body.FuncionalidadesIds.Count > 0)
                    {
                        boRol.Funcionalidades = new List<Funcionalidad>();

                        foreach (int f in body.FuncionalidadesIds)
                        {
                            boRol.Funcionalidades.Add(new Funcionalidad()
                            {
                                FuncionalidadId = f
                            });
                        }
                    }
                }

                BLRol blRol = new BLRol();

                return Ok(blRol.CrearRol(boRol));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Desasocia usuarios a un rol
        /// </summary>
        /// <param name="body">Solicititud de desasociación de usuarios al rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/roles/usuarios/desasociar")]
        [ValidateModelState]
        [SwaggerOperation("DesasociarUsuariosARol")]
        public virtual IActionResult DesasociarUsuariosARol([FromBody]DesasociarUsuariosARolRequest body)
        {
            try
            {
                DesasociarUsuariosARol desasociarUsuariosARol = this.mapper.Map<DesasociarUsuariosARolRequest,DesasociarUsuariosARol>(body);

                BLRol blRoles = new BLRol();

                return Ok(blRoles.DesasociarUsuariosARol(desasociarUsuariosARol));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }   

        /// <summary>
        /// Id del rol para poder desasociar todos los usuarios
        /// </summary>
        /// <param name="id">Id del Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/roles/usuarios/desasociartodos/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DesasociarTodosUsuariosARol")]
        public virtual IActionResult DesasociarTodosUsuariosARol([FromRoute][Required()]int id)
        {
            try
            {
                BLRol BLRol = new BLRol();

                return Ok(BLRol.DesasociarTodosUsuariosARol(id));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Activa / Inactiva un Rol
        /// </summary>
        /// <param name="body">Solicititud de activación / inactivación de un Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/roles/activar")]
        [ValidateModelState]
        [SwaggerOperation("ActivarRol")]
        public virtual IActionResult ActivarRol([FromBody]ActivarRolRequest body)
        {
            try
            {
                BLRol logicaRoles = new BLRol();
                Rol rolAInactivar = this.mapper.Map<ActivarRolRequest, Rol>(body);

                bool resultadoInactivacion = logicaRoles.ActivarRol(rolAInactivar);

                return Ok(resultadoInactivacion);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene un Rol por su id
        /// </summary>
        /// <param name="id">Id del Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/roles/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerRolxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerRolResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerRolxId([FromRoute][Required]int id)
        {
            try
            {
                BLRol BLRol = new BLRol();

                Rol rol = BLRol.ObtenerRolxId(id);

                ObtenerRolResponse respuesta = this.mapper.Map<Rol, ObtenerRolResponse>(rol);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene un Rol por su nombre
        /// </summary>
        /// <param name="nombre">Nombre del Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/roles/obtenerxnombre/{nombre}")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerRolxNombre")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerRolResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerRolxNombre([FromRoute][Required]string nombre)
        {
            try
            {
                BLRol BLRol = new BLRol();

                Rol rol = BLRol.ObtenerRolxNombre(nombre);

                ObtenerRolResponse respuesta = this.mapper.Map<Rol, ObtenerRolResponse>(rol);

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los Roles
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/roles")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosRoles")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosRolesResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosRoles([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta)
        {
            try
            {
                BLRol blRoles = new BLRol();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosRolesResponse registrosRolesResponse = new ObtenerTodosRolesResponse();

                int numeroTotalRegistros = blRoles.ObtenerNumeroTotalRegistros();
                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch (EVOException e)
                {
                    throw e;
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroNumeroEntero, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                registrosRolesResponse.NumeroTotalRegistros = numeroTotalRegistros;
                registrosRolesResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosRolesResponseRegistros> listaRegistrosRolesResponse = new List<ObtenerTodosRolesResponseRegistros>();

                List<Rol> listaRoles = blRoles.ObtenerTodosRoles(desde, hasta);

                if (listaRoles != null)
                {
                    listaRegistrosRolesResponse = this.mapper.Map<List<Rol>, List<ObtenerTodosRolesResponseRegistros>>(listaRoles);
                }

                registrosRolesResponse.Registros = listaRegistrosRolesResponse;

                return Ok(registrosRolesResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los roles aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicititud de filtro de Roles</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/roles/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosRolesxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosRolesResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosRolesxFiltro([FromBody]FiltrarRolRequest body)
        {
            try
            {
                BLRol blRoles = new BLRol();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosRolesResponse registrosRolesResponse = new ObtenerTodosRolesResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch (EVOException e)
                {
                    throw e;
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroNumeroEntero, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                registrosRolesResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosRolesResponseRegistros> listaRegistrosRolesResponse = new List<ObtenerTodosRolesResponseRegistros>();

                FiltroRol filtro = this.mapper.Map<FiltrarRolRequest, FiltroRol>(body);

                List<Rol> listaRoles = blRoles.ObtenerTodosRolesxFiltro(filtro);

                int numeroTotalRegistros = 0;

                if (listaRoles != null)
                {
                    listaRegistrosRolesResponse = this.mapper.Map<List<Rol>, List<ObtenerTodosRolesResponseRegistros>>(listaRoles);

                    numeroTotalRegistros = blRoles.ObtenerConteoTodosRolesxFiltro(filtro);
                }

                registrosRolesResponse.NumeroTotalRegistros = numeroTotalRegistros;
                registrosRolesResponse.Registros = listaRegistrosRolesResponse;

                return Ok(registrosRolesResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los Usuarios de un Rol
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se deben obtener los registros</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se deben obtener los registros</param>
        /// <param name="rolId">Id del Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/roles/usuarios")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosUsuariosXRol")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosUsuariosRolResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosUsuariosXRol([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta, [FromQuery][Required()]int rolId)
        {
            try
            {
                BLRol blRoles = new BLRol();

                int numeroTotalRegistros = blRoles.ObtenerNumeroTotalRegistrosUsuariosXRol(rolId);

                ObtenerTodosUsuariosRolResponse obtenerTodosUsuariosRolResponse =
                    new ObtenerTodosUsuariosRolResponse();

                BLParametroGeneral bLParametrosGenerales = new BLParametroGeneral();

                string pgTamanhoPaginacion = pgTamanhoPaginacion = bLParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    Exception e = new Exception(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    Exception e = new Exception(string.Format(errores.errParametroNumeroEntero, pgTamanhoPaginacion));

                    throw e;
                }

                obtenerTodosUsuariosRolResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosUsuariosRolResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<Usuario> usuariosARol = blRoles.ObtenerTodosUsuariosXRol(desde, hasta, rolId);

                List<ObtenerTodosUsuariosRolResponseRegistros> usuariosRolResponseRegistros =
                    this.mapper.Map<List<Usuario>, List<ObtenerTodosUsuariosRolResponseRegistros>>(usuariosARol);

                obtenerTodosUsuariosRolResponse.Registros = usuariosRolResponseRegistros;

                return Ok(obtenerTodosUsuariosRolResponse);

            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene todos los usuarios de un rol aplicando filtros de búsqueda
        /// </summary>
        /// <param name="body">Solicititud de filtro de Usuarios por Rol</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/roles/usuarios/filtrar")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosUsuariosXRolxFiltro")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosUsuariosRolResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosUsuariosXRolxFiltro([FromBody]FiltrarUsuarioXRolRequest body)
        {
            try
            {
                BLRol blRoles = new BLRol();
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosUsuariosRolResponse obtenerTodosRolesResponse = new ObtenerTodosUsuariosRolResponse();

                string pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    EVOException e = new EVOException(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    logger.Error(e);

                    throw e;
                }

                obtenerTodosRolesResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosUsuariosRolResponseRegistros> usuariosXRolResponse = new List<ObtenerTodosUsuariosRolResponseRegistros>();

                FiltroUsuario filtroUsuario = this.mapper.Map<FiltrarUsuarioXRolRequest, FiltroUsuario>(body);

                //Se implementa el automapeo
                List<Usuario> listaUsuariosRol = blRoles.ObtenerTodosUsuariosxRolxFiltro(filtroUsuario);

                int numeroTotalUsuariosRol = 0;

                if (listaUsuariosRol != null)
                {
                    //Se implementa el automapeo
                    usuariosXRolResponse =
                        this.mapper.Map<List<Usuario>, List<ObtenerTodosUsuariosRolResponseRegistros>>(listaUsuariosRol);

                    // Para el conteo no se toman los parámetros desde y hasta del filtro
                    numeroTotalUsuariosRol = blRoles.ObtenerConteoTodosUsuariosxRolxFiltro(filtroUsuario);
                }

                obtenerTodosRolesResponse.NumeroTotalRegistros = numeroTotalUsuariosRol;
                obtenerTodosRolesResponse.Registros = usuariosXRolResponse;

                return Ok(obtenerTodosRolesResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public RolesApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion
    }
}