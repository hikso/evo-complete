/*
 * API de administración de Facturación
 *
 * API de administración de facturación 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.FacturacionApi
{
    /// <summary>
    /// Representa la compra de un artículo en la factura
    /// </summary>
    [DataContract]
    public partial class ArticuloRequest : IEquatable<ArticuloRequest>
    {
        /// <summary>
        /// Indica el código del artículo
        /// </summary>
        /// <value>Indica el código del artículo</value>
        [Required]
        [DataMember(Name = "codigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Indica la cantidad a comprar
        /// </summary>
        /// <value>Indica la cantidad a comprar</value>
        [Required]
        [DataMember(Name = "cantidad")]
        public decimal Cantidad { get; set; }

        /// <summary>
        /// Indica el valor unitario
        /// </summary>
        /// <value>Indica el valor unitario</value>
        [Required]
        [DataMember(Name = "valorUnitario")]
        public int ValorUnitario { get; set; }

        /// <summary>
        /// Indica el valor unitario más IVA
        /// </summary>
        /// <value>Indica el valor unitario más IVA</value>
        [Required]
        [DataMember(Name = "valorUnitarioMasIVA")]
        public int ValorUnitarioMasIVA { get; set; }

        /// <summary>
        /// Indica el porcentaje del IVA
        /// </summary>
        /// <value>Indica el porcentaje del IVA</value>
        [Required]
        [DataMember(Name = "porcentajeIVA")]
        public decimal PorcentajeIVA { get; set; }

        /// <summary>
        /// Indica el total por artículo
        /// </summary>
        /// <value>Indica el total por artículo</value>
        [Required]
        [DataMember(Name = "total")]
        public int Total { get; set; }

        /// <summary>
        /// Indica el código de la bodega del punto de venta
        /// </summary>
        /// <value>Indica el código de la bodega del punto de venta</value>
        [Required]
        [DataMember(Name = "codigoBodega")]
        public string CodigoBodega { get; set; }

        /// <summary>
        /// Indica el código del IVA
        /// </summary>
        /// <value>Indica el código del IVA</value>
        [Required]
        [DataMember(Name = "codigoIVA")]
        public string CodigoIVA { get; set; }

        /// <summary>
        /// Indica si el artículo fue eliminado
        /// </summary>
        /// <value>True</value>
        [Required]
        [DataMember(Name = "eliminado")]
        public bool Eliminado { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticuloRequest {\n");
            sb.Append("  CodigoArticulo: ").Append(CodigoArticulo).Append("\n");
            sb.Append("  Cantidad: ").Append(Cantidad).Append("\n");
            sb.Append("  ValorUnitario: ").Append(ValorUnitario).Append("\n");
            sb.Append("  ValorUnitarioMasIVA: ").Append(ValorUnitarioMasIVA).Append("\n");
            sb.Append("  PorcentajeIVA: ").Append(PorcentajeIVA).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  CodigoBodega: ").Append(CodigoBodega).Append("\n");
            sb.Append("  CodigoIVA: ").Append(CodigoIVA).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticuloRequest)obj);
        }

        /// <summary>
        /// Returns true if ArticuloRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticuloRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticuloRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CodigoArticulo == other.CodigoArticulo ||
                    CodigoArticulo != null &&
                    CodigoArticulo.Equals(other.CodigoArticulo)
                ) &&
                (
                    Cantidad == other.Cantidad ||
                    Cantidad != null &&
                    Cantidad.Equals(other.Cantidad)
                ) &&
                (
                    ValorUnitario == other.ValorUnitario ||
                    ValorUnitario != null &&
                    ValorUnitario.Equals(other.ValorUnitario)
                ) &&
                (
                    ValorUnitarioMasIVA == other.ValorUnitarioMasIVA ||
                    ValorUnitarioMasIVA != null &&
                    ValorUnitarioMasIVA.Equals(other.ValorUnitarioMasIVA)
                ) &&
                (
                    PorcentajeIVA == other.PorcentajeIVA ||
                    PorcentajeIVA != null &&
                    PorcentajeIVA.Equals(other.PorcentajeIVA)
                ) &&
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) &&
                (
                    CodigoBodega == other.CodigoBodega ||
                    CodigoBodega != null &&
                    CodigoBodega.Equals(other.CodigoBodega)
                ) &&
                (
                    CodigoIVA == other.CodigoIVA ||
                    CodigoIVA != null &&
                    CodigoIVA.Equals(other.CodigoIVA)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CodigoArticulo != null)
                    hashCode = hashCode * 59 + CodigoArticulo.GetHashCode();
                if (Cantidad != null)
                    hashCode = hashCode * 59 + Cantidad.GetHashCode();
                if (ValorUnitario != null)
                    hashCode = hashCode * 59 + ValorUnitario.GetHashCode();
                if (ValorUnitarioMasIVA != null)
                    hashCode = hashCode * 59 + ValorUnitarioMasIVA.GetHashCode();
                if (PorcentajeIVA != null)
                    hashCode = hashCode * 59 + PorcentajeIVA.GetHashCode();
                if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                if (CodigoBodega != null)
                    hashCode = hashCode * 59 + CodigoBodega.GetHashCode();
                if (CodigoIVA != null)
                    hashCode = hashCode * 59 + CodigoIVA.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ArticuloRequest left, ArticuloRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticuloRequest left, ArticuloRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
