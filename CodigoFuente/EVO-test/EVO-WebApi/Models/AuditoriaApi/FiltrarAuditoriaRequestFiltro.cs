/*
 * API de Auditoria
 *
 * API de administración de Auditoria 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.AuditoriaApi
{
    /// <summary>
    /// Criterios por los que se filtrará la consulta
    /// </summary>
    [DataContract]
    public partial class FiltrarAuditoriaRequestFiltro : IEquatable<FiltrarAuditoriaRequestFiltro>
    { 
        /// <summary>
        /// Filtro por fecha
        /// </summary>
        /// <value>Filtro por fecha</value>
        [DataMember(Name="fecha")]
        public string Fecha { get; set; }

        /// <summary>
        /// Filtro por usuario
        /// </summary>
        /// <value>Filtro por usuario</value>
        [DataMember(Name="usuario")]
        public string Usuario { get; set; }

        /// <summary>
        /// Filtro por acción
        /// </summary>
        /// <value>Filtro por acción</value>
        [DataMember(Name="accion")]
        public string Accion { get; set; }

        /// <summary>
        /// Filtro por parámetros
        /// </summary>
        /// <value>Filtro por parámetros</value>
        [DataMember(Name="parametros")]
        public string Parametros { get; set; }

        /// <summary>
        /// Filtro por IP
        /// </summary>
        /// <value>Filtro por IP</value>
        [DataMember(Name="ip")]
        public string Ip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FiltrarAuditoriaRequestFiltro {\n");
            sb.Append("  Fecha: ").Append(Fecha).Append("\n");
            sb.Append("  Usuario: ").Append(Usuario).Append("\n");
            sb.Append("  Accion: ").Append(Accion).Append("\n");
            sb.Append("  Parametros: ").Append(Parametros).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FiltrarAuditoriaRequestFiltro)obj);
        }

        /// <summary>
        /// Returns true if FiltrarAuditoriaRequestFiltro instances are equal
        /// </summary>
        /// <param name="other">Instance of FiltrarAuditoriaRequestFiltro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiltrarAuditoriaRequestFiltro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Fecha == other.Fecha ||
                    Fecha != null &&
                    Fecha.Equals(other.Fecha)
                ) && 
                (
                    Usuario == other.Usuario ||
                    Usuario != null &&
                    Usuario.Equals(other.Usuario)
                ) && 
                (
                    Accion == other.Accion ||
                    Accion != null &&
                    Accion.Equals(other.Accion)
                ) && 
                (
                    Parametros == other.Parametros ||
                    Parametros != null &&
                    Parametros.Equals(other.Parametros)
                ) && 
                (
                    Ip == other.Ip ||
                    Ip != null &&
                    Ip.Equals(other.Ip)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Fecha != null)
                    hashCode = hashCode * 59 + Fecha.GetHashCode();
                    if (Usuario != null)
                    hashCode = hashCode * 59 + Usuario.GetHashCode();
                    if (Accion != null)
                    hashCode = hashCode * 59 + Accion.GetHashCode();
                    if (Parametros != null)
                    hashCode = hashCode * 59 + Parametros.GetHashCode();
                    if (Ip != null)
                    hashCode = hashCode * 59 + Ip.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FiltrarAuditoriaRequestFiltro left, FiltrarAuditoriaRequestFiltro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FiltrarAuditoriaRequestFiltro left, FiltrarAuditoriaRequestFiltro right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}