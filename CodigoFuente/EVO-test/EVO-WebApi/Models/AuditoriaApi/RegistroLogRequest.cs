/*
 * API de Auditoria
 *
 * API de administración de Auditoria 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.AuditoriaApi
{
    /// <summary>
    /// Solicitud general del log
    /// </summary>
    [DataContract]
    public partial class RegistroLogRequest : IEquatable<RegistroLogRequest>
    {
        /// <summary>
        /// Mensaje del log
        /// </summary>
        /// <value>Mensaje del log</value>
        [DataMember(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Lista descripciónes de errores
        /// </summary>
        /// <value>Lista adicciones</value>
        [DataMember(Name = "additional")]
        public List<string> Additional { get; set; }

        /// <summary>
        /// Nivel del log
        /// </summary>
        /// <value>Nivel del log</value>
        [DataMember(Name = "level")]
        public int Level { get; set; }

        /// <summary>
        /// Indica la fecha del log
        /// </summary>
        /// <value>Indica la fecha del log</value>
        [DataMember(Name = "timestamp")]
        public DateTime? Timestamp { get; set; }

        /// <summary>
        /// Nombre del archivo
        /// </summary>
        /// <value>Nombre del archivo</value>
        [DataMember(Name = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Linea del archivo
        /// </summary>
        /// <value>Linea del archivo</value>
        [DataMember(Name = "lineNumber")]
        public string LineNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistroLogRequest {\n");
            sb.Append("  Mensaje: ").Append(Message).Append("\n");
            sb.Append("  Additional: ").Append(Additional).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  LineNumber: ").Append(LineNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegistroLogRequest)obj);
        }

        /// <summary>
        /// Returns true if RegistroLogRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistroLogRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistroLogRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) &&
                (
                    Additional == other.Additional ||
                    Additional != null &&
                    Additional.SequenceEqual(other.Additional)
                ) &&
                (
                    Level == other.Level &&
                    Level.Equals(other.Level)
                ) &&
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) &&
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) &&
                (
                    LineNumber == other.LineNumber ||
                    LineNumber != null &&
                    LineNumber.Equals(other.LineNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                if (Additional != null)
                    hashCode = hashCode * 59 + Additional.GetHashCode();              
                    hashCode = hashCode * 59 + Level.GetHashCode();
                if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                if (LineNumber != null)
                    hashCode = hashCode * 59 + LineNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RegistroLogRequest left, RegistroLogRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegistroLogRequest left, RegistroLogRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
