/*
 * API de    API de administración de Cajas
 *
 * API de administración de Cajas 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.CajasApi
{
    /// <summary>
    /// Representa el estado de la caja en el punto de venta
    /// </summary>
    [DataContract]
    public partial class EstadoCajaResponse : IEquatable<EstadoCajaResponse>
    {
        /// <summary>
        /// Indica el estado del cierre de caja del día anterior
        /// </summary>
        /// <value>Indica el estado del cierre de caja del día anterior</value>
        [DataMember(Name = "cierreCajaAnterior")]
        public bool CierreCajaAnterior { get; set; }

        /// <summary>
        /// Indica el estado del apertura de caja del día de hoy
        /// </summary>
        /// <value>Indica el estado del apertura de caja del día de hoy</value>
        [DataMember(Name = "aperturaCajaActual")]
        public bool AperturaCajaActual { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EstadoCajaResponse {\n");
            sb.Append("  CierreCajaAnterior: ").Append(CierreCajaAnterior).Append("\n");
            sb.Append("  AperturaCajaActual: ").Append(AperturaCajaActual).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EstadoCajaResponse)obj);
        }

        /// <summary>
        /// Returns true if EstadoCajaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EstadoCajaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstadoCajaResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CierreCajaAnterior == other.CierreCajaAnterior ||
                    CierreCajaAnterior != null &&
                    CierreCajaAnterior.Equals(other.CierreCajaAnterior)
                ) &&
                (
                    AperturaCajaActual == other.AperturaCajaActual ||
                    AperturaCajaActual != null &&
                    AperturaCajaActual.Equals(other.AperturaCajaActual)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CierreCajaAnterior != null)
                    hashCode = hashCode * 59 + CierreCajaAnterior.GetHashCode();
                if (AperturaCajaActual != null)
                    hashCode = hashCode * 59 + AperturaCajaActual.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EstadoCajaResponse left, EstadoCajaResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EstadoCajaResponse left, EstadoCajaResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
