/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Objeto que contiene un encabezado y detalles de entrega del pedido
    /// </summary>
    [DataContract]
    public partial class EntregasResponse : IEquatable<EntregasResponse>
    {
        /// <summary>
        /// Código del pedido
        /// </summary>
        /// <value>Código del pedido</value>
        [DataMember(Name = "NumeroPedido")]
        public string NumeroPedido { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>
        [DataMember(Name = "Cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// Zona del cliente
        /// </summary>
        /// <value>Zona del cliente</value>
        [DataMember(Name = "Zona")]
        public string Zona { get; set; }

        /// <summary>
        /// Número de entregas
        /// </summary>
        /// <value>Número de entregas</value>
        [DataMember(Name = "NumeroEntregas")]
        public string NumeroEntregas { get; set; }

        /// <summary>
        /// Estado Pedido
        /// </summary>
        /// <value>Estado Pedido</value>
        [DataMember(Name = "Estado")]
        public string Estado { get; set; }       

        /// <summary>
        /// Detalle del pedido
        /// </summary>
        /// <value>Detalle del pedido</value>
        [DataMember(Name = "Articulos")]
        public List<EntregasResponseArticulos> Articulos { get; set; }

        /// <summary>
        /// Lista de entregas
        /// </summary>
        /// <value>Lista de entregas</value>
        [DataMember(Name = "Entregas")]
        public List<EntregasResponseEntregas> Entregas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntregasResponse {\n");
            sb.Append("  NumeroPedido: ").Append(NumeroPedido).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Zona: ").Append(Zona).Append("\n");
            sb.Append("  NumeroEntregas: ").Append(NumeroEntregas).Append("\n");
            sb.Append("  Articulos: ").Append(Articulos).Append("\n");
            sb.Append("  Entregas: ").Append(Entregas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EntregasResponse)obj);
        }

        /// <summary>
        /// Returns true if EntregasResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EntregasResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntregasResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NumeroPedido == other.NumeroPedido ||
                    NumeroPedido != null &&
                    NumeroPedido.Equals(other.NumeroPedido)
                ) &&
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) &&
                (
                    Zona == other.Zona ||
                    Zona != null &&
                    Zona.Equals(other.Zona)
                ) &&
                (
                    NumeroEntregas == other.NumeroEntregas ||
                    NumeroEntregas != null &&
                    NumeroEntregas.Equals(other.NumeroEntregas)
                ) &&
                (
                    Articulos == other.Articulos ||
                    Articulos != null &&
                    Articulos.SequenceEqual(other.Articulos)
                ) &&
                (
                    Entregas == other.Entregas ||
                    Entregas != null &&
                    Entregas.SequenceEqual(other.Entregas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NumeroPedido != null)
                    hashCode = hashCode * 59 + NumeroPedido.GetHashCode();
                if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                if (Zona != null)
                    hashCode = hashCode * 59 + Zona.GetHashCode();
                if (NumeroEntregas != null)
                    hashCode = hashCode * 59 + NumeroEntregas.GetHashCode();
                if (Articulos != null)
                    hashCode = hashCode * 59 + Articulos.GetHashCode();
                if (Entregas != null)
                    hashCode = hashCode * 59 + Entregas.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EntregasResponse left, EntregasResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntregasResponse left, EntregasResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
