/*
 * API de Pedidos
 *
 * API de administraci√≥n de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Objeto que contiene una entrega del pedido
    /// </summary>
    [DataContract]
    public partial class EntregasRequest : IEquatable<EntregasRequest>
    {
        /// <summary>
        /// Id del pedido
        /// </summary>
        /// <value>Id del pedido</value>
        [DataMember(Name = "PedidoId")]
        public int PedidoId { get; set; }

        /// <summary>
        /// Fecha entrega
        /// </summary>
        /// <value>Fecha entrega</value>
        [DataMember(Name = "FechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Hora entrega
        /// </summary>
        /// <value>Hora entrega</value>
        [DataMember(Name = "HoraEntrega")]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Id del tipo de vehiculo
        /// </summary>
        /// <value>3</value>
        [DataMember(Name = "TipoVehiculoId")]
        public int TipoVehiculoId { get; set; }

        /// <summary>
        /// Lista de detalles de la entrega
        /// </summary>
        /// <value>Lista de detalles de la entrega</value>
        [DataMember(Name = "Detalles")]
        public List<EntregasRequestDetalles> Detalles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntregasRequest {\n");
            sb.Append("  PedidoId: ").Append(PedidoId).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  HoraEntrega: ").Append(HoraEntrega).Append("\n");
            sb.Append("  Detalles: ").Append(Detalles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EntregasRequest)obj);
        }

        /// <summary>
        /// Returns true if EntregasRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of EntregasRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntregasRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PedidoId == other.PedidoId &&
                    PedidoId.Equals(other.PedidoId)
                ) &&
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) &&
                (
                    HoraEntrega == other.HoraEntrega ||
                    HoraEntrega != null &&
                    HoraEntrega.Equals(other.HoraEntrega)
                ) &&
                (
                    Detalles == other.Detalles ||
                    Detalles != null &&
                    Detalles.SequenceEqual(other.Detalles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)               
                    hashCode = hashCode * 59 + PedidoId.GetHashCode();
                if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                if (HoraEntrega != null)
                    hashCode = hashCode * 59 + HoraEntrega.GetHashCode();
                if (Detalles != null)
                    hashCode = hashCode * 59 + Detalles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EntregasRequest left, EntregasRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntregasRequest left, EntregasRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
