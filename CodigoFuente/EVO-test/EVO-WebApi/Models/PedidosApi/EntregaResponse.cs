/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Objeto que contiene una entrega del pedido
    /// </summary>
    [DataContract]
    public partial class EntregaResponse : IEquatable<EntregaResponse>
    {
        /// <summary>
        /// Cantidad Total
        /// </summary>
        /// <value>CantidadTotal</value>
        [DataMember(Name = "cantidadTotal")]
        public string CantidadTotal { get; set; }

        /// <summary>
        /// Id de pedido
        /// </summary>
        /// <value>Id de pedido</value>
        [DataMember(Name = "pedidoId")]
        public int PedidoId { get; set; }

        /// <summary>
        /// Código pedido
        /// </summary>
        /// <value>Código pedido</value>
        [DataMember(Name = "codigoPedido")]
        public string CodigoPedido { get; set; }

        /// <summary>
        /// Cliente
        /// </summary>
        /// <value>Cliente</value>
        [DataMember(Name = "cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// Usuario
        /// </summary>
        /// <value>Usuario</value>
        [DataMember(Name = "usuario")]
        public string Usuario { get; set; }

        /// <summary>
        /// NombresApellidos
        /// </summary>
        /// <value>NombresApellidos</value>
        [DataMember(Name = "nombresApellidos")]
        public string NombresApellidos { get; set; }

        /// <summary>
        /// Zona del cliente
        /// </summary>
        /// <value>Zona del cliente</value>
        [DataMember(Name = "zona")]
        public string Zona { get; set; }

        /// <summary>
        /// Orden de compra
        /// </summary>
        /// <value>Orden de compra</value>
        [DataMember(Name = "ordenCompra")]
        public string OrdenCompra { get; set; }

        /// <summary>
        /// Fecha entrega
        /// </summary>
        /// <value>Fecha entrega</value>
        [DataMember(Name = "fechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Fecha entrega
        /// </summary>
        /// <value>Fecha entrega</value>
        [DataMember(Name = "horaEntrega")]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Estado entrega
        /// </summary>
        /// <value>Estado entrega</value>
        [DataMember(Name = "estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Placa vehiculo
        /// </summary>
        /// <value>Placa vehiculo</value>
        [DataMember(Name = "placa")]
        public string Placa { get; set; }

        /// <summary>
        /// Id del tipo de vehiculo
        /// </summary>
        /// <value>4</value>
        [DataMember(Name = "tipoVehiculoId")]
        public int TipoVehiculoId { get; set; }

        /// <summary>
        /// Nombre del tipo de vehiculo
        /// </summary>
        /// <value>Nombre del tipo de vehiculo</value>
        [DataMember(Name = "TipoVehiculo")]
        public string TipoVehiculo { get; set; }

        /// <summary>
        /// Capacidad del tipo de vehiculo
        /// </summary>
        /// <value>Capacidad del tipo de vehiculo</value>
        [DataMember(Name = "CapacidadTipoVehiculo")]
        public string CapacidadTipoVehiculo { get; set; }

        /// <summary>
        /// Lista de detalles de la entrega
        /// </summary>
        /// <value>Lista de detalles de la entrega</value>
        [DataMember(Name = "Detalles")]
        public List<EntregaResponseDetalles> Detalles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EntregaResponse {\n");
            sb.Append("  PedidoId: ").Append(PedidoId).Append("\n");
            sb.Append("  CodigoPedido: ").Append(CodigoPedido).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Zona: ").Append(Zona).Append("\n");
            sb.Append("  OrdenCompra: ").Append(OrdenCompra).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Placa: ").Append(Placa).Append("\n");
            sb.Append("  Detalles: ").Append(Detalles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EntregaResponse)obj);
        }

        /// <summary>
        /// Returns true if EntregaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EntregaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EntregaResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PedidoId == other.PedidoId ||
                    PedidoId != null &&
                    PedidoId.Equals(other.PedidoId)
                ) &&
                (
                    CodigoPedido == other.CodigoPedido ||
                    CodigoPedido != null &&
                    CodigoPedido.Equals(other.CodigoPedido)
                ) &&
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) &&
                (
                    Zona == other.Zona ||
                    Zona != null &&
                    Zona.Equals(other.Zona)
                ) &&
                (
                    OrdenCompra == other.OrdenCompra ||
                    OrdenCompra != null &&
                    OrdenCompra.Equals(other.OrdenCompra)
                ) &&
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) &&
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) &&
                (
                    Placa == other.Placa ||
                    Placa != null &&
                    Placa.Equals(other.Placa)
                ) &&
                (
                    Detalles == other.Detalles ||
                    Detalles != null &&
                    Detalles.SequenceEqual(other.Detalles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PedidoId != null)
                    hashCode = hashCode * 59 + PedidoId.GetHashCode();
                if (CodigoPedido != null)
                    hashCode = hashCode * 59 + CodigoPedido.GetHashCode();
                if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                if (Zona != null)
                    hashCode = hashCode * 59 + Zona.GetHashCode();
                if (OrdenCompra != null)
                    hashCode = hashCode * 59 + OrdenCompra.GetHashCode();
                if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                if (Placa != null)
                    hashCode = hashCode * 59 + Placa.GetHashCode();
                if (Detalles != null)
                    hashCode = hashCode * 59 + Detalles.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EntregaResponse left, EntregaResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EntregaResponse left, EntregaResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
