/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Artículo asociado a la gestion de compra del pedido
    /// </summary>
    [DataContract]
    public partial class AccionCompraResponse : IEquatable<AccionCompraResponse>
    {
        /// <summary>
        /// Id de la acción de compra
        /// </summary>
        /// <value>Id de la acción de compra</value>
        [DataMember(Name = "accionId")]
        public int AccionId { get; set; }

        /// <summary>
        /// Nombre de la acción de compra
        /// </summary>
        /// <value>Nombre de la acción de compra</value>
        [DataMember(Name = "nombreAccion")]
        public string NombreAccion { get; set; }

        /// <summary>
        /// Artículos asociados a las gestiones de compra del pedido
        /// </summary>
        /// <value>Artículos asociados a las gestiones de compra del pedido</value>
        [DataMember(Name = "articulos")]
        public List<ArticuloAccionCompraResponse> Articulos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccionCompraResponse {\n");
            sb.Append("  AccionId: ").Append(AccionId).Append("\n");
            sb.Append("  NombreAccion: ").Append(NombreAccion).Append("\n");
            sb.Append("  Articulos: ").Append(Articulos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccionCompraResponse)obj);
        }

        /// <summary>
        /// Returns true if AccionCompraResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AccionCompraResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccionCompraResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    AccionId == other.AccionId ||
                    AccionId != null &&
                    AccionId.Equals(other.AccionId)
                ) &&
                (
                    NombreAccion == other.NombreAccion ||
                    NombreAccion != null &&
                    NombreAccion.Equals(other.NombreAccion)
                ) &&
                (
                    Articulos == other.Articulos ||
                    Articulos != null &&
                    Articulos.SequenceEqual(other.Articulos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (AccionId != null)
                    hashCode = hashCode * 59 + AccionId.GetHashCode();
                if (NombreAccion != null)
                    hashCode = hashCode * 59 + NombreAccion.GetHashCode();
                if (Articulos != null)
                    hashCode = hashCode * 59 + Articulos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(AccionCompraResponse left, AccionCompraResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccionCompraResponse left, AccionCompraResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
