/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Criterios por los que se filtrará la consulta
    /// </summary>
    [DataContract]
    public partial class FiltrarPedidoCompraRequestFiltro : IEquatable<FiltrarPedidoCompraRequestFiltro>
    {
        /// <summary>
        /// Indica el número del pedido
        /// </summary>
        /// <value>Indica el número del pedido</value>
        [DataMember(Name = "numeroPedido")]
        public string NumeroPedido { get; set; }

        /// <summary>
        /// Fecha solicitud del pedido
        /// </summary>
        /// <value>Fecha solicitud del pedido</value>
        [DataMember(Name = "fechaSolicitud")]
        public string FechaSolicitud { get; set; }

        /// <summary>
        /// Fecha limite sugerida del pedido
        /// </summary>
        /// <value>Fecha limite sugerida del pedido</value>
        [DataMember(Name = "fechaLimiteSugerida")]
        public string FechaLimiteSugerida { get; set; }

        /// <summary>
        /// Indica el estado del pedido
        /// </summary>
        /// <value>Indica el estado del pedido</value>
        [DataMember(Name = "estadoPedido")]
        public string EstadoPedido { get; set; }

        /// <summary>
        /// Nombre del cliente que solicitó el pedido
        /// </summary>
        /// <value>Nombre del cliente que solicitó el pedido</value>
        [DataMember(Name = "cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// Días que faltan para la entrega del pedido
        /// </summary>
        /// <value>Días que faltan para la entrega del pedido</value>
        [DataMember(Name = "diasEntrega")]
        public string DiasEntrega { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FiltrarPedidoCompraRequestFiltro {\n");
            sb.Append("  NumeroPedido: ").Append(NumeroPedido).Append("\n");
            sb.Append("  FechaSolicitud: ").Append(FechaSolicitud).Append("\n");
            sb.Append("  FechaLimiteSugerida: ").Append(FechaLimiteSugerida).Append("\n");
            sb.Append("  EstadoPedido: ").Append(EstadoPedido).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  DiasEntrega: ").Append(DiasEntrega).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FiltrarPedidoCompraRequestFiltro)obj);
        }

        /// <summary>
        /// Returns true if FiltrarPedidoCompraRequestFiltro instances are equal
        /// </summary>
        /// <param name="other">Instance of FiltrarPedidoCompraRequestFiltro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiltrarPedidoCompraRequestFiltro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NumeroPedido == other.NumeroPedido ||
                    NumeroPedido != null &&
                    NumeroPedido.Equals(other.NumeroPedido)
                ) &&
                (
                    FechaSolicitud == other.FechaSolicitud ||
                    FechaSolicitud != null &&
                    FechaSolicitud.Equals(other.FechaSolicitud)
                ) &&
                (
                    FechaLimiteSugerida == other.FechaLimiteSugerida ||
                    FechaLimiteSugerida != null &&
                    FechaLimiteSugerida.Equals(other.FechaLimiteSugerida)
                ) &&
                (
                    EstadoPedido == other.EstadoPedido ||
                    EstadoPedido != null &&
                    EstadoPedido.Equals(other.EstadoPedido)
                ) &&
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) &&
                (
                    DiasEntrega == other.DiasEntrega ||
                    DiasEntrega != null &&
                    DiasEntrega.Equals(other.DiasEntrega)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NumeroPedido != null)
                    hashCode = hashCode * 59 + NumeroPedido.GetHashCode();
                if (FechaSolicitud != null)
                    hashCode = hashCode * 59 + FechaSolicitud.GetHashCode();
                if (FechaLimiteSugerida != null)
                    hashCode = hashCode * 59 + FechaLimiteSugerida.GetHashCode();
                if (EstadoPedido != null)
                    hashCode = hashCode * 59 + EstadoPedido.GetHashCode();
                if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                if (DiasEntrega != null)
                    hashCode = hashCode * 59 + DiasEntrega.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FiltrarPedidoCompraRequestFiltro left, FiltrarPedidoCompraRequestFiltro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FiltrarPedidoCompraRequestFiltro left, FiltrarPedidoCompraRequestFiltro right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
