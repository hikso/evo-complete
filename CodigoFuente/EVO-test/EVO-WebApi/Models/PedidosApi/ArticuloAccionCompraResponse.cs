/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Acción de compra
    /// </summary>
    [DataContract]
    public partial class ArticuloAccionCompraResponse : IEquatable<ArticuloAccionCompraResponse>
    {
        /// <summary>
        /// Id del detalle del pedido
        /// </summary>
        /// <value>Id del detalle del pedido</value>
        [DataMember(Name = "detallePedidoId")]
        public int DetallePedidoId { get; set; }

        /// <summary>
        /// Cantidad asociada a esta orden de compra
        /// </summary>
        /// <value>Cantidad asociada a esta orden de compra</value>
        [DataMember(Name = "cantidad")]
        public string Cantidad { get; set; }

        /// <summary>
        /// Orden de compra
        /// </summary>
        /// <value>Orden de compra</value>
        [DataMember(Name = "ordenCompra")]
        public string OrdenCompra { get; set; }       

        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [DataMember(Name = "codigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Nombre del artículo
        /// </summary>
        /// <value>Nombre del artículo</value>
        [DataMember(Name = "nombreArticulo")]
        public string NombreArticulo { get; set; }

        /// <summary>
        /// Cantidad solicitada
        /// </summary>
        /// <value>Cantidad solicitada</value>
        [DataMember(Name = "cantidadSolicitada")]
        public string CantidadSolicitada { get; set; }

        /// <summary>
        /// Unidad de medida del artículo
        /// </summary>
        /// <value>Unidad de medida del artículo</value>
        [DataMember(Name = "unidadMedida")]
        public string UnidadMedida { get; set; }       

        /// <summary>
        /// Stock del almacen de compras de este artículo
        /// </summary>
        /// <value>Stock del almacen de compras de este artículo</value>
        [DataMember(Name = "stockAlmacen")]
        public string StockAlmacen { get; set; }

        /// <summary>
        /// Observaciones del artículo
        /// </summary>
        /// <value>Observaciones del artículo</value>
        [DataMember(Name = "observaciones")]
        public string Observaciones { get; set; }

        /// <summary>
        /// Cantidad faltante a gestionar
        /// </summary>
        /// <value>Cantidad a gestionar</value>   

        [DataMember(Name = "cantidadFaltanteGestionar")]
        public string CantidadFaltanteGestionar { get; set; }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticuloAccionCompraResponse {\n");
            sb.Append("  DetallePedidoId: ").Append(DetallePedidoId).Append("\n");
            sb.Append("  Cantidad: ").Append(Cantidad).Append("\n");
            sb.Append("  OrdenCompra: ").Append(OrdenCompra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticuloAccionCompraResponse)obj);
        }

        /// <summary>
        /// Returns true if ArticuloAccionCompraResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticuloAccionCompraResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticuloAccionCompraResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    DetallePedidoId == other.DetallePedidoId ||
                    DetallePedidoId != null &&
                    DetallePedidoId.Equals(other.DetallePedidoId)
                ) &&
                (
                    Cantidad == other.Cantidad ||
                    Cantidad != null &&
                    Cantidad.Equals(other.Cantidad)
                ) &&
                (
                    OrdenCompra == other.OrdenCompra ||
                    OrdenCompra != null &&
                    OrdenCompra.Equals(other.OrdenCompra)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DetallePedidoId != null)
                    hashCode = hashCode * 59 + DetallePedidoId.GetHashCode();
                if (Cantidad != null)
                    hashCode = hashCode * 59 + Cantidad.GetHashCode();
                if (OrdenCompra != null)
                    hashCode = hashCode * 59 + OrdenCompra.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ArticuloAccionCompraResponse left, ArticuloAccionCompraResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticuloAccionCompraResponse left, ArticuloAccionCompraResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
