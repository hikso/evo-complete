/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ConsultaPedidoResponseDetalles : IEquatable<ConsultaPedidoResponseDetalles>
    {
        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [DataMember(Name = "CodigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Nombre del artículo
        /// </summary>
        /// <value>Nombre del artículo</value>
        [DataMember(Name = "NombreArticulo")]
        public string NombreArticulo { get; set; }

        /// <summary>
        /// Estado del artículo
        /// </summary>
        /// <value>Estado del artículo</value>
        [DataMember(Name = "EstadoArticulo")]
        public string EstadoArticulo { get; set; }

        /// <summary>
        /// Cantidad del artículo solicitada
        /// </summary>
        /// <value>Cantidad del artículo solicitada</value>
        [DataMember(Name = "CantidadSolicitada")]
        public string CantidadSolicitada { get; set; }

        /// <summary>
        /// Unidad de medida del artículo
        /// </summary>
        /// <value>Unidad de medida del artículo</value>
        [DataMember(Name = "UnidadMedida")]
        public string UnidadMedida { get; set; }

        /// <summary>
        /// Cantidad aprobada por la planta
        /// </summary>
        /// <value>Cantidad aprobada por la planta</value>
        [DataMember(Name = "CantidadAprobada")]
        public string CantidadAprobada { get; set; }        

        /// <summary>
        /// Fecha cuando llego el artículo a la bodega que solicitó el pedido que fue aprobado
        /// </summary>
        /// <value>Fecha cuando llego el artículo a la bodega que solicitó el pedido que fue aprobado</value>
        [DataMember(Name = "FechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Costo de traslado por artículo
        /// </summary>
        /// <value>Costo de traslado por artículo</value>
        [DataMember(Name = "CostoTraslado")]
        public string CostoTraslado { get; set; }

        /// <summary>
        /// Costo de transporte por artículo
        /// </summary>
        /// <value>Costo de transporte por artículo</value>
        [DataMember(Name = "CostoTransporte")]
        public string CostoTransporte { get; set; }

        /// <summary>
        /// Observación
        /// </summary>
        /// <value></value>      
        [DataMember(Name = "Observacion")]
        public string Observacion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConsultaPedidoResponseDetalles {\n");
            sb.Append("  CodigoArticulo: ").Append(CodigoArticulo).Append("\n");
            sb.Append("  NombreArticulo: ").Append(NombreArticulo).Append("\n");
            sb.Append("  EstadoArticulo: ").Append(EstadoArticulo).Append("\n");
            sb.Append("  CantidadSolicitada: ").Append(CantidadSolicitada).Append("\n");
            sb.Append("  UnidadMedida: ").Append(UnidadMedida).Append("\n");
            sb.Append("  CantidadAprobada: ").Append(CantidadAprobada).Append("\n");           
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  CostoTraslado: ").Append(CostoTraslado).Append("\n");
            sb.Append("  CostoTransporte: ").Append(CostoTransporte).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConsultaPedidoResponseDetalles)obj);
        }

        /// <summary>
        /// Returns true if ConsultaPedidoResponseDetalles instances are equal
        /// </summary>
        /// <param name="other">Instance of ConsultaPedidoResponseDetalles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConsultaPedidoResponseDetalles other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CodigoArticulo == other.CodigoArticulo ||
                    CodigoArticulo != null &&
                    CodigoArticulo.Equals(other.CodigoArticulo)
                ) &&
                (
                    NombreArticulo == other.NombreArticulo ||
                    NombreArticulo != null &&
                    NombreArticulo.Equals(other.NombreArticulo)
                ) &&
                (
                    EstadoArticulo == other.EstadoArticulo ||
                    EstadoArticulo != null &&
                    EstadoArticulo.Equals(other.EstadoArticulo)
                ) &&
                (
                    CantidadSolicitada == other.CantidadSolicitada ||
                    CantidadSolicitada != null &&
                    CantidadSolicitada.Equals(other.CantidadSolicitada)
                ) &&
                (
                    UnidadMedida == other.UnidadMedida ||
                    UnidadMedida != null &&
                    UnidadMedida.Equals(other.UnidadMedida)
                ) &&
                (
                    CantidadAprobada == other.CantidadAprobada ||
                    CantidadAprobada != null &&
                    CantidadAprobada.Equals(other.CantidadAprobada)
                )&&
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) &&
                (
                    CostoTraslado == other.CostoTraslado ||
                    CostoTraslado != null &&
                    CostoTraslado.Equals(other.CostoTraslado)
                ) &&
                (
                    CostoTransporte == other.CostoTransporte ||
                    CostoTransporte != null &&
                    CostoTransporte.Equals(other.CostoTransporte)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CodigoArticulo != null)
                    hashCode = hashCode * 59 + CodigoArticulo.GetHashCode();
                if (NombreArticulo != null)
                    hashCode = hashCode * 59 + NombreArticulo.GetHashCode();
                if (EstadoArticulo != null)
                    hashCode = hashCode * 59 + EstadoArticulo.GetHashCode();
                if (CantidadSolicitada != null)
                    hashCode = hashCode * 59 + CantidadSolicitada.GetHashCode();
                if (UnidadMedida != null)
                    hashCode = hashCode * 59 + UnidadMedida.GetHashCode();
                if (CantidadAprobada != null)
                    hashCode = hashCode * 59 + CantidadAprobada.GetHashCode();                
                if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                if (CostoTraslado != null)
                    hashCode = hashCode * 59 + CostoTraslado.GetHashCode();
                if (CostoTransporte != null)
                    hashCode = hashCode * 59 + CostoTransporte.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ConsultaPedidoResponseDetalles left, ConsultaPedidoResponseDetalles right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConsultaPedidoResponseDetalles left, ConsultaPedidoResponseDetalles right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
