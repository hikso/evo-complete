/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_WebApi.Models.PedidosApi
{ 
    /// <summary>
    /// Criterios por los que se filtrará la consulta
    /// </summary>
    [DataContract]
    public partial class FiltrarArchivoRequestFiltro : IEquatable<FiltrarArchivoRequestFiltro>
    { 
        /// <summary>
        /// Fecha inicial en la que se carga el archivo
        /// </summary>
        /// <value>Fecha inicial en la que se carga el archivo</value>
        [DataMember(Name="fechaDesde")]
        public string FechaDesde { get; set; }

        /// <summary>
        /// Fecha final en la que se carga el archivo
        /// </summary>
        /// <value>Fecha final en la que se carga el archivo</value>
        [DataMember(Name="fechaHasta")]
        public string FechaHasta { get; set; }

        /// <summary>
        /// Fecha en la que se carga el archivo
        /// </summary>
        /// <value>Fecha en la que se carga el archivo</value>
        [DataMember(Name="fechaCarga")]
        public string FechaCarga { get; set; }

        /// <summary>
        /// Id del estado del pedido
        /// </summary>
        /// <value>Id del estado del pedido</value>
        [DataMember(Name="nombreArchivo")]
        public string NombreArchivo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FiltrarArchivoRequestFiltro {\n");
            sb.Append("  FechaDesde: ").Append(FechaDesde).Append("\n");
            sb.Append("  FechaHasta: ").Append(FechaHasta).Append("\n");
            sb.Append("  FechaCarga: ").Append(FechaCarga).Append("\n");
            sb.Append("  NombreArchivo: ").Append(NombreArchivo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FiltrarArchivoRequestFiltro)obj);
        }

        /// <summary>
        /// Returns true if FiltrarArchivoRequestFiltro instances are equal
        /// </summary>
        /// <param name="other">Instance of FiltrarArchivoRequestFiltro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiltrarArchivoRequestFiltro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FechaDesde == other.FechaDesde ||
                    FechaDesde != null &&
                    FechaDesde.Equals(other.FechaDesde)
                ) && 
                (
                    FechaHasta == other.FechaHasta ||
                    FechaHasta != null &&
                    FechaHasta.Equals(other.FechaHasta)
                ) && 
                (
                    FechaCarga == other.FechaCarga ||
                    FechaCarga != null &&
                    FechaCarga.Equals(other.FechaCarga)
                ) && 
                (
                    NombreArchivo == other.NombreArchivo ||
                    NombreArchivo != null &&
                    NombreArchivo.Equals(other.NombreArchivo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FechaDesde != null)
                    hashCode = hashCode * 59 + FechaDesde.GetHashCode();
                    if (FechaHasta != null)
                    hashCode = hashCode * 59 + FechaHasta.GetHashCode();
                    if (FechaCarga != null)
                    hashCode = hashCode * 59 + FechaCarga.GetHashCode();
                    if (NombreArchivo != null)
                    hashCode = hashCode * 59 + NombreArchivo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FiltrarArchivoRequestFiltro left, FiltrarArchivoRequestFiltro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FiltrarArchivoRequestFiltro left, FiltrarArchivoRequestFiltro right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
