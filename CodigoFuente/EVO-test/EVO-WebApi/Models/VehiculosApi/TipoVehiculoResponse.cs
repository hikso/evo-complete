/*
 * API de Vehiculos
 *
 * API de administraci√≥n de Vehiculos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.VehiculosApi
{
    /// <summary>
    /// Indica un tipo de vehiculo
    /// </summary>
    [DataContract]
    public partial class TipoVehiculoResponse : IEquatable<TipoVehiculoResponse>
    {
        /// <summary>
        /// Id del tipo de vehiculo
        /// </summary>
        /// <value>Id del tipo de vehiculo</value>
        [Required]
        [DataMember(Name = "TipoVehiculoId")]
        public int TipoVehiculoId { get; set; }

        /// <summary>
        /// Tipo de vehiculo
        /// </summary>
        /// <value>Tipo de vehiculo</value>
        [Required]
        [DataMember(Name = "TipoVehiculo")]
        public string TipoVehiculo { get; set; }

        /// <summary>
        /// Capacidad
        /// </summary>
        /// <value>Capacidad</value>
        [DataMember(Name = "capacidad")]
        public decimal Capacidad { get; set; }

        /// <summary>
        /// Canasta
        /// </summary>
        /// <value>Canasta</value>
        [DataMember(Name = "canastas")]
        public decimal Canastas { get; set; }

        /// <summary>
        /// Peso
        /// </summary>
        /// <value>Peso</value>
        [DataMember(Name = "peso")]
        public decimal Peso { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TipoVehiculoResponse {\n");
            sb.Append("  TipoVehiculoId: ").Append(TipoVehiculoId).Append("\n");
            sb.Append("  TipoVehiculo: ").Append(TipoVehiculo).Append("\n");
            sb.Append("  Capacidad: ").Append(Capacidad).Append("\n");
            sb.Append("  Canastas: ").Append(Canastas).Append("\n");
            sb.Append("  Peso: ").Append(Peso).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TipoVehiculoResponse)obj);
        }

        /// <summary>
        /// Returns true if TipoVehiculoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TipoVehiculoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TipoVehiculoResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    TipoVehiculoId == other.TipoVehiculoId ||
                    TipoVehiculoId != null &&
                    TipoVehiculoId.Equals(other.TipoVehiculoId)
                ) &&
                (
                    TipoVehiculo == other.TipoVehiculo ||
                    TipoVehiculo != null &&
                    TipoVehiculo.Equals(other.TipoVehiculo)
                ) &&
                (
                    Capacidad == other.Capacidad ||
                    Capacidad != null &&
                    Capacidad.Equals(other.Capacidad)
                ) &&
                (
                    Canastas == other.Canastas ||
                    Canastas != null &&
                    Canastas.Equals(other.Canastas)
                ) &&
                (
                    Peso == other.Peso ||
                    Peso != null &&
                    Peso.Equals(other.Peso)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (TipoVehiculoId != null)
                    hashCode = hashCode * 59 + TipoVehiculoId.GetHashCode();
                if (TipoVehiculo != null)
                    hashCode = hashCode * 59 + TipoVehiculo.GetHashCode();
                if (Capacidad != null)
                    hashCode = hashCode * 59 + Capacidad.GetHashCode();
                if (Canastas != null)
                    hashCode = hashCode * 59 + Canastas.GetHashCode();
                if (Peso != null)
                    hashCode = hashCode * 59 + Peso.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TipoVehiculoResponse left, TipoVehiculoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TipoVehiculoResponse left, TipoVehiculoResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
