/*
 * API de Artículos
 *
 * API de administración de Articulos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.ArticulosApi
{
    /// <summary>
    /// Representa una actualización de gestión de solicitud de compra
    /// </summary>
    [DataContract]
    public partial class ActualizarCompraRequest : IEquatable<ActualizarCompraRequest>
    {
        /// <summary>
        /// Id del pedido
        /// </summary>
        /// <value>Id del pedido</value>
        [DataMember(Name = "pedidoId")]
        public int PedidoId { get; set; }

        /// <summary>
        /// Gets or Sets ArticulosActualizarCompra
        /// </summary>
        [DataMember(Name = "articulosActualizarCompra")]
        public List<ArticuloActualizarCompraRequest> ArticulosActualizarCompra { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActualizarCompraRequest {\n");
            sb.Append("  PedidoId: ").Append(PedidoId).Append("\n");
            sb.Append("  ArticulosActualizarCompra: ").Append(ArticulosActualizarCompra).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActualizarCompraRequest)obj);
        }

        /// <summary>
        /// Returns true if ActualizarCompraRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ActualizarCompraRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActualizarCompraRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    PedidoId == other.PedidoId ||
                    PedidoId != null &&
                    PedidoId.Equals(other.PedidoId)
                ) &&
                (
                    ArticulosActualizarCompra == other.ArticulosActualizarCompra ||
                    ArticulosActualizarCompra != null &&
                    ArticulosActualizarCompra.SequenceEqual(other.ArticulosActualizarCompra)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (PedidoId != null)
                    hashCode = hashCode * 59 + PedidoId.GetHashCode();
                if (ArticulosActualizarCompra != null)
                    hashCode = hashCode * 59 + ArticulosActualizarCompra.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ActualizarCompraRequest left, ActualizarCompraRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActualizarCompraRequest left, ActualizarCompraRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
