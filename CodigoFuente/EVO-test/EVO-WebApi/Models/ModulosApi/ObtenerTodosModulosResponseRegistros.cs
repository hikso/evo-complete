/*
 * API de Modulos
 *
 * API de administración de Módulos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: krestrepo@porcicarnes.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.ModulosApi
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ObtenerTodosModulosResponseRegistros : IEquatable<ObtenerTodosModulosResponseRegistros>
    { 
        /// <summary>
        /// Id del Módulo
        /// </summary>
        /// <value>Id del Módulo</value>
        [DataMember(Name="ModuloId")]
        public int ModuloId { get; set; }

        /// <summary>
        /// Nombre del Módulo
        /// </summary>
        /// <value>Nombre del Módulo</value>
        [DataMember(Name="Nombre")]
        public string Nombre { get; set; }

        /// <summary>
        /// Lista de funcionalidades
        /// </summary>
        /// <value>Lista de funcionalidades</value>
        [DataMember(Name="Funcionalidades")]
        public List<ObtenerTodosModulosResponseFuncionalidades> Funcionalidades { get; set; }

        /// <summary>
        /// Indica si el Módulo está activo / inactivo
        /// </summary>
        /// <value>Indica si el Módulo está activo / inactivo</value>
        [DataMember(Name="Activo")]
        public bool Activo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObtenerTodosModulosResponseRegistros {\n");
            sb.Append("  ModuloId: ").Append(ModuloId).Append("\n");
            sb.Append("  Nombre: ").Append(Nombre).Append("\n");
            sb.Append("  Funcionalidades: ").Append(Funcionalidades).Append("\n");
            sb.Append("  Activo: ").Append(Activo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObtenerTodosModulosResponseRegistros)obj);
        }

        /// <summary>
        /// Returns true if ObtenerTodosModulosResponseRegistros instances are equal
        /// </summary>
        /// <param name="other">Instance of ObtenerTodosModulosResponseRegistros to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObtenerTodosModulosResponseRegistros other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ModuloId == other.ModuloId &&
                    ModuloId.Equals(other.ModuloId)
                ) && 
                (
                    Nombre == other.Nombre ||
                    Nombre != null &&
                    Nombre.Equals(other.Nombre)
                ) && 
                (
                    Funcionalidades == other.Funcionalidades ||
                    Funcionalidades != null &&
                    Funcionalidades.SequenceEqual(other.Funcionalidades)
                ) && 
                (
                    Activo == other.Activo &&
                    Activo.Equals(other.Activo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)                   
                    hashCode = hashCode * 59 + ModuloId.GetHashCode();
                    if (Nombre != null)
                    hashCode = hashCode * 59 + Nombre.GetHashCode();
                    if (Funcionalidades != null)
                    hashCode = hashCode * 59 + Funcionalidades.GetHashCode();                   
                    hashCode = hashCode * 59 + Activo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ObtenerTodosModulosResponseRegistros left, ObtenerTodosModulosResponseRegistros right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObtenerTodosModulosResponseRegistros left, ObtenerTodosModulosResponseRegistros right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}