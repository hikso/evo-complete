/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_PV_WebApi.Models.PedidoApi
{
    /// <summary>
    /// Artículo de la consulta del pedido
    /// </summary>
    [DataContract]
    public partial class ArticuloConsultaResponse : IEquatable<ArticuloConsultaResponse>
    {
        /// <summary>
        /// Código del artículo
        /// </summary>
        /// <value>Código del artículo</value>
        [DataMember(Name = "codigoArticulo")]
        public string CodigoArticulo { get; set; }

        /// <summary>
        /// Nombre del artículo
        /// </summary>
        /// <value>Nombre del artículo</value>
        [DataMember(Name = "nombreArticulo")]
        public string NombreArticulo { get; set; }

        /// <summary>
        /// Cantidad solicitada
        /// </summary>
        /// <value>Cantidad solicitada</value>
        [DataMember(Name = "cantidadSolicitada")]
        public string CantidadSolicitada { get; set; }

        /// <summary>
        /// Cantidad aprobada
        /// </summary>
        /// <value>Cantidad aprobada</value>
        [DataMember(Name = "cantidadAprobada")]
        public string CantidadAprobada { get; set; }

        /// <summary>
        /// Cantidades por entrega programada
        /// </summary>
        /// <value>Cantidades por entrega programada</value>
        [DataMember(Name = "cantidadProgramada")]
        public string CantidadProgramada { get; set; }

        /// <summary>
        /// Estado del artículo
        /// </summary>
        /// <value>Estado del artículo</value>
        [DataMember(Name = "estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Empaque del artículo
        /// </summary>
        /// <value>Empaque del artículo</value>
        [DataMember(Name = "empaque")]
        public string Empaque { get; set; }

        /// <summary>
        /// Unidad de medida del artículo
        /// </summary>
        /// <value>Unidad de medida del artículo</value>
        [DataMember(Name = "unidadMedida")]
        public string UnidadMedida { get; set; }

        /// <summary>
        /// Observaciones del artículo
        /// </summary>
        /// <value>Observaciones del artículo</value>
        [DataMember(Name = "observaciones")]
        public string Observaciones { get; set; }

        /// <summary>
        /// accionID del artículo
        /// </summary>
        /// <value>accionID del artículo</value>
        [DataMember(Name = "accionId")]
        public int? AccionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticuloConsultaResponse {\n");
            sb.Append("  CodigoArticulo: ").Append(CodigoArticulo).Append("\n");
            sb.Append("  NombreArticulo: ").Append(NombreArticulo).Append("\n");
            sb.Append("  CantidadSolicitada: ").Append(CantidadSolicitada).Append("\n");
            sb.Append("  CantidadAprobada: ").Append(CantidadAprobada).Append("\n");
            sb.Append("  CantidadProgramada: ").Append(CantidadProgramada).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Empaque: ").Append(Empaque).Append("\n");
            sb.Append("  UnidadMedida: ").Append(UnidadMedida).Append("\n");
            sb.Append("  Observaciones: ").Append(Observaciones).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticuloConsultaResponse)obj);
        }

        /// <summary>
        /// Returns true if ArticuloConsultaResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticuloConsultaResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticuloConsultaResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    CodigoArticulo == other.CodigoArticulo ||
                    CodigoArticulo != null &&
                    CodigoArticulo.Equals(other.CodigoArticulo)
                ) &&
                (
                    NombreArticulo == other.NombreArticulo ||
                    NombreArticulo != null &&
                    NombreArticulo.Equals(other.NombreArticulo)
                ) &&
                (
                    CantidadSolicitada == other.CantidadSolicitada ||
                    CantidadSolicitada != null &&
                    CantidadSolicitada.Equals(other.CantidadSolicitada)
                ) &&
                (
                    CantidadAprobada == other.CantidadAprobada ||
                    CantidadAprobada != null &&
                    CantidadAprobada.Equals(other.CantidadAprobada)
                ) &&
                (
                    CantidadProgramada == other.CantidadProgramada ||
                    CantidadProgramada != null &&
                    CantidadProgramada.Equals(other.CantidadProgramada)
                ) &&
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) &&
                (
                    Empaque == other.Empaque ||
                    Empaque != null &&
                    Empaque.Equals(other.Empaque)
                ) &&
                (
                    UnidadMedida == other.UnidadMedida ||
                    UnidadMedida != null &&
                    UnidadMedida.Equals(other.UnidadMedida)
                ) &&
                (
                    Observaciones == other.Observaciones ||
                    Observaciones != null &&
                    Observaciones.Equals(other.Observaciones)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (CodigoArticulo != null)
                    hashCode = hashCode * 59 + CodigoArticulo.GetHashCode();
                if (NombreArticulo != null)
                    hashCode = hashCode * 59 + NombreArticulo.GetHashCode();
                if (CantidadSolicitada != null)
                    hashCode = hashCode * 59 + CantidadSolicitada.GetHashCode();
                if (CantidadAprobada != null)
                    hashCode = hashCode * 59 + CantidadAprobada.GetHashCode();
                if (CantidadProgramada != null)
                    hashCode = hashCode * 59 + CantidadProgramada.GetHashCode();
                if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                if (Empaque != null)
                    hashCode = hashCode * 59 + Empaque.GetHashCode();
                if (UnidadMedida != null)
                    hashCode = hashCode * 59 + UnidadMedida.GetHashCode();
                if (Observaciones != null)
                    hashCode = hashCode * 59 + Observaciones.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ArticuloConsultaResponse left, ArticuloConsultaResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticuloConsultaResponse left, ArticuloConsultaResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
