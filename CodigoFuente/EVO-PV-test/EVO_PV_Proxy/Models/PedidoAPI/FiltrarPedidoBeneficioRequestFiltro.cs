/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_PV_Proxy.Models.PedidoAPI
{ 
    /// <summary>
    /// Criterios por los que se filtrará la consulta
    /// </summary>
    [DataContract]
    public partial class FiltrarPedidoBeneficioRequestFiltro : IEquatable<FiltrarPedidoBeneficioRequestFiltro>
    { 
        /// <summary>
        /// Indica si se filtra por fecha
        /// </summary>
        /// <value>Indica si se filtra por fecha</value>
        [DataMember(Name="filtrarPorFecha")]
        public bool? FiltrarPorFecha { get; set; }

        /// <summary>
        /// Fecha seleccionada en la que se registra el pedido(Desde)
        /// </summary>
        /// <value>Fecha seleccionada en la que se registra el pedido(Desde)</value>
        [DataMember(Name="fechaSolicitudDesde")]
        public string FechaSolicitudDesde { get; set; }

        /// <summary>
        /// Fecha seleccionada en la que se registra el pedido(Hasta)
        /// </summary>
        /// <value>Fecha seleccionada en la que se registra el pedido(Hasta)</value>
        [DataMember(Name="fechaSolicitudHasta")]
        public string FechaSolicitudHasta { get; set; }

        /// <summary>
        /// Ids de los estados de los pedidos seleccionados
        /// </summary>
        /// <value>Ids de los estados de los pedidos seleccionados</value>
        [DataMember(Name="estadosIds")]
        public List<int?> EstadosIds { get; set; }

        /// <summary>
        /// Códigos de los clientes internos seleccionados
        /// </summary>
        /// <value>Códigos de los clientes internos seleccionados</value>
        [DataMember(Name="clientesInternosCodigos")]
        public List<string> ClientesInternosCodigos { get; set; }

        /// <summary>
        /// Códigos de los clientes externos seleccionados
        /// </summary>
        /// <value>Códigos de los clientes externos seleccionados</value>
        [DataMember(Name="clientesExternosCodigo")]
        public List<string> ClientesExternosCodigo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FiltrarPedidoBeneficioRequestFiltro {\n");
            sb.Append("  FiltrarPorFecha: ").Append(FiltrarPorFecha).Append("\n");
            sb.Append("  FechaSolicitudDesde: ").Append(FechaSolicitudDesde).Append("\n");
            sb.Append("  FechaSolicitudHasta: ").Append(FechaSolicitudHasta).Append("\n");
            sb.Append("  EstadosIds: ").Append(EstadosIds).Append("\n");
            sb.Append("  ClientesInternosCodigos: ").Append(ClientesInternosCodigos).Append("\n");
            sb.Append("  ClientesExternosCodigo: ").Append(ClientesExternosCodigo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FiltrarPedidoBeneficioRequestFiltro)obj);
        }

        /// <summary>
        /// Returns true if FiltrarPedidoBeneficioRequestFiltro instances are equal
        /// </summary>
        /// <param name="other">Instance of FiltrarPedidoBeneficioRequestFiltro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiltrarPedidoBeneficioRequestFiltro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FiltrarPorFecha == other.FiltrarPorFecha ||
                    FiltrarPorFecha != null &&
                    FiltrarPorFecha.Equals(other.FiltrarPorFecha)
                ) && 
                (
                    FechaSolicitudDesde == other.FechaSolicitudDesde ||
                    FechaSolicitudDesde != null &&
                    FechaSolicitudDesde.Equals(other.FechaSolicitudDesde)
                ) && 
                (
                    FechaSolicitudHasta == other.FechaSolicitudHasta ||
                    FechaSolicitudHasta != null &&
                    FechaSolicitudHasta.Equals(other.FechaSolicitudHasta)
                ) && 
                (
                    EstadosIds == other.EstadosIds ||
                    EstadosIds != null &&
                    EstadosIds.SequenceEqual(other.EstadosIds)
                ) && 
                (
                    ClientesInternosCodigos == other.ClientesInternosCodigos ||
                    ClientesInternosCodigos != null &&
                    ClientesInternosCodigos.SequenceEqual(other.ClientesInternosCodigos)
                ) && 
                (
                    ClientesExternosCodigo == other.ClientesExternosCodigo ||
                    ClientesExternosCodigo != null &&
                    ClientesExternosCodigo.SequenceEqual(other.ClientesExternosCodigo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FiltrarPorFecha != null)
                    hashCode = hashCode * 59 + FiltrarPorFecha.GetHashCode();
                    if (FechaSolicitudDesde != null)
                    hashCode = hashCode * 59 + FechaSolicitudDesde.GetHashCode();
                    if (FechaSolicitudHasta != null)
                    hashCode = hashCode * 59 + FechaSolicitudHasta.GetHashCode();
                    if (EstadosIds != null)
                    hashCode = hashCode * 59 + EstadosIds.GetHashCode();
                    if (ClientesInternosCodigos != null)
                    hashCode = hashCode * 59 + ClientesInternosCodigos.GetHashCode();
                    if (ClientesExternosCodigo != null)
                    hashCode = hashCode * 59 + ClientesExternosCodigo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FiltrarPedidoBeneficioRequestFiltro left, FiltrarPedidoBeneficioRequestFiltro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FiltrarPedidoBeneficioRequestFiltro left, FiltrarPedidoBeneficioRequestFiltro right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
