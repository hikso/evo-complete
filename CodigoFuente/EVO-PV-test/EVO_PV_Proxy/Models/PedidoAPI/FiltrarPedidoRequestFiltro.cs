/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_PV_Proxy.Models.PedidoAPI
{ 
    /// <summary>
    /// Criterios por los que se filtrará la consulta
    /// </summary>
    [DataContract]
    public partial class FiltrarPedidoRequestFiltro : IEquatable<FiltrarPedidoRequestFiltro>
    { 
        /// <summary>
        /// Fecha en la que se registra el pedido
        /// </summary>
        /// <value>Fecha en la que se registra el pedido</value>
        [DataMember(Name="desde")]
        public string Desde { get; set; }

        /// <summary>
        /// Fecha en la que se registra el pedido
        /// </summary>
        /// <value>Fecha en la que se registra el pedido</value>
        [DataMember(Name="hasta")]
        public string Hasta { get; set; }

        /// <summary>
        /// Id del estado del pedido
        /// </summary>
        /// <value>Id del estado del pedido</value>
        [DataMember(Name="estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Filtro por Planta Beneficio
        /// </summary>
        /// <value>Filtro por Planta Beneficio</value>
        [DataMember(Name="plantaBeneficio")]
        public bool? PlantaBeneficio { get; set; }

        /// <summary>
        /// Filtro por Planta Derivados
        /// </summary>
        /// <value>Filtro por Planta Derivados</value>
        [DataMember(Name="plantaDerivados")]
        public bool? PlantaDerivados { get; set; }

        /// <summary>
        /// Los pendientes son todos los NO cerrados
        /// </summary>
        /// <value>Los pendientes son todos los NO cerrados</value>
        [DataMember(Name="pendientes")]
        public string Pendientes { get; set; }

        /// <summary>
        /// Filtro por numero de pedido
        /// </summary>
        /// <value>Filtro por numero de pedido</value>
        [DataMember(Name="numeropedido")]
        public string Numeropedido { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FiltrarPedidoRequestFiltro {\n");
            sb.Append("  Desde: ").Append(Desde).Append("\n");
            sb.Append("  Hasta: ").Append(Hasta).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  PlantaBeneficio: ").Append(PlantaBeneficio).Append("\n");
            sb.Append("  PlantaDerivados: ").Append(PlantaDerivados).Append("\n");
            sb.Append("  Pendientes: ").Append(Pendientes).Append("\n");
            sb.Append("  Numeropedido: ").Append(Numeropedido).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FiltrarPedidoRequestFiltro)obj);
        }

        /// <summary>
        /// Returns true if FiltrarPedidoRequestFiltro instances are equal
        /// </summary>
        /// <param name="other">Instance of FiltrarPedidoRequestFiltro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiltrarPedidoRequestFiltro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Desde == other.Desde ||
                    Desde != null &&
                    Desde.Equals(other.Desde)
                ) && 
                (
                    Hasta == other.Hasta ||
                    Hasta != null &&
                    Hasta.Equals(other.Hasta)
                ) && 
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) && 
                (
                    PlantaBeneficio == other.PlantaBeneficio ||
                    PlantaBeneficio != null &&
                    PlantaBeneficio.Equals(other.PlantaBeneficio)
                ) && 
                (
                    PlantaDerivados == other.PlantaDerivados ||
                    PlantaDerivados != null &&
                    PlantaDerivados.Equals(other.PlantaDerivados)
                ) && 
                (
                    Pendientes == other.Pendientes ||
                    Pendientes != null &&
                    Pendientes.Equals(other.Pendientes)
                ) && 
                (
                    Numeropedido == other.Numeropedido ||
                    Numeropedido != null &&
                    Numeropedido.Equals(other.Numeropedido)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Desde != null)
                    hashCode = hashCode * 59 + Desde.GetHashCode();
                    if (Hasta != null)
                    hashCode = hashCode * 59 + Hasta.GetHashCode();
                    if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                    if (PlantaBeneficio != null)
                    hashCode = hashCode * 59 + PlantaBeneficio.GetHashCode();
                    if (PlantaDerivados != null)
                    hashCode = hashCode * 59 + PlantaDerivados.GetHashCode();
                    if (Pendientes != null)
                    hashCode = hashCode * 59 + Pendientes.GetHashCode();
                    if (Numeropedido != null)
                    hashCode = hashCode * 59 + Numeropedido.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FiltrarPedidoRequestFiltro left, FiltrarPedidoRequestFiltro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FiltrarPedidoRequestFiltro left, FiltrarPedidoRequestFiltro right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
