/*
 * API de Recepción
 *
 * API de administración de Recepción 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_PV.Models.RecepcionApi
{
    /// <summary>
    /// Representa el encabezado de recepción
    /// </summary>
    [DataContract]
    public partial class RecepcionEncabezadoResponse : IEquatable<RecepcionEncabezadoResponse>
    {
        /// <summary>
        /// Id del pesaje de la entrega
        /// </summary>
        /// <value></value>
        [DataMember(Name = "pesajeEntregaId")]
        public int? PesajeEntregaId { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>
        [DataMember(Name = "nombreCliente")]
        public string NombreCliente { get; set; }

        /// <summary>
        /// Consecutivo del pesaje por entrega
        /// </summary>
        /// <value>Consecutivo del pesaje por entrega</value>
        [DataMember(Name = "consecutivo")]
        public int? Consecutivo { get; set; }

        /// <summary>
        /// Fecha entrega
        /// </summary>
        /// <value>Fecha entrega</value>
        [DataMember(Name = "fechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Fecha actual
        /// </summary>
        /// <value>Fecha actual</value>
        [DataMember(Name = "fechaActual")]
        public string FechaActual { get; set; }

        /// <summary>
        /// Indica si se finalizó el pesaje
        /// </summary>
        /// <value>Indica si se finalizó el pesaje</value>
        [DataMember(Name = "finalizado")]
        public bool? Finalizado { get; set; }

        /// <summary>
        /// Indica si existe alguna inconsistencia entre pesaje de código de barras y báscula
        /// </summary>
        /// <value>Indica si existe alguna inconsistencia entre pesaje de código de barras y báscula</value>
        [DataMember(Name = "inconsistenciaCodigoBarras")]
        public bool? InconsistenciaCodigoBarras { get; set; }

        /// <summary>
        /// Gets or Sets Documentos
        /// </summary>
        [DataMember(Name = "documentos")]
        public List<ArticuloDocumentoResponse> Documentos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecepcionEncabezadoResponse {\n");
            sb.Append("  NombreCliente: ").Append(NombreCliente).Append("\n");
            sb.Append("  Consecutivo: ").Append(Consecutivo).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  FechaActual: ").Append(FechaActual).Append("\n");
            sb.Append("  Finalizado: ").Append(Finalizado).Append("\n");
            sb.Append("  InconsistenciaCodigoBarras: ").Append(InconsistenciaCodigoBarras).Append("\n");
            sb.Append("  Documentos: ").Append(Documentos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RecepcionEncabezadoResponse)obj);
        }

        /// <summary>
        /// Returns true if RecepcionEncabezadoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of RecepcionEncabezadoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecepcionEncabezadoResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    NombreCliente == other.NombreCliente ||
                    NombreCliente != null &&
                    NombreCliente.Equals(other.NombreCliente)
                ) &&
                (
                    Consecutivo == other.Consecutivo ||
                    Consecutivo != null &&
                    Consecutivo.Equals(other.Consecutivo)
                ) &&
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) &&
                (
                    FechaActual == other.FechaActual ||
                    FechaActual != null &&
                    FechaActual.Equals(other.FechaActual)
                ) &&
                (
                    Finalizado == other.Finalizado ||
                    Finalizado != null &&
                    Finalizado.Equals(other.Finalizado)
                ) &&
                (
                    InconsistenciaCodigoBarras == other.InconsistenciaCodigoBarras ||
                    InconsistenciaCodigoBarras != null &&
                    InconsistenciaCodigoBarras.Equals(other.InconsistenciaCodigoBarras)
                ) &&
                (
                    Documentos == other.Documentos ||
                    Documentos != null &&
                    Documentos.SequenceEqual(other.Documentos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NombreCliente != null)
                    hashCode = hashCode * 59 + NombreCliente.GetHashCode();
                if (Consecutivo != null)
                    hashCode = hashCode * 59 + Consecutivo.GetHashCode();
                if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                if (FechaActual != null)
                    hashCode = hashCode * 59 + FechaActual.GetHashCode();
                if (Finalizado != null)
                    hashCode = hashCode * 59 + Finalizado.GetHashCode();
                if (InconsistenciaCodigoBarras != null)
                    hashCode = hashCode * 59 + InconsistenciaCodigoBarras.GetHashCode();
                if (Documentos != null)
                    hashCode = hashCode * 59 + Documentos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(RecepcionEncabezadoResponse left, RecepcionEncabezadoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RecepcionEncabezadoResponse left, RecepcionEncabezadoResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
