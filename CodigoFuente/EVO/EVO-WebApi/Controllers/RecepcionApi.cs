/*
 * API de Recepción
 *
 * API de administración de Recepción 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.RecepcionApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RecepcionApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion

        #region Métodos
        /// <summary>
        /// Confirma que se recibió la mercancia
        /// </summary>
        /// <param name="entregaId">Indica el id de la entrega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/recepcion/confirmar")]
        [ValidateModelState]
        [SwaggerOperation("AsignarConfirmacion")]
        [SwaggerResponse(statusCode: 200, type: typeof(RecepcionResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult AsignarConfirmacion([FromQuery][Required()]int entregaId)
        {
            logger.Info($"Entró al método AsignarConfirmacion en RecepcionApi con el parámetro entregaId = {entregaId}");

            try
            {
                BLRecepcion bLRecepcion = new BLRecepcion();

                string usuario = string.Empty;

                if (HttpContext.User.Identity != null)
                {
                    usuario = HttpContext.User.Identity.Name;
                }

                BORecepcionResponse bORecepcionResponse = bLRecepcion.AsignarConfirmacion(entregaId, usuario);

                RecepcionResponse recepcionResponse = this.mapper.Map<BORecepcionResponse, RecepcionResponse>(bORecepcionResponse);

                return Ok(recepcionResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene el consolidado
        /// </summary>
        /// <param name="entregaId">Indica el id de la entrega</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/recepcion/encabezado")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerEncabezadoRecepcion")]
        [SwaggerResponse(statusCode: 200, type: typeof(RecepcionEncabezadoResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerEncabezadoRecepcion([FromQuery][Required()]int entregaId)
        {
            logger.Info($"Entró al método ObtenerEncabezadoRecepcion en RecepcionApi con el parámetro entregaId = {entregaId}");

            try
            {
                BLRecepcion bLRecepcion = new BLRecepcion();

                RecepcionEncabezadoRespuesta recepcionEncabezadoRespuesta = bLRecepcion.ObtenerEncabezadoRecepcion(entregaId);

                RecepcionEncabezadoResponse recepcionEncabezadoResponse = this.mapper.Map<RecepcionEncabezadoRespuesta, RecepcionEncabezadoResponse>(recepcionEncabezadoRespuesta);

                return Ok(recepcionEncabezadoResponse);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Contructores
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public RecepcionApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }

        #endregion

    }
}
