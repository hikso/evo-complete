/*
 * API de Parámetros Generales
 *
 * API de administración de Parámetros Generales
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using AutoMapper;
using EVO_BusinessLogic;
using EVO_BusinessObjects;
using EVO_BusinessObjects.Enum;
using EVO_BusinessObjects.Exceptions;
using EVO_WebApi.Attributes;
using EVO_WebApi.Models.ParametrosGeneralesApi;
using EVO_WebApi.Resources;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using NLog;
using Swashbuckle.AspNetCore.Annotations;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace EVO_WebApi.Controllers
{
    /// <summary>
    /// 
    /// </summary>    
    [ApiController]
    [Authorize]
    public class ParametrosGeneralesApiController : ControllerBase
    {
        #region Campos Privados
        private static readonly Logger logger = LogManager.GetCurrentClassLogger();
        private IMapper mapper;
        #endregion      

        #region Metodos públicos
        /// <summary>
        /// Activa / inactiva un Parámetro General
        /// </summary>
        /// <param name="body">Solicititud de activación / inactivación de un Parámetro General</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/parametrosgenerales/activar")]
        [ValidateModelState]
        [SwaggerOperation("ActivarParametroGeneral")]
        public virtual IActionResult ActivarParametroGeneral([FromBody]ActivarParametroGeneralRequest body)
        {
            try
            {
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ParametroGeneral parametroGeneralAActivar = this.mapper.Map<ActivarParametroGeneralRequest, ParametroGeneral>(body);

                bool resultadoActivacion = blParametrosGenerales.
                    ActivarParametroGeneral(parametroGeneralAActivar);

                return Ok(resultadoActivacion);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Actualiza un Parámetro General
        /// </summary>
        /// <param name="body">Solicititud de actualización de un Parámetro General</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPut]
        [Route("/api/parametrosgenerales/actualizar")]
        [ValidateModelState]
        [SwaggerOperation("ActualizarParametroGeneral")]
        public virtual IActionResult ActualizarParametroGeneral([FromBody]ActualizarParametroGeneralRequest body)
        {
            try
            {
                ParametroGeneral parametroGeneral = this.mapper.Map<ActualizarParametroGeneralRequest, ParametroGeneral>(body);

                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                return Ok(blParametrosGenerales.ActualizarParametroGeneral(parametroGeneral));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Crea un Parámetro General
        /// </summary>
        /// <param name="body">Solicititud de creación de un Parámetro general</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpPost]
        [Route("/api/parametrosgenerales")]
        [ValidateModelState]
        [SwaggerOperation("CrearParametroGeneral")]
        public virtual IActionResult CrearParametroGeneral([FromBody]CrearParametroGeneralRequest body)
        {
            try
            {
                ParametroGeneral parametroGeneral = this.mapper.Map<CrearParametroGeneralRequest, ParametroGeneral>(body);

                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                return Ok(blParametrosGenerales.CrearParametroGeneral(parametroGeneral));
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene un Parámtro General por el id.
        /// </summary>
        /// <param name="id">Id del Parámetro General</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/parametrosgenerales/{id}")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerParametroGeneralxId")]
        [SwaggerResponse(statusCode: 200, type: typeof(ParametroGeneralResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerParametroGeneralxId([FromRoute][Required]int id)
        {
            try
            {
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ParametroGeneral parametroGeneral = blParametrosGenerales.ObtenerParametroGeneralxId(id);

                ParametroGeneralResponse respuesta = null;

                try
                {
                    respuesta = this.mapper.Map<ParametroGeneral, ParametroGeneralResponse>(parametroGeneral);
                }
                catch (Exception e)
                {
                    logger.Error(e);

                    throw e;
                }

                return Ok(respuesta);
            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene un Parámetro General por su nombre.
        /// </summary>
        /// <param name="nombre">Nombre del Parámetro General</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/parametrosgenerales/obtenerxnombre/{nombre}")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerParametroGeneralxNombre")]
        [SwaggerResponse(statusCode: 200, type: typeof(ParametroGeneralResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerParametroGeneralxNombre([FromRoute][Required]string nombre)
        {
            try
            {
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                ParametroGeneral parametroGeneral = blParametrosGenerales.ObtenerParametroGeneralxNombre(nombre);

                ParametroGeneralResponse respuesta = null;

                try
                {
                    respuesta = this.mapper.Map<ParametroGeneral, ParametroGeneralResponse>(parametroGeneral);
                }
                catch (Exception e)
                {
                    logger.Error(e);

                    throw e;
                }

                return Ok(respuesta);

            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }

        /// <summary>
        /// Obtiene los Parámetros Generales del sistema
        /// </summary>
        /// <param name="desde">Indica el número de registro desde el cuál se debe obtener la información</param>
        /// <param name="hasta">Indica el número de registro hasta el cuál se debe obtener la información</param>
        /// <response code="200">Operación realizada con éxito</response>
        [HttpGet]
        [Route("/api/parametrosgenerales")]
        [ValidateModelState]
        [SwaggerOperation("ObtenerTodosParametrosGenerales")]
        [SwaggerResponse(statusCode: 200, type: typeof(ObtenerTodosParametrosGeneralesResponse), description: "Operación realizada con éxito")]
        public virtual IActionResult ObtenerTodosParametrosGenerales([FromQuery][Required()]int desde, [FromQuery][Required()]int hasta)
        {
            try
            {
                BLParametroGeneral blParametrosGenerales = new BLParametroGeneral();

                // Encabezado de la respuesta
                ObtenerTodosParametrosGeneralesResponse obtenerTodosParametrosGeneralesResponse =
                    new ObtenerTodosParametrosGeneralesResponse();

                int numeroTotalRegistros = blParametrosGenerales.ObtenerNumeroTotalRegistros();

                //El que no exista el parámetro general se controla desde la capa de BusinessLogic
                string pgTamanhoPaginacion = pgTamanhoPaginacion = blParametrosGenerales.ObtenerValorPorNombre(NombresParametrosGeneralesEnum.TAMANHO_PAGINACION_TABLA);

                if (string.IsNullOrWhiteSpace(pgTamanhoPaginacion))
                {
                    Exception e = new Exception(string.Format(errores.errParametroGeneral, pgTamanhoPaginacion));

                    throw e;
                }

                int tamanhoPaginacion = 0;

                try
                {
                    tamanhoPaginacion = int.Parse(pgTamanhoPaginacion);
                }
                catch
                {
                    Exception e = new Exception(string.Format(errores.errParametroNumeroEntero, pgTamanhoPaginacion));

                    throw e;
                }

                obtenerTodosParametrosGeneralesResponse.NumeroTotalRegistros = numeroTotalRegistros;
                obtenerTodosParametrosGeneralesResponse.TamanhoPaginacion = tamanhoPaginacion;

                List<ObtenerTodosParametrosGeneralesResponseRegistros> parametrosGeneralesResponse = new List<ObtenerTodosParametrosGeneralesResponseRegistros>();

                List<ParametroGeneral> parametrosGenerales = blParametrosGenerales.ObtenerTodosParametrosGenerales(desde, hasta);

                if (parametrosGenerales != null)
                {
                    parametrosGeneralesResponse = this.mapper.Map<List<ParametroGeneral>, List<ObtenerTodosParametrosGeneralesResponseRegistros>>(parametrosGenerales);
                }

                obtenerTodosParametrosGeneralesResponse.Registros = parametrosGeneralesResponse;

                return Ok(obtenerTodosParametrosGeneralesResponse);

            }
            catch (EVOException e)
            {
                return StatusCode(StatusCodes.Status400BadRequest, e.Message);
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, errores.errGeneral);
            }
        }
        #endregion

        #region Contructores   
        /// <summary>
        /// 
        /// </summary>
        /// <param name="mapper"></param>
        public ParametrosGeneralesApiController(IMapper mapper)
        {
            this.mapper = mapper;
        }
        #endregion
    }
}