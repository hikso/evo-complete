/*
 * API de administraci贸n de Facturaci贸n
 *
 * API de administraci贸n de facturaci贸n 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.FacturacionApi
{
    /// <summary>
    /// Representa una forma de pago de la factura
    /// </summary>
    [DataContract]
    public partial class FormaPagoRequest : IEquatable<FormaPagoRequest>
    {
        /// <summary>
        /// Indica el id de la forma de pago
        /// </summary>
        /// <value>Indica el id de la forma de pago</value>
        [Required]
        [DataMember(Name = "formaPagoId")]
        public int FormaPagoId { get; set; }

        /// <summary>
        /// Indica el id del banco
        /// </summary>
        /// <value>Indica el id del banco</value>
        [DataMember(Name = "bancoId")]
        public int BancoId { get; set; }

        /// <summary>
        /// Indica el valor del pago
        /// </summary>
        /// <value>Indica el valor del pago</value>
        [Required]
        [DataMember(Name = "valorPago")]
        public int ValorPago { get; set; }

        /// <summary>
        /// Indica el consecutivo del bono
        /// </summary>
        /// <value>Indica el consecutivo del bono</value>
        [DataMember(Name = "consecutivoBono")]
        public string ConsecutivoBono { get; set; }

        /// <summary>
        /// Indica el nombre del empleado del bono(todo usuario EVO es empleado pero no todo empleado es usuario EVO)
        /// </summary>
        /// <value>Indica el nombre del empleado del bono(todo usuario EVO es empleado pero no todo empleado es usuario EVO)</value>
        [DataMember(Name = "empleadoBono")]
        public string EmpleadoBono { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormaPagoRequest {\n");
            sb.Append("  FormaPagoId: ").Append(FormaPagoId).Append("\n");
            sb.Append("  BancoId: ").Append(BancoId).Append("\n");
            sb.Append("  ValorPago: ").Append(ValorPago).Append("\n");
            sb.Append("  ConsecutivoBono: ").Append(ConsecutivoBono).Append("\n");
            sb.Append("  EmpleadoBono: ").Append(EmpleadoBono).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FormaPagoRequest)obj);
        }

        /// <summary>
        /// Returns true if FormaPagoRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of FormaPagoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormaPagoRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    FormaPagoId == other.FormaPagoId ||
                    FormaPagoId != null &&
                    FormaPagoId.Equals(other.FormaPagoId)
                ) &&
                (
                    BancoId == other.BancoId ||
                    BancoId != null &&
                    BancoId.Equals(other.BancoId)
                ) &&
                (
                    ValorPago == other.ValorPago ||
                    ValorPago != null &&
                    ValorPago.Equals(other.ValorPago)
                ) &&
                (
                    ConsecutivoBono == other.ConsecutivoBono ||
                    ConsecutivoBono != null &&
                    ConsecutivoBono.Equals(other.ConsecutivoBono)
                ) &&
                (
                    EmpleadoBono == other.EmpleadoBono ||
                    EmpleadoBono != null &&
                    EmpleadoBono.Equals(other.EmpleadoBono)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (FormaPagoId != null)
                    hashCode = hashCode * 59 + FormaPagoId.GetHashCode();
                if (BancoId != null)
                    hashCode = hashCode * 59 + BancoId.GetHashCode();
                if (ValorPago != null)
                    hashCode = hashCode * 59 + ValorPago.GetHashCode();
                if (ConsecutivoBono != null)
                    hashCode = hashCode * 59 + ConsecutivoBono.GetHashCode();
                if (EmpleadoBono != null)
                    hashCode = hashCode * 59 + EmpleadoBono.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FormaPagoRequest left, FormaPagoRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FormaPagoRequest left, FormaPagoRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
