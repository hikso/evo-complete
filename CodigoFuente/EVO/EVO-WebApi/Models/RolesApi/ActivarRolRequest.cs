/*
 * API de Roles de Usuario
 *
 * API de administraci√≥n de Roles de usuario
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.RolesApi
{
    /// <summary>
    /// Objeto que contiene el Rol a activar / inactivar
    /// </summary>
    [DataContract]
    public partial class ActivarRolRequest : IEquatable<ActivarRolRequest>
    { 
        /// <summary>
        /// Id del Rol
        /// </summary>
        /// <value>Id del Rol</value>
        [Required]
        [DataMember(Name="rolId")]
        public int RolId { get; set; }

        /// <summary>
        /// Indica si el Rol se debe Activar (true) o Inactivar (false)
        /// </summary>
        /// <value>Indica si el Rol se debe Activar (true) o Inactivar (false)</value>
        [DataMember(Name="activo")]
        public bool Activo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActivarRolRequest {\n");
            sb.Append("  RolId: ").Append(RolId).Append("\n");
            sb.Append("  Activo: ").Append(Activo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ActivarRolRequest)obj);
        }

        /// <summary>
        /// Returns true if ActivarRolRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ActivarRolRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivarRolRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RolId == other.RolId &&
                    RolId.Equals(other.RolId)
                ) && 
                (
                    Activo == other.Activo &&
                    Activo.Equals(other.Activo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)                 
                    hashCode = hashCode * 59 + RolId.GetHashCode();                 
                    hashCode = hashCode * 59 + Activo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ActivarRolRequest left, ActivarRolRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ActivarRolRequest left, ActivarRolRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}