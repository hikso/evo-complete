/*
 * API de Roles de Usuario
 *
 * API de administraci√≥n de Roles de usuario
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.RolesApi
{
    /// <summary>
    /// Objeto necesario para desasociar los usuarios al rol
    /// </summary>
    [DataContract]
    public partial class DesasociarUsuariosARolRequest : IEquatable<DesasociarUsuariosARolRequest>
    {
        /// <summary>
        /// Id del Rol a asociar
        /// </summary>
        /// <value>Id del Rol a asociar</value>
        [Required]
        [DataMember(Name = "rolId")]
        public int RolId { get; set; }

        /// <summary>
        /// Lista de usuarios a asociar al rol
        /// </summary>
        /// <value>Lista de usuarios a asociar al rol</value>
        [Required]
        [DataMember(Name = "usuariosIds")]
        public List<int> UsuariosIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DesasociarUsuariosARolRequest {\n");
            sb.Append("  RolId: ").Append(RolId).Append("\n");
            sb.Append("  UsuariosIds: ").Append(UsuariosIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DesasociarUsuariosARolRequest)obj);
        }

        /// <summary>
        /// Returns true if DesasociarUsuariosARolRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of DesasociarUsuariosARolRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DesasociarUsuariosARolRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    RolId == other.RolId &&
                    RolId.Equals(other.RolId)
                ) &&
                (
                    UsuariosIds == other.UsuariosIds ||
                    UsuariosIds != null &&
                    UsuariosIds.SequenceEqual(other.UsuariosIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)              
                    hashCode = hashCode * 59 + RolId.GetHashCode();
                if (UsuariosIds != null)
                    hashCode = hashCode * 59 + UsuariosIds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(DesasociarUsuariosARolRequest left, DesasociarUsuariosARolRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DesasociarUsuariosARolRequest left, DesasociarUsuariosARolRequest right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
