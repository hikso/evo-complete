/*
 * API de Autenticación de Usuario
 *
 * API de administración de autenticación de usuario
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.AutenticarApi
{
    /// <summary>
    /// Objeto de respuesta que contiene el token y fecha de expiración si la respuesta de autenticación es correcta
    /// </summary>
    [DataContract]
    public partial class AutenticarResponse : IEquatable<AutenticarResponse>
    {
        /// <summary>
        /// Indica si fué o no fué autenticado el usuario
        /// </summary>
        /// <value>Indica si fué o no fué autenticado el usuario</value>
        [Required]
        [DataMember(Name = "estaAutenticado")]
        public bool EstaAutenticado { get; set; }

        /// <summary>
        /// Indica el token generado en el servidor
        /// </summary>
        /// <value>Indica el token generado en el servidor</value>
        [DataMember(Name = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Indica la fecha de expiración del usuario
        /// </summary>
        /// <value>Indica la fecha de expiración del usuario</value>
        [DataMember(Name = "fechaExpiracion")]
        public DateTime FechaExpiracion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AutenticarResponse {\n");
            sb.Append("  EstaAutenticado: ").Append(EstaAutenticado).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  FechaExpiracion: ").Append(FechaExpiracion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AutenticarResponse)obj);
        }

        /// <summary>
        /// Returns true if AutenticarResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of AutenticarResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AutenticarResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    EstaAutenticado == other.EstaAutenticado &&
                    EstaAutenticado.Equals(other.EstaAutenticado)
                ) &&
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) &&
                (
                    FechaExpiracion == other.FechaExpiracion ||
                    FechaExpiracion != null &&
                    FechaExpiracion.Equals(other.FechaExpiracion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)                
                    hashCode = hashCode * 59 + EstaAutenticado.GetHashCode();
                if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                if (FechaExpiracion != null)
                    hashCode = hashCode * 59 + FechaExpiracion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(AutenticarResponse left, AutenticarResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AutenticarResponse left, AutenticarResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
