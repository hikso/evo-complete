/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace EVO_WebApi.Models.PedidosApi
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ObtenerViajeEntregasResponseEntregas : IEquatable<ObtenerViajeEntregasResponseEntregas>
    { 
        /// <summary>
        /// Número de la entrega
        /// </summary>
        /// <value>Número de la entrega</value>
        [DataMember(Name="numeroEntrega")]
        public string NumeroEntrega { get; set; }

        /// <summary>
        /// Número del pedido
        /// </summary>
        /// <value>Número del pedido</value>
        [DataMember(Name="numeroPedido")]
        public string NumeroPedido { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>
        [DataMember(Name="cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// Para cliente externo es NIT y para interno es el código bodega
        /// </summary>
        /// <value>Para cliente externo es NIT y para interno es el código bodega</value>
        [DataMember(Name="codigo")]
        public string Codigo { get; set; }

        /// <summary>
        /// Zona del cliente
        /// </summary>
        /// <value>Zona del cliente</value>
        [DataMember(Name="zona")]
        public string Zona { get; set; }

        /// <summary>
        /// Fecha entrega
        /// </summary>
        /// <value>Fecha entrega</value>
        [DataMember(Name="fechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Hora militar de la entrega
        /// </summary>
        /// <value>Hora militar de la entrega</value>
        [DataMember(Name="horaEntrega")]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Peso de la cantidad de los artículo
        /// </summary>
        /// <value>Peso de la cantidad de los artículo</value>
        [DataMember(Name="cantidad")]
        public string Cantidad { get; set; }

        /// <summary>
        /// Unidades solicitadas por artículo
        /// </summary>
        /// <value>Unidades solicitadas por artículo</value>
        [DataMember(Name="unidades")]
        public string Unidades { get; set; }

        /// <summary>
        /// Lista de artículos de la entrega
        /// </summary>
        /// <value>Lista de artículos de la entrega</value>
        [DataMember(Name="articulos")]
        public List<ObtenerViajeEntregasResponseArticulos> Articulos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObtenerViajeEntregasResponseEntregas {\n");
            sb.Append("  NumeroEntrega: ").Append(NumeroEntrega).Append("\n");
            sb.Append("  NumeroPedido: ").Append(NumeroPedido).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  Zona: ").Append(Zona).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  HoraEntrega: ").Append(HoraEntrega).Append("\n");
            sb.Append("  Cantidad: ").Append(Cantidad).Append("\n");
            sb.Append("  Unidades: ").Append(Unidades).Append("\n");
            sb.Append("  Articulos: ").Append(Articulos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObtenerViajeEntregasResponseEntregas)obj);
        }

        /// <summary>
        /// Returns true if ObtenerViajeEntregasResponseEntregas instances are equal
        /// </summary>
        /// <param name="other">Instance of ObtenerViajeEntregasResponseEntregas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObtenerViajeEntregasResponseEntregas other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    NumeroEntrega == other.NumeroEntrega ||
                    NumeroEntrega != null &&
                    NumeroEntrega.Equals(other.NumeroEntrega)
                ) && 
                (
                    NumeroPedido == other.NumeroPedido ||
                    NumeroPedido != null &&
                    NumeroPedido.Equals(other.NumeroPedido)
                ) && 
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) && 
                (
                    Codigo == other.Codigo ||
                    Codigo != null &&
                    Codigo.Equals(other.Codigo)
                ) && 
                (
                    Zona == other.Zona ||
                    Zona != null &&
                    Zona.Equals(other.Zona)
                ) && 
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) && 
                (
                    HoraEntrega == other.HoraEntrega ||
                    HoraEntrega != null &&
                    HoraEntrega.Equals(other.HoraEntrega)
                ) && 
                (
                    Cantidad == other.Cantidad ||
                    Cantidad != null &&
                    Cantidad.Equals(other.Cantidad)
                ) && 
                (
                    Unidades == other.Unidades ||
                    Unidades != null &&
                    Unidades.Equals(other.Unidades)
                ) && 
                (
                    Articulos == other.Articulos ||
                    Articulos != null &&
                    Articulos.SequenceEqual(other.Articulos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (NumeroEntrega != null)
                    hashCode = hashCode * 59 + NumeroEntrega.GetHashCode();
                    if (NumeroPedido != null)
                    hashCode = hashCode * 59 + NumeroPedido.GetHashCode();
                    if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                    if (Codigo != null)
                    hashCode = hashCode * 59 + Codigo.GetHashCode();
                    if (Zona != null)
                    hashCode = hashCode * 59 + Zona.GetHashCode();
                    if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                    if (HoraEntrega != null)
                    hashCode = hashCode * 59 + HoraEntrega.GetHashCode();
                    if (Cantidad != null)
                    hashCode = hashCode * 59 + Cantidad.GetHashCode();
                    if (Unidades != null)
                    hashCode = hashCode * 59 + Unidades.GetHashCode();
                    if (Articulos != null)
                    hashCode = hashCode * 59 + Articulos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ObtenerViajeEntregasResponseEntregas left, ObtenerViajeEntregasResponseEntregas right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObtenerViajeEntregasResponseEntregas left, ObtenerViajeEntregasResponseEntregas right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
