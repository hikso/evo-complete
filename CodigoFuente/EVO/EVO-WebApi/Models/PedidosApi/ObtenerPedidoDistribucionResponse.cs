/*
 * API de Pedidos
 *
 * API de administraci贸n de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Objeto que contiene el pedido en distribuci贸n
    /// </summary>
    [DataContract]
    public partial class ObtenerPedidoDistribucionResponse : IEquatable<ObtenerPedidoDistribucionResponse>
    {
        /// <summary>
        /// Fecha solicitud del pedido
        /// </summary>
        /// <value>Fecha solicitud del pedido</value>
        [DataMember(Name = "FechaSolicitud")]
        public string FechaSolicitud { get; set; }

        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>
        [DataMember(Name = "Cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// C贸digo del pedido
        /// </summary>
        /// <value>C贸digo del pedido</value>
        [DataMember(Name = "Codigo")]
        public string Codigo { get; set; }

        /// <summary>
        /// Nombre del estado del pedido
        /// </summary>
        /// <value>Nombre del estado del pedido</value>
        [DataMember(Name = "Estado")]
        public string Estado { get; set; }

        /// <summary>
        /// Indica la zona del punto de venta o cliente externo
        /// </summary>
        /// <value>Indica la zona del punto de venta o cliente externo</value>
        [DataMember(Name = "Zona")]
        public string Zona { get; set; }

        /// <summary>
        /// Lista de detalles del Pedido
        /// </summary>
        /// <value>Lista de detalles del Pedido</value>
        [DataMember(Name = "PedidoDetallesRespuesta")]
        public List<ObtenerPedidoDistribucionResponseDetallesRespuesta> PedidoDetallesRespuesta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObtenerPedidoDistribucionResponse {\n");
            sb.Append("  FechaSolicitud: ").Append(FechaSolicitud).Append("\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  Codigo: ").Append(Codigo).Append("\n");
            sb.Append("  Estado: ").Append(Estado).Append("\n");
            sb.Append("  Zona: ").Append(Zona).Append("\n");
            sb.Append("  PedidoDetallesRespuesta: ").Append(PedidoDetallesRespuesta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ObtenerPedidoDistribucionResponse)obj);
        }

        /// <summary>
        /// Returns true if ObtenerPedidoDistribucionResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ObtenerPedidoDistribucionResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObtenerPedidoDistribucionResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    FechaSolicitud == other.FechaSolicitud ||
                    FechaSolicitud != null &&
                    FechaSolicitud.Equals(other.FechaSolicitud)
                ) &&
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) &&
                (
                    Codigo == other.Codigo ||
                    Codigo != null &&
                    Codigo.Equals(other.Codigo)
                ) &&
                (
                    Estado == other.Estado ||
                    Estado != null &&
                    Estado.Equals(other.Estado)
                ) &&
                (
                    Zona == other.Zona ||
                    Zona != null &&
                    Zona.Equals(other.Zona)
                ) &&
                (
                    PedidoDetallesRespuesta == other.PedidoDetallesRespuesta ||
                    PedidoDetallesRespuesta != null &&
                    PedidoDetallesRespuesta.SequenceEqual(other.PedidoDetallesRespuesta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (FechaSolicitud != null)
                    hashCode = hashCode * 59 + FechaSolicitud.GetHashCode();
                if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                if (Codigo != null)
                    hashCode = hashCode * 59 + Codigo.GetHashCode();
                if (Estado != null)
                    hashCode = hashCode * 59 + Estado.GetHashCode();
                if (Zona != null)
                    hashCode = hashCode * 59 + Zona.GetHashCode();
                if (PedidoDetallesRespuesta != null)
                    hashCode = hashCode * 59 + PedidoDetallesRespuesta.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ObtenerPedidoDistribucionResponse left, ObtenerPedidoDistribucionResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ObtenerPedidoDistribucionResponse left, ObtenerPedidoDistribucionResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
