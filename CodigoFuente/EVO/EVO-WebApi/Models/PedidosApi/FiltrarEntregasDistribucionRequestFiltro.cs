/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.PedidosApi
{
    /// <summary>
    /// Criterios por los que se filtrará la consulta
    /// </summary>
    [DataContract]
    public partial class FiltrarEntregasDistribucionRequestFiltro : IEquatable<FiltrarEntregasDistribucionRequestFiltro>
    {
        /// <summary>
        /// Nombre del cliente
        /// </summary>
        /// <value>Nombre del cliente</value>
        [DataMember(Name = "cliente")]
        public string Cliente { get; set; }

        /// <summary>
        /// Código del pedido
        /// </summary>
        /// <value>Código del pedido</value>
        [DataMember(Name = "codigoPedido")]
        public string CodigoPedido { get; set; }

        /// <summary>
        /// Número de la entrega
        /// </summary>
        /// <value>Número de la entrega</value>
        [DataMember(Name = "numeroEntrega")]
        public string NumeroEntrega { get; set; }

        /// <summary>
        /// Fecha de laentrega
        /// </summary>
        /// <value>Fecha de laentrega</value>
        [DataMember(Name = "fechaEntrega")]
        public string FechaEntrega { get; set; }

        /// <summary>
        /// Horaentrega
        /// </summary>
        /// <value>Horaentrega</value>
        [DataMember(Name = "horaEntrega")]
        public string HoraEntrega { get; set; }

        /// <summary>
        /// Peso de los artículos de las entregas
        /// </summary>
        /// <value>Peso de los artículos de las entregas</value>
        [DataMember(Name = "peso")]
        public string Peso { get; set; }

        /// <summary>
        /// Indica la zona del punto de venta o cliente externo
        /// </summary>
        /// <value>Indica la zona del punto de venta o cliente externo</value>
        [DataMember(Name = "zona")]
        public string Zona { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FiltrarEntregasDistribucionRequestFiltro {\n");
            sb.Append("  Cliente: ").Append(Cliente).Append("\n");
            sb.Append("  CodigoPedido: ").Append(CodigoPedido).Append("\n");
            sb.Append("  NumeroEntrga: ").Append(NumeroEntrega).Append("\n");
            sb.Append("  FechaEntrega: ").Append(FechaEntrega).Append("\n");
            sb.Append("  HoraEntrega: ").Append(HoraEntrega).Append("\n");
            sb.Append("  Peso: ").Append(Peso).Append("\n");
            sb.Append("  Zona: ").Append(Zona).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FiltrarEntregasDistribucionRequestFiltro)obj);
        }

        /// <summary>
        /// Returns true if FiltrarEntregasDistribucionRequestFiltro instances are equal
        /// </summary>
        /// <param name="other">Instance of FiltrarEntregasDistribucionRequestFiltro to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiltrarEntregasDistribucionRequestFiltro other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Cliente == other.Cliente ||
                    Cliente != null &&
                    Cliente.Equals(other.Cliente)
                ) &&
                (
                    CodigoPedido == other.CodigoPedido ||
                    CodigoPedido != null &&
                    CodigoPedido.Equals(other.CodigoPedido)
                ) &&
                (
                    NumeroEntrega == other.NumeroEntrega ||
                    NumeroEntrega != null &&
                    NumeroEntrega.Equals(other.NumeroEntrega)
                ) &&
                (
                    FechaEntrega == other.FechaEntrega ||
                    FechaEntrega != null &&
                    FechaEntrega.Equals(other.FechaEntrega)
                ) &&
                (
                    HoraEntrega == other.HoraEntrega ||
                    HoraEntrega != null &&
                    HoraEntrega.Equals(other.HoraEntrega)
                ) &&
                (
                    Peso == other.Peso ||
                    Peso != null &&
                    Peso.Equals(other.Peso)
                ) &&
                (
                    Zona == other.Zona ||
                    Zona != null &&
                    Zona.Equals(other.Zona)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Cliente != null)
                    hashCode = hashCode * 59 + Cliente.GetHashCode();
                if (CodigoPedido != null)
                    hashCode = hashCode * 59 + CodigoPedido.GetHashCode();
                if (NumeroEntrega != null)
                    hashCode = hashCode * 59 + NumeroEntrega.GetHashCode();
                if (FechaEntrega != null)
                    hashCode = hashCode * 59 + FechaEntrega.GetHashCode();
                if (HoraEntrega != null)
                    hashCode = hashCode * 59 + HoraEntrega.GetHashCode();
                if (Peso != null)
                    hashCode = hashCode * 59 + Peso.GetHashCode();
                if (Zona != null)
                    hashCode = hashCode * 59 + Zona.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(FiltrarEntregasDistribucionRequestFiltro left, FiltrarEntregasDistribucionRequestFiltro right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FiltrarEntregasDistribucionRequestFiltro left, FiltrarEntregasDistribucionRequestFiltro right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
