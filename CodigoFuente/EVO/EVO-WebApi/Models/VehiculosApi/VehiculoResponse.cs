/*
 * API de Pedidos
 *
 * API de administración de Pedidos 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jusuga@digitalcg.com.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace EVO_WebApi.Models.VehiculosApi
{
    /// <summary>
    /// Indica un vehiculo
    /// </summary>
    [DataContract]
    public partial class VehiculoResponse : IEquatable<VehiculoResponse>
    {
        /// <summary>
        /// Id del vehiculo
        /// </summary>
        /// <value>Id del vehiculo</value>
        [DataMember(Name = "vehiculoEntregaId")]
        public int VehiculoEntregaId { get; set; }

        /// <summary>
        /// Id del vehiculo
        /// </summary>
        /// <value>Id del vehiculo</value>
        [DataMember(Name = "vehiculoId")]
        public int VehiculoId { get; set; }

        /// <summary>
        /// Tipo de vehículo
        /// </summary>
        /// <value>Tipo de vehículo</value>
        [DataMember(Name = "tipoVehiculoNombre")]
        public string TipoVehiculoNombre { get; set; }

        /// <summary>
        /// Número de la placa
        /// </summary>
        /// <value>Número de la placa</value>
        [DataMember(Name = "placa")]
        public string Placa { get; set; }

        /// <summary>
        /// Capacidad de peso
        /// </summary>
        /// <value>Capacidad de peso</value>
        [DataMember(Name = "capacidad")]
        public decimal Capacidad { get; set; }

        /// <summary>
        /// Peso
        /// </summary>
        /// <value>Peso</value>
        [DataMember(Name = "peso")]
        public decimal Peso { get; set; }

        /// <summary>
        /// Unidad del peso (Kilogramos)
        /// </summary>
        /// <value>Unidad del peso (Kilogramos)</value>
        [DataMember(Name = "unidad")]
        public string Unidad { get; set; }

        /// <summary>
        /// Peso de los artículos
        /// </summary>
        /// <value>Peso de los artículos</value>
        [DataMember(Name = "totalEntregas")]
        public decimal TotalEntregas { get; set; }

        /// <summary>
        /// Nombre del muelle
        /// </summary>
        /// <value>Muelle</value>
        [DataMember(Name = "muelle")]
        public string Muelle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehiculoResponse {\n");
            sb.Append("  VehiculoId: ").Append(VehiculoId).Append("\n");
            sb.Append("  TipoVehiculo: ").Append(TipoVehiculoNombre).Append("\n");
            sb.Append("  Placa: ").Append(Placa).Append("\n");
            sb.Append("  Capacidad: ").Append(Capacidad).Append("\n");
            sb.Append("  Peso: ").Append(Peso).Append("\n");
            sb.Append("  Unidad: ").Append(Unidad).Append("\n");
            sb.Append("  TotalEntregas: ").Append(TotalEntregas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VehiculoResponse)obj);
        }

        /// <summary>
        /// Returns true if VehiculoResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of VehiculoResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehiculoResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    VehiculoId == other.VehiculoId ||
                    VehiculoId != null &&
                    VehiculoId.Equals(other.VehiculoId)
                ) &&
                (
                    TipoVehiculoNombre == other.TipoVehiculoNombre ||
                    TipoVehiculoNombre != null &&
                    TipoVehiculoNombre.Equals(other.TipoVehiculoNombre)
                ) &&
                (
                    Placa == other.Placa ||
                    Placa != null &&
                    Placa.Equals(other.Placa)
                ) &&
                (
                    Capacidad == other.Capacidad ||
                    Capacidad != null &&
                    Capacidad.Equals(other.Capacidad)
                ) &&
                (
                    Peso == other.Peso ||
                    Peso != null &&
                    Peso.Equals(other.Peso)
                ) &&
                (
                    Unidad == other.Unidad ||
                    Unidad != null &&
                    Unidad.Equals(other.Unidad)
                ) &&
                (
                    TotalEntregas == other.TotalEntregas ||
                    TotalEntregas != null &&
                    TotalEntregas.Equals(other.TotalEntregas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (VehiculoId != null)
                    hashCode = hashCode * 59 + VehiculoId.GetHashCode();
                if (TipoVehiculoNombre != null)
                    hashCode = hashCode * 59 + TipoVehiculoNombre.GetHashCode();
                if (Placa != null)
                    hashCode = hashCode * 59 + Placa.GetHashCode();
                if (Capacidad != null)
                    hashCode = hashCode * 59 + Capacidad.GetHashCode();
                if (Peso != null)
                    hashCode = hashCode * 59 + Peso.GetHashCode();
                if (Unidad != null)
                    hashCode = hashCode * 59 + Unidad.GetHashCode();
                if (TotalEntregas != null)
                    hashCode = hashCode * 59 + TotalEntregas.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(VehiculoResponse left, VehiculoResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VehiculoResponse left, VehiculoResponse right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
